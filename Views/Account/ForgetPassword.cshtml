@model MovieTheater.ViewModels.ForgetPasswordViewModel
@{
    ViewData["Title"] = "Forgot Password";
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - FPT 777 Cinema</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #0f172a 0%, #581c87 50%, #0f172a 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 2rem;
        }

        .forget-password-container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border-radius: 1.5rem;
            padding: 3rem;
            border: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
            width: 100%;
            max-width: 500px;
            position: relative;
        }

        .forget-password-container::before {
            content: '';
            position: absolute;
            inset: 0;
            background-image: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%239C92AC' fill-opacity='0.05'%3E%3Ccircle cx='30' cy='30' r='2'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
            opacity: 0.2;
            border-radius: 1.5rem;
        }

        .header {
            text-align: center;
            margin-bottom: 2rem;
            position: relative;
            z-index: 10;
        }

        .logo-container {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 1.5rem;
        }

        .logo-image {
            height: 60px;
            width: auto;
            filter: drop-shadow(0 8px 20px rgba(255, 224, 102, 0.4));
            transition: all 0.3s ease;
        }

        .logo-image:hover {
            transform: scale(1.05);
            filter: drop-shadow(0 12px 25px rgba(255, 224, 102, 0.6));
        }

        .title {
            font-size: 1.75rem;
            font-weight: 700;
            color: white;
            margin-bottom: 0.5rem;
        }

        .subtitle {
            color: #94a3b8;
            font-size: 1rem;
            line-height: 1.6;
        }

        .form-container {
            position: relative;
            z-index: 10;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            font-size: 0.875rem;
            font-weight: 500;
            color: #e2e8f0;
            margin-bottom: 0.5rem;
        }

        .form-input {
            width: 100%;
            height: 3rem;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 0.75rem;
            padding: 0 1rem;
            color: white;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .form-input::placeholder {
            color: #94a3b8;
        }

        .form-input:focus {
            outline: none;
            border-color: #fbbf24;
            box-shadow: 0 0 0 3px rgba(251, 191, 36, 0.1);
        }

        .form-input.input-validation-error {
            border-color: #ef4444;
            box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
        }

        .validation-error {
            color: #ef4444;
            font-size: 0.75rem;
            margin-top: 0.25rem;
            display: block;
            opacity: 0;
            transform: translateY(-5px);
            transition: all 0.3s ease;
        }

        .validation-error.field-validation-error {
            opacity: 1;
            transform: translateY(0);
        }

        .submit-btn {
            width: 100%;
            height: 3rem;
            background: linear-gradient(135deg, #ffe66d 0%, #524a0e 100%);
            border: none;
            border-radius: 0.75rem;
            color: white;
            font-weight: 600;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            box-shadow: 0 4px 15px rgba(168, 85, 247, 0.4);
            margin-top: 1rem;
        }

        .submit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(168, 85, 247, 0.6);
        }

        .submit-btn:disabled {
            opacity: 0.7;
            cursor: not-allowed;
            transform: none;
        }

        .loading-spinner {
            width: 1.25rem;
            height: 1.25rem;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-top: 2px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .back-link {
            text-align: center;
            margin-top: 1.5rem;
        }

        .back-link a {
            color: #fbbf24;
            text-decoration: none;
            font-size: 0.875rem;
            transition: color 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .back-link a:hover {
            color: #c084fc;
        }

        .alert {
            padding: 1rem;
            border-radius: 0.75rem;
            margin-bottom: 1.5rem;
            font-size: 0.875rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .alert-success {
            background: rgba(16, 185, 129, 0.1);
            border: 1px solid rgba(16, 185, 129, 0.3);
            color: #10b981;
        }

        .alert-danger {
            background: rgba(239, 68, 68, 0.1);
            border: 1px solid rgba(239, 68, 68, 0.3);
            color: #ef4444;
        }

        .alert i {
            font-size: 1rem;
        }

        /* OTP Container Styles */
        .otp-container {
            display: flex;
            gap: 0.5rem;
            justify-content: center;
            margin: 1.5rem 0;
        }

        .otp-box {
            width: 3rem;
            height: 3rem;
            text-align: center;
            font-size: 1.2rem;
            font-weight: bold;
            border: 2px solid rgba(255, 255, 255, 0.2);
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.05);
            color: white;
            transition: all 0.3s ease;
        }

        .otp-box:focus {
            border-color: #8b5cf6;
            background: rgba(139, 92, 246, 0.1);
            outline: none;
        }

        .otp-timer {
            text-align: center;
            color: #94a3b8;
            font-size: 0.9rem;
            margin-top: 0.5rem;
        }

        /* Password Input Container */
        .password-input-container {
            position: relative;
            display: flex;
            align-items: center;
            background: rgba(255, 255, 255, 0.02);
            border: 1.5px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            transition: all 0.3s ease;
            overflow: hidden;
        }

        .password-input-container:focus-within {
            border-color: #8b5cf6;
            box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.12);
            background: rgba(255, 255, 255, 0.03);
        }

        .password-input-container .form-input {
            background: transparent;
            border: none;
            color: white;
            padding: 1rem 1rem 1rem 1.5rem;
            font-size: 1rem;
            outline: none;
            flex: 1;
        }

        .password-toggle-btn {
            position: absolute;
            right: 12px;
            top: 50%;
            transform: translateY(-50%);
            background: rgba(139, 92, 246, 0.08);
            border: 1px solid rgba(139, 92, 246, 0.15);
            color: #8b5cf6;
            color: #8b5cf6;
            cursor: pointer;
            padding: 8px;
            border-radius: 8px;
            transition: all 0.3s ease;
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .password-toggle-btn:hover {
            background: rgba(139, 92, 246, 0.15);
            border-color: #8b5cf6;
            transform: translateY(-50%) scale(1.1);
        }

        /* Password Requirements */
        .password-requirements {
            background: rgba(139, 92, 246, 0.04);
            border: 1px solid rgba(139, 92, 246, 0.08);
            border-radius: 12px;
            padding: 1rem;
            margin-top: 0.5rem;
        }

        .password-requirements ul {
            margin: 0;
            padding: 0;
        }

        .password-requirements li {
            color: #94a3b8;
            font-size: 0.85rem;
            margin-bottom: 0.25rem;
            transition: color 0.3s ease;
        }

        .password-requirements li.valid {
            color: #10b981;
        }

        /* Toast Styles */
        .toast {
            position: fixed;
            top: 100px;
            right: 20px;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 1000;
            display: none;
            animation: slideIn 0.3s ease;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        }

        .toast.success {
            background: #10b981;
        }

        .toast.error {
            background: #ef4444;
        }

        .toast.warning {
            background: #f59e0b;
        }

        .toast.info {
            background: #3b82f6;
        }

        @@keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        /* Loading Spinner */
        .loading-spinner {
            width: 16px;
            height: 16px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-top: 2px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @@media (max-width: 768px) {
            body {
                padding: 1rem;
            }

            .forget-password-container {
                padding: 2rem;
            }

            .title {
                font-size: 1.5rem;
            }

            .logo-image {
                height: 50px;
            }

            .otp-container {
                gap: 0.4rem;
            }

            .otp-box {
                width: 2.8rem;
                height: 2.8rem;
                font-size: 1.1rem;
            }
        }
    </style>
</head>
<body>
    <div class="forget-password-container">
        <div class="header">
            <div class="logo-container">
                <img src="~/image/logo.png" alt="FPT 777 Logo" class="logo-image">
            </div>
            <h1 class="title">Forgot Password</h1>
            <p class="subtitle">Enter your email to reset your password</p>
        </div>

        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success">
                <i class="fas fa-check-circle"></i>
                @TempData["SuccessMessage"]
            </div>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger">
                <i class="fas fa-exclamation-circle"></i>
                @TempData["ErrorMessage"]
            </div>
        }

        <div class="form-container">
            <form id="forgetPasswordForm">
                @Html.AntiForgeryToken()
                <div class="form-group">
                    <label class="form-label">Email</label>
                    <input type="email" class="form-input" id="email" name="Email" placeholder="Enter your email" required />
                    <span id="emailFeedback" class="validation-error"></span>
                </div>

                <div id="otpContainer" class="otp-container" style="display:none;">
                    @for (var i = 0; i < 6; i++)
                    {
                        <input type="text"
                               inputmode="numeric"
                               pattern="\d*"
                               maxlength="1"
                               class="otp-box"
                               data-index="@i" />
                    }
                </div>
                <div id="otpTimer" class="otp-timer" style="display:none;"></div>
                <span id="otpFeedback" class="validation-error"></span>

                <div id="passwordContainer" style="display:none;">
                    <div class="form-group">
                        <label class="form-label">New Password</label>
                        <div class="password-input-container">
                            <input type="password" class="form-input" id="newPassword" name="NewPassword" placeholder="Enter new password" required />
                            <button class="password-toggle-btn" type="button" id="toggleNewPassword">
                                <i class="fas fa-eye" id="newPasswordIcon"></i>
                            </button>
                        </div>
                        <div class="password-requirements mt-2" id="passwordRequirements" style="display: none;">
                            <ul class="list-unstyled mt-1">
                                <li id="length-check"><small>• 8-16 characters</small></li>
                                <li id="uppercase-check"><small>• At least one uppercase letter</small></li>
                                <li id="lowercase-check"><small>• At least one lowercase letter</small></li>
                                <li id="number-check"><small>• At least one number</small></li>
                                <li id="special-check"><small>• At least one special character (!@@#$%^&*)</small></li>
                            </ul>
                        </div>
                        <span id="newPasswordFeedback" class="validation-error"></span>
                    </div>

                    <div class="form-group">
                        <label class="form-label">Confirm New Password</label>
                        <div class="password-input-container">
                            <input type="password" class="form-input" id="confirmNewPassword" name="confirmPassword" placeholder="Confirm new password" required />
                            <button class="password-toggle-btn" type="button" id="toggleConfirmNewPassword">
                                <i class="fas fa-eye" id="confirmNewPasswordIcon"></i>
                            </button>
                        </div>
                        <span id="passwordFeedback" class="validation-error"></span>
                    </div>
                </div>

                <button type="button" id="submitBtn" class="submit-btn" disabled>
                    <span id="submitText">Send Reset Link</span>
                    <i class="fas fa-paper-plane" id="submitIcon"></i>
                </button>
            </form>

            <div class="back-link">
                <a href="@Url.Action("Login", "Account")">
                    <i class="fas fa-arrow-left"></i>
                    Return to Login
                </a>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Toggle password visibility
            const togglePasswordVisibility = (inputElementId, iconElementId) => {
                const input = document.getElementById(inputElementId);
                const icon = document.getElementById(iconElementId);
                const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
                input.setAttribute('type', type);
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            };

            document.getElementById('toggleNewPassword').addEventListener('click', () => {
                togglePasswordVisibility('newPassword', 'newPasswordIcon');
            });
            document.getElementById('toggleConfirmNewPassword').addEventListener('click', () => {
                togglePasswordVisibility('confirmNewPassword', 'confirmNewPasswordIcon');
            });

            const boxes = Array.from(document.querySelectorAll('.otp-box'));
            const otpFeedback = document.getElementById('otpFeedback');
            const otpContainer = document.getElementById('otpContainer');
            const otpTimer = document.getElementById('otpTimer');
            let timerInterval, timerSeconds = 600; // 10 minutes

            // OTP box logic
            boxes.forEach((box, idx) => {
                box.addEventListener('input', e => {
                    const val = e.target.value;
                    if (!/^\d$/.test(val)) { // Only allow digits
                        e.target.value = '';
                        return;
                    }
                    if (idx < boxes.length - 1 && val) { // Move focus to next box if a digit is entered
                        boxes[idx + 1].focus();
                    } else if (idx === boxes.length - 1 && val) { // If last box is filled, blur
                        e.target.blur();
                    }
                    validateForm(); // Re-validate to enable/disable button
                });
                box.addEventListener('keydown', e => {
                    if (e.key === 'Backspace' && !e.target.value && idx > 0) {
                        boxes[idx - 1].focus();
                    }
                });
                if (idx === 0) { // Only attach paste listener to the first box
                    box.addEventListener('paste', e => {
                        e.preventDefault();
                        const pasted = (e.clipboardData || window.clipboardData).getData('text');
                        const digits = pasted.replace(/\D/g, '').slice(0, boxes.length).split('');
                        digits.forEach((d, i) => boxes[i].value = d);
                        const next = digits.length < boxes.length ? digits.length : boxes.length - 1;
                        boxes[next].focus();
                        validateForm(); // Re-validate after paste
                    });
                }
            });

            // Timer logic
            function startOtpTimer() {
                timerSeconds = 600; // Reset to 10 minutes
                updateOtpTimer();
                clearInterval(timerInterval);
                timerInterval = setInterval(() => {
                    timerSeconds--;
                    updateOtpTimer();
                    if (timerSeconds <= 0) {
                        clearInterval(timerInterval);
                        otpTimer.textContent = 'OTP expired. Please request a new one.';
                    }
                }, 1000);
            }

            function updateOtpTimer() {
                const min = Math.floor(timerSeconds / 60);
                const sec = timerSeconds % 60;
                otpTimer.textContent = `OTP valid for ${min}:${sec.toString().padStart(2, '0')}`;
            }

            // Function to show OTP UI (called after OTP is sent)
            window.showOtpUI = function () {
                otpContainer.style.display = 'flex';
                otpTimer.style.display = 'block';
                boxes.forEach(b => b.value = ''); // Clear OTP boxes
                boxes[0].focus(); // Focus first OTP box
                startOtpTimer();
            };

            // Function to get OTP value (called when verifying)
            window.getOtpValue = function () {
                return boxes.map(b => b.value).join('');
            };

            // --- Form Validation and Submission Logic ---
            const form = document.getElementById('forgetPasswordForm');
            const emailInput = document.getElementById('email');
            const newInput = document.getElementById('newPassword');
            const confirmInput = document.getElementById('confirmNewPassword');
            const submitBtn = document.getElementById('submitBtn');
            const submitText = document.getElementById('submitText');
            const submitIcon = document.getElementById('submitIcon');
            const emailFeedback = document.getElementById('emailFeedback');
            const newPasswordFeedback = document.getElementById('newPasswordFeedback');
            const passwordFeedback = document.getElementById('passwordFeedback');
            const passwordContainer = document.getElementById('passwordContainer');

            let step = 0; // 0: Initial, 1: OTP sent, 2: OTP verified

            function validatePassword(password) {
                const requirements = {
                    length: password.length >= 8 && password.length <= 16,
                    uppercase: /[A-Z]/.test(password),
                    lowercase: /[a-z]/.test(password),
                    number: /\d/.test(password),
                    special: /[!@@#$%^&*]/.test(password)
                };

                // Show requirements container when user starts typing
                const requirementsContainer = document.getElementById('passwordRequirements');
                if (password.length > 0 && requirementsContainer.style.display === 'none') {
                    requirementsContainer.style.display = 'block';
                }

                // Update visual indicators with classes
                const lengthCheck = document.getElementById('length-check');
                const uppercaseCheck = document.getElementById('uppercase-check');
                const lowercaseCheck = document.getElementById('lowercase-check');
                const numberCheck = document.getElementById('number-check');
                const specialCheck = document.getElementById('special-check');

                lengthCheck.classList.toggle('valid', requirements.length);
                uppercaseCheck.classList.toggle('valid', requirements.uppercase);
                lowercaseCheck.classList.toggle('valid', requirements.lowercase);
                numberCheck.classList.toggle('valid', requirements.number);
                specialCheck.classList.toggle('valid', requirements.special);

                return Object.values(requirements).every(req => req);
            }

            function validateForm() {
                const email = emailInput.value.trim();
                const newPassword = newInput.value;
                const confirmPassword = confirmInput.value;
                const otpCode = getOtpValue();

                const isEmailValid = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/.test(email);
                const isNewPasswordValid = validatePassword(newPassword);
                const isConfirmPasswordMatch = newPassword === confirmPassword && newPassword.length > 0;
                const isOtpFilled = otpCode.length === 6;

                let canEnableButton = false;

                if (step === 0) { // Initial step: Validate email
                    canEnableButton = isEmailValid;
                } else if (step === 1) { // OTP sent step: Validate OTP
                    canEnableButton = isOtpFilled;
                } else if (step === 2) { // OTP verified step: Validate new, confirm passwords and OTP
                    canEnableButton = isNewPasswordValid && isConfirmPasswordMatch && isOtpFilled;
                }

                submitBtn.disabled = !canEnableButton;

                // Feedback for email
                if (!isEmailValid && email.length > 0) {
                    emailFeedback.textContent = 'Invalid email format.';
                } else {
                    emailFeedback.textContent = '';
                }

                // Feedback for new password requirements
                if (!isNewPasswordValid && newPassword.length > 0) {
                    newPasswordFeedback.textContent = 'New password does not meet requirements.';
                } else {
                    newPasswordFeedback.textContent = '';
                }

                // Feedback for confirm password
                if (newPassword !== confirmPassword && confirmPassword.length > 0) {
                    passwordFeedback.textContent = 'Passwords do not match.';
                } else {
                    passwordFeedback.textContent = '';
                }
            }

            // Attach input listeners to all relevant fields
            [emailInput, newInput, confirmInput].forEach(input =>
                input.addEventListener('input', validateForm)
            );
            // Also attach to OTP boxes
            boxes.forEach(box => box.addEventListener('input', validateForm));

            // Reset form when clicking on email field
            emailInput.addEventListener('click', function() {
                if (step > 0) {
                    // Reset to initial state
                    step = 0;
                    otpContainer.style.display = 'none';
                    otpTimer.style.display = 'none';
                    passwordContainer.style.display = 'none';
                    boxes.forEach(b => b.value = '');
                    newInput.value = '';
                    confirmInput.value = '';
                    submitText.textContent = 'Send Reset Link';
                    submitIcon.className = 'fas fa-paper-plane';
                    clearInterval(timerInterval);
                    validateForm();
                    showToast('Form reset. Please enter your email again.', 'info');
                }
            });

            async function sendOtp() {
                submitBtn.disabled = true;
                submitText.textContent = 'Sending OTP…';
                submitIcon.className = 'loading-spinner';
                otpFeedback.textContent = '';

                const email = emailInput.value.trim();
                const res = await fetch('/Account/SendForgetPasswordOtp', {
                    method: 'POST',
                    headers: { 
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({ email: email })
                });
                const data = await res.json();

                if (data.success) {
                    step = 1;
                    showOtpUI();
                    showToast('OTP sent. Check your email.', 'success');
                    submitText.textContent = 'Verify OTP';
                    submitIcon.className = 'fas fa-shield-alt';
                } else {
                    otpFeedback.textContent = data.error || 'Could not send OTP.';
                    submitText.textContent = 'Send Reset Link';
                    submitIcon.className = 'fas fa-paper-plane';
                }
                submitBtn.disabled = false;
                validateForm();
            }

            async function verifyOtp() {
                const code = getOtpValue();
                if (!code || code.length < 6) {
                    otpFeedback.textContent = 'Please enter all digits.';
                    return;
                }

                submitBtn.disabled = true;
                submitText.textContent = 'Verifying…';
                submitIcon.className = 'loading-spinner';
                otpFeedback.textContent = '';

                const email = emailInput.value.trim();
                const res = await fetch('/Account/VerifyForgetPasswordOtp', {
                    method: 'POST',
                    headers: { 
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({ email: email, otp: code })
                });
                const data = await res.json();

                if (data.success) {
                    step = 2;
                    otpFeedback.textContent = '';
                    submitText.textContent = 'Reset Password';
                    submitIcon.className = 'fas fa-key';
                    otpContainer.style.display = 'none';
                    otpTimer.style.display = 'none';
                    passwordContainer.style.display = 'block';
                    showToast('OTP verified successfully!', 'success');
                } else {
                    otpFeedback.textContent = data.error || 'Invalid OTP.';
                    submitText.textContent = 'Verify OTP';
                    submitIcon.className = 'fas fa-shield-alt';
                }
                submitBtn.disabled = false;
                validateForm();
            }

            async function submitReset() {
                submitBtn.disabled = true;
                submitText.textContent = 'Resetting…';
                submitIcon.className = 'loading-spinner';
                otpFeedback.textContent = '';

                const email = emailInput.value.trim();
                const newPassword = newInput.value;
                const confirmPassword = confirmInput.value;
                const otp = getOtpValue();

                try {
                    const formData = new FormData();
                    formData.append('email', email);
                    formData.append('newPassword', newPassword);
                    formData.append('confirmPassword', confirmPassword);
                    formData.append('otp', otp);
                    
                    // Add anti-forgery token
                    const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
                    if (token) {
                        formData.append('__RequestVerificationToken', token);
                    }

                    const res = await fetch('/Account/ResetPasswordAsync', {
                        method: 'POST',
                        body: formData
                    });

                    if (!res.ok) {
                        const errorText = await res.text();
                        throw new Error(`HTTP error! status: ${res.status}`);
                    }

                    const data = await res.json();

                    if (data.success) {
                        showToast('Password reset successfully! Redirecting to login...', 'success');
                        setTimeout(() => {
                            window.location.href = '/Account/Login';
                        }, 2000);
                    } else {
                        otpFeedback.textContent = data.error || 'Failed to reset password.';
                        submitText.textContent = 'Reset Password';
                        submitIcon.className = 'fas fa-key';
                        submitBtn.disabled = false;
                        showToast(data.error || 'Failed to reset password.', 'error');
                    }
                } catch (error) {
                    console.error('Error in submitReset:', error);
                    otpFeedback.textContent = 'Network error. Please try again.';
                    submitText.textContent = 'Reset Password';
                    submitIcon.className = 'fas fa-key';
                    submitBtn.disabled = false;
                    showToast('Network error. Please try again.', 'error');
                }
                validateForm();
            }

            submitBtn.addEventListener('click', () => {
                if (step === 0) {
                    sendOtp();
                } else if (step === 1) {
                    verifyOtp();
                } else if (step === 2) {
                    submitReset();
                }
            });

            // Helper function to show toast notifications
            function showToast(message, type = 'success') {
                // Create toast element if it doesn't exist
                let toast = document.getElementById('toast');
                if (!toast) {
                    toast = document.createElement('div');
                    toast.id = 'toast';
                    toast.className = 'toast';
                    document.body.appendChild(toast);
                }

                toast.textContent = message;
                toast.className = `toast ${type}`;
                toast.style.display = 'block';
                
                // Auto hide after 4 seconds
                setTimeout(() => { 
                    toast.style.display = 'none'; 
                }, 4000);
            }

            // Initial validation on page load
            validateForm();
        });
    </script>
</body>
</html> 