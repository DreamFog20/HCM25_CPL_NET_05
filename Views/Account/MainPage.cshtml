@model MovieTheater.ViewModels.ProfileUpdateViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "My Account";
    var activeTab = ViewData["ActiveTab"]?.ToString() ?? "Profile";
}


<div class="container-fluid">
    <div class="row">
        <!-- Sidebar Tabs -->
        <div class="col-2 bg-light border-end vh-50 pt-3">
            <ul class="nav flex-column nav-pills" id="accountTabs">
                <li class="nav-item">
                    <a class="nav-link @(activeTab == "Profile" ? "active" : "")" data-tab="Profile" href="#">Profile</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(activeTab == "Rank" ? "active" : "")" data-tab="Rank" href="#">Rank</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(activeTab == "Score" ? "active" : "")" data-tab="Score" href="#">Score</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(activeTab == "Voucher" ? "active" : "")" data-tab="Voucher" href="#">Voucher</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(activeTab == "History" ? "active" : "")" data-tab="History" href="#">History Booking Ticket</a>
                </li>
            </ul>
        </div>

        <!-- Tab Content -->
        <div class="col-10 p-4" id="tabContent">
            <h3>Loading...</h3>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        $(document).ready(function () {
            // Load initial tab content
            $.get(`/MyAccount/LoadTab?tab=@activeTab`, function (data) {
                $('#tabContent').html(data);
            });

            $('#accountTabs .nav-link').click(function (e) {
                e.preventDefault();
                loadTab($(this).data('tab'));
            });

            // Ưu tiên đọc từ URL ?tab=..., nếu không có thì dùng ViewData
            const urlParams = new URLSearchParams(window.location.search);
            const activeTab = urlParams.get('tab') || '@ViewData["ActiveTab"]' || 'Information';
            loadTab(activeTab);

            // Hiển thị toast nếu có ?toast=...
            const toastMessage = urlParams.get('toast');
            if (toastMessage && typeof showToast === 'function') {
                showToast(decodeURIComponent(toastMessage));
            }
        });

                // Show loading and load content
                $('#tabContent').html('<h3>Loading...</h3>');

            $.ajax({
                url: url,
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (result) {
                    if (result.success) {
                        loadTab(result.reloadTab);
                        if (result.toast) showToast(result.toast);
                    } else if (result.error) {
                        showErrorToast(result.error);
                    } else {
                        $('#tabContent').html(result); // Hiển thị lại form nếu có lỗi ModelState
                    }
                },
                error: function () {
                    $('#tabContent').html('<div class="text-danger">Lỗi không xác định từ server.</div>');
                }
            });

            // Ẩn alert sau vài giây (nếu có)
            setTimeout(() => $(".alert").fadeOut("slow"), 3000);
        });

        // Hiển thị TempData toast khi DOM sẵn sàng
        document.addEventListener("DOMContentLoaded", function () {
            const toastEl = document.getElementById('toastMessage');
            if (toastEl && toastEl.querySelector('.toast-body').innerText.trim() !== "") {
                const toast = new bootstrap.Toast(toastEl, { delay: 3000 });
                toast.show();
            }
        });
   
    </script>
}



