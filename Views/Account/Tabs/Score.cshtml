@{
    ViewData["Title"] = "Score History";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h2 class="text-center mb-0">Score History</h2>
                </div>
                <div class="card-body">
                    <div class="text-center mb-4" id="currentScoreDisplay">
                        <div class="alert alert-info d-inline-block p-3 rounded-pill">
                            <i class="fas fa-star text-warning"></i>
                            <strong class="fs-4">Current Score: <span id="currentScoreValue">@(Model?.CurrentScore.ToString("N0") ?? "0")</span> pts</strong>
                        </div>
                    </div>



                    <!-- Score Statistics Dashboard -->
                    <div class="row mb-4" id="scoreStats">
                        <div class="col-md-3">
                            <div class="stat-card bg-success text-white">
                                <i class="fas fa-plus-circle fa-2x"></i>
                                <h4 id="totalEarned">0</h4>
                                <p>Total Earned</p>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="stat-card bg-danger text-white">
                                <i class="fas fa-minus-circle fa-2x"></i>
                                <h4 id="totalUsed">0</h4>
                                <p>Total Used</p>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="stat-card bg-info text-white">
                                <i class="fas fa-calendar fa-2x"></i>
                                <h4 id="thisMonth">0</h4>
                                <p>This Month</p>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="stat-card bg-warning text-white">
                                <i class="fas fa-trophy fa-2x"></i>
                                <h4 id="avgPerMovie">0</h4>
                                <p>Avg/Movie</p>
                            </div>
                        </div>
                    </div>



                    <!-- Dynamic Achievements -->
                    <div class="achievement-section mb-4" id="achievementSection">
                        <h5 class="text-warning mb-3">
                            <i class="fas fa-medal"></i> Your Achievements
                        </h5>
                        <div class="achievement-badges" id="achievementBadges">
                            <!-- Will be populated with real data -->
                        </div>
                    </div>

                    <form id="scoreFilterForm" class="row g-3 p-4 bg-light rounded-3 shadow-sm mb-4">
                        <div class="col-md-4">
                            <label class="form-label fw-bold">From Date</label>
                            <input type="date" id="fromDate" name="fromDate" class="form-control" />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label fw-bold">To Date</label>
                            <input type="date" id="toDate" name="toDate" class="form-control" />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label fw-bold d-block">Score Type</label>
                            <div class="btn-group w-100" role="group">
                                <input type="radio" class="btn-check" id="scoreAdd" name="historyType" value="add" checked />
                                <label class="btn btn-outline-primary" for="scoreAdd">
                                    <i class="fas fa-plus-circle"></i> Score Adding
                                </label>
                                <input type="radio" class="btn-check" id="scoreUse" name="historyType" value="use" />
                                <label class="btn btn-outline-primary" for="scoreUse">
                                    <i class="fas fa-minus-circle"></i> Score Using
                                </label>
                                <input type="radio" class="btn-check" id="scoreAll" name="historyType" value="all" />
                                <label class="btn btn-outline-primary" for="scoreAll">
                                    <i class="fas fa-list"></i> All
                                </label>
                            </div>
                        </div>
                        <div class="col-12 text-end">
                            <button type="button" id="viewAllBtn" class="btn btn-success me-2">
                                <i class="fas fa-list"></i> View All
                            </button>
                            <button type="submit" id="viewScoreBtn" class="btn btn-primary px-4">
                                <i class="fas fa-search"></i> Filter
                            </button>
                        </div>
                    </form>

                    <!-- Quick Actions -->
                    <div class="quick-actions mb-4">
                        <div class="row">
                            <div class="col-md-3">
                                <button class="btn btn-outline-warning w-100" id="exportBtn">
                                    <i class="fas fa-download"></i> Export Data
                                </button>
                            </div>
                            <div class="col-md-3">
                                <button class="btn btn-outline-info w-100" id="shareBtn">
                                    <i class="fas fa-share"></i> Share Stats
                                </button>
                            </div>
                            <div class="col-md-3">
                                <button class="btn btn-outline-success w-100" id="printBtn">
                                    <i class="fas fa-print"></i> Print Report
                                </button>
                            </div>
                            <div class="col-md-3">
                                <button class="btn btn-outline-primary w-100" id="refreshBtn">
                                    <i class="fas fa-sync-alt"></i> Refresh
                                </button>
                            </div>
                        </div>
                    </div>

                    <div id="scoreResult">
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-3">Loading score history...</p>
                        </div>
                    </div>
                    <nav id="scorePagination" class="mt-3"></nav>
                </div>
            </div>
        </div>
    </div>
</div>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" 
      integrity="sha512-1ycn6IcaQQ40/MKBW2W4Rhis/DbILU74C1vSrLJxCq57o941Ym01SwNsOMqvEBFlcgUa6xLiPY/NS5R+E6ztQ==" 
      crossorigin="anonymous" />
<script src="https://cdn.jsdelivr.net/npm/chart.js" 
        integrity="sha512-7U4rRBFea2Q1fTNMo0B3I0p0zJ7bZJTvf8DLPuZL6XENz6R+0oOkVeI7BjOF0fGQVkq0qgGqLDNNcrNv4LkQ==" 
        crossorigin="anonymous"></script>
<script>
    $(function() {
        // Prevent form submission
        $('#scoreFilterForm').attr('action', 'javascript:void(0)');
        $('#scoreFilterForm').removeAttr('method');
        
        let scoreDataCache = [];
        let currentPage = 1;
        const pageSize = 10;

        // Function to load score history
        function loadScoreHistory(fromDate, toDate, historyType) {
            // Show loading state
            $('#viewScoreBtn, #viewAllBtn').prop('disabled', true);
            $('#viewScoreBtn').html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Loading...');
            
            $.ajax({
                url: '/Score/ScoreHistoryPartial',
                type: 'GET',
                data: { fromDate: fromDate, toDate: toDate, historyType: historyType },
                success: function (response) {
                    if (response.success) {
                        currentPage = 1;
                        renderScoreTable(response.data, response.currentScore);
                        calculateStatistics(response.data);
                        generateAchievements(response.data);
                    } else {
                        $('#scoreResult').html('<div class="alert alert-danger"><i class="fas fa-exclamation-triangle"></i> ' + response.message + '</div>');
                    }
                    $('#accountTabs .nav-link').removeClass('active');
                    $('#accountTabs .nav-link[data-tab="Score"]').addClass('active');
                },
                error: function () {
                    $('#scoreResult').html('<div class="alert alert-danger"><i class="fas fa-exclamation-triangle"></i> Error loading data.</div>');
                },
                complete: function() {
                    // Reset button state
                    $('#viewScoreBtn, #viewAllBtn').prop('disabled', false);
                    $('#viewScoreBtn').html('<i class="fas fa-search"></i> Filter');
                }
            });
        }

        // Calculate statistics from real data
        function calculateStatistics(scoreData) {
            const totalEarned = scoreData.filter(item => item.type === "add").reduce((sum, item) => sum + item.score, 0);
            const totalUsed = scoreData.filter(item => item.type === "use").reduce((sum, item) => sum + item.score, 0);
            
            // Calculate this month's score
            const now = new Date();
            const thisMonthData = scoreData.filter(item => {
                const itemDate = new Date(item.dateCreated);
                return itemDate.getMonth() === now.getMonth() && itemDate.getFullYear() === now.getFullYear();
            });
            const thisMonth = thisMonthData.reduce((sum, item) => sum + (item.type === "add" ? item.score : -item.score), 0);
            
            // Calculate average per movie
            const earnedMovies = scoreData.filter(item => item.type === "add");
            const avgPerMovie = earnedMovies.length > 0 ? Math.round(totalEarned / earnedMovies.length) : 0;
            
            $('#totalEarned').text(totalEarned.toLocaleString());
            $('#totalUsed').text(totalUsed.toLocaleString());
            $('#thisMonth').text(thisMonth.toLocaleString());
            $('#avgPerMovie').text(avgPerMovie.toLocaleString());
        }



        // Generate achievements based on real data
        function generateAchievements(scoreData) {
            const achievements = [];
            
            // First movie achievement
            if (scoreData.length > 0) {
                achievements.push({
                    id: 'firstMovie',
                    title: 'First Movie',
                    icon: 'fas fa-star',
                    color: 'bg-gold',
                    description: 'Watched your first movie'
                });
            }
            
            // Movie buff achievement (5+ movies)
            const earnedMovies = scoreData.filter(item => item.type === "add");
            if (earnedMovies.length >= 5) {
                achievements.push({
                    id: 'movieBuff',
                    title: 'Movie Buff',
                    icon: 'fas fa-film',
                    color: 'bg-silver',
                    description: 'Watched 5+ movies'
                });
            }
            
            // Big spender achievement (spent 500+ points)
            const totalSpent = scoreData.filter(item => item.type === "use").reduce((sum, item) => sum + item.score, 0);
            if (totalSpent >= 500) {
                achievements.push({
                    id: 'bigSpender',
                    title: 'Big Spender',
                    icon: 'fas fa-coins',
                    color: 'bg-bronze',
                    description: 'Spent 500+ points'
                });
            }
            
            // High roller achievement (earned 2000+ points)
            const totalEarned = scoreData.filter(item => item.type === "add").reduce((sum, item) => sum + item.score, 0);
            if (totalEarned >= 2000) {
                achievements.push({
                    id: 'highRoller',
                    title: 'High Roller',
                    icon: 'fas fa-crown',
                    color: 'bg-purple',
                    description: 'Earned 2000+ points'
                });
            }
            
            // Monthly master achievement (earned 200+ points this month)
            const now = new Date();
            const thisMonthEarned = scoreData.filter(item => {
                const itemDate = new Date(item.dateCreated);
                return item.type === "add" && itemDate.getMonth() === now.getMonth() && itemDate.getFullYear() === now.getFullYear();
            }).reduce((sum, item) => sum + item.score, 0);
            
            if (thisMonthEarned >= 200) {
                achievements.push({
                    id: 'monthlyMaster',
                    title: 'Monthly Master',
                    icon: 'fas fa-calendar-alt',
                    color: 'bg-info',
                    description: 'Earned 200+ points this month'
                });
            }
            
            // Regular viewer achievement (watched 3+ movies this month)
            const thisMonthMovies = scoreData.filter(item => {
                const itemDate = new Date(item.dateCreated);
                return item.type === "add" && itemDate.getMonth() === now.getMonth() && itemDate.getFullYear() === now.getFullYear();
            });
            
            if (thisMonthMovies.length >= 3) {
                achievements.push({
                    id: 'regularViewer',
                    title: 'Regular Viewer',
                    icon: 'fas fa-eye',
                    color: 'bg-success',
                    description: 'Watched 3+ movies this month'
                });
            }
            
            // Render achievements
            let html = '';
            achievements.forEach(achievement => {
                html += `<span class="badge ${achievement.color}" title="${achievement.description}">
                    <i class="${achievement.icon}"></i> ${achievement.title}
                </span>`;
            });
            
            if (achievements.length === 0) {
                html = '<p class="text-muted">Complete more activities to earn achievements!</p>';
            }
            
            $('#achievementBadges').html(html);
        }

        // Function to render score table
        function renderScoreTable(scoreData, currentScore) {
            scoreDataCache = scoreData || [];
            if (currentScore !== undefined) {
                $('#currentScoreValue').text(currentScore);
            }
            renderScorePage(currentPage);
            renderScorePagination();
        }

        function renderScorePage(page) {
            let html = '';
            const start = (page - 1) * pageSize;
            const end = start + pageSize;
            const pageData = scoreDataCache.slice(start, end);
            if (pageData.length > 0) {
                html += '<div class="table-responsive"><table class="table table-hover table-striped"><thead class="table-dark"><tr><th>Date</th><th>Movie</th><th class="text-end">Score</th></tr></thead><tbody>';
                pageData.forEach(function(item) {
                    var date = new Date(item.dateCreated).toLocaleDateString('vi-VN');
                    var scoreBadge = '';
                    if (item.type === "add") {
                        scoreBadge = '<span class="badge bg-success">+' + item.score + '</span>';
                    } else if (item.type === "use") {
                        scoreBadge = '<span class="badge bg-danger">-' + item.score + '</span>';
                    }
                    html += '<tr><td>' + date + '</td><td>' + (item.movieName || 'N/A') + '</td><td class="text-end">' + scoreBadge + '</td></tr>';
                });
                html += '</tbody></table></div>';
            } else {
                html += '<div class="text-center text-muted py-5"><i class="fas fa-info-circle fa-3x mb-3"></i><p class="lead">No data found for the selected period.</p></div>';
            }
            $('#scoreResult').html(html);
        }

        function renderScorePagination() {
            const totalPages = Math.ceil(scoreDataCache.length / pageSize);
            if (totalPages <= 1) {
                $('#scorePagination').html('');
                return;
            }
            
            // Calculate visible pages with ellipsis
            const maxVisiblePages = 7;
            let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
            let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
            
            if (endPage - startPage + 1 < maxVisiblePages) {
                startPage = Math.max(1, endPage - maxVisiblePages + 1);
            }
            
            let html = '<div class="pagination-container">';
            html += '<ul class="pagination justify-content-center">';
            
            // Previous button
            html += `<li class="page-item${currentPage === 1 ? ' disabled' : ''}">`;
            html += `<a class="page-link" href="#" data-page="${currentPage - 1}"><i class="fas fa-chevron-left"></i></a>`;
            html += '</li>';
            
            // First page + ellipsis
            if (startPage > 1) {
                html += '<li class="page-item"><a class="page-link" href="#" data-page="1">1</a></li>';
                if (startPage > 2) {
                    html += '<li class="page-item disabled"><span class="page-link">...</span></li>';
                }
            }
            
            // Visible pages
            for (let i = startPage; i <= endPage; i++) {
                html += `<li class="page-item${currentPage === i ? ' active' : ''}">`;
                html += `<a class="page-link" href="#" data-page="${i}">${i}</a>`;
                html += '</li>';
            }
            
            // Last page + ellipsis
            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    html += '<li class="page-item disabled"><span class="page-link">...</span></li>';
                }
                html += `<li class="page-item"><a class="page-link" href="#" data-page="${totalPages}">${totalPages}</a></li>`;
            }
            
            // Next button
            html += `<li class="page-item${currentPage === totalPages ? ' disabled' : ''}">`;
            html += `<a class="page-link" href="#" data-page="${currentPage + 1}"><i class="fas fa-chevron-right"></i></a>`;
            html += '</li>';
            
            html += '</ul>';
            html += '</div>';
            
            $('#scorePagination').html(html);
            $('#scorePagination .page-link').off('click').on('click', function (e) {
                e.preventDefault();
                const page = parseInt($(this).data('page'));
                if (!isNaN(page) && page >= 1 && page <= totalPages && page !== currentPage) {
                    currentPage = page;
                    renderScorePage(currentPage);
                    renderScorePagination();
                }
            });
        }

        // Handle form submit
        $('#scoreFilterForm').on('submit', function(e) {
            e.preventDefault();
            var fromDate = $('#fromDate').val();
            var toDate = $('#toDate').val();
            var historyType = $('input[name="historyType"]:checked').val();
            
            loadScoreHistory(fromDate, toDate, historyType);
        });

        // Handle View All button click
        $('#viewAllBtn').on('click', function() {
            loadScoreHistory('', '', 'all');
        });

        // Handle Quick Action buttons
        $('#exportBtn').on('click', function() {
            if (scoreDataCache.length > 0) {
                exportToCSV(scoreDataCache);
            } else {
                alert('No data to export');
            }
        });

        $('#shareBtn').on('click', function() {
            shareStats();
        });

        $('#printBtn').on('click', function() {
            window.print();
        });

        $('#refreshBtn').on('click', function() {
            loadScoreHistory('', '', 'all');
        });

        // Export to CSV function
        function exportToCSV(data) {
            const headers = ['Date', 'Movie', 'Score', 'Type'];
            const csvContent = [
                headers.join(','),
                ...data.map(item => [
                    new Date(item.dateCreated).toLocaleDateString('vi-VN'),
                    item.movieName || 'N/A',
                    item.score,
                    item.type
                ].join(','))
            ].join('\n');
            
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', 'score_history.csv');
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        // Share stats function
        function shareStats() {
            const totalEarned = $('#totalEarned').text();
            const totalUsed = $('#totalUsed').text();
            const thisMonth = $('#thisMonth').text();
            const currentScore = $('#currentScoreValue').text();
            
            const shareText = `My Movie Theater Score Stats:
🏆 Current Score: ${currentScore} points
💰 Total Earned: ${totalEarned} points
💸 Total Used: ${totalUsed} points
📅 This Month: ${thisMonth} points`;
            
            if (navigator.share) {
                navigator.share({
                    title: 'My Score Stats',
                    text: shareText
                });
            } else {
                // Fallback: copy to clipboard
                navigator.clipboard.writeText(shareText).then(() => {
                    alert('Stats copied to clipboard!');
                });
            }
        }

        // Load initial data (all records)
        loadScoreHistory('', '', 'all');
    });
</script>
<style>
/* Modern Cinema Theme for Score */
/* Override Bootstrap defaults */
.table-responsive {
    background: rgba(255, 255, 255, 0.02) !important;
    border-radius: 15px;
}

.table-responsive .table {
    margin-bottom: 0;
}

/* Force dark theme for all table elements */
.table,
.table-responsive,
.table-responsive .table {
    background: rgba(255, 255, 255, 0.02) !important;
    color: #fff !important;
}

/* Ensure dark background for the entire score section */
.container,
.row,
.col-lg-10 {
    background: transparent !important;
}

/* Override any Bootstrap light backgrounds */
.bg-light {
    background: rgba(255, 255, 255, 0.05) !important;
}

/* Ensure text is visible on dark background */
.text-muted {
    color: rgba(255, 255, 255, 0.6) !important;
}
.card {
    border: none;
    border-radius: 20px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
    color: #fff;
}

.card-header {
    background: linear-gradient(135deg, #d4af37 0%, #f4d03f 100%) !important;
    color: #000 !important;
    border-radius: 20px 20px 0 0 !important;
    border: none;
    padding: 1.5rem;
}

.card-header h2 {
    font-weight: 700;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
}

.card-body {
    padding: 2rem;
}

.alert-info {
    background: linear-gradient(135deg, rgba(212, 175, 55, 0.1) 0%, rgba(244, 208, 63, 0.1) 100%);
    border: 2px solid #d4af37;
    color: #d4af37;
    border-radius: 25px;
    padding: 1.5rem 2rem;
    box-shadow: 0 5px 15px rgba(212, 175, 55, 0.2);
}

.alert-info .fas {
    font-size: 1.5rem;
    margin-right: 0.5rem;
}

.bg-light {
    background: rgba(255, 255, 255, 0.05) !important;
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 15px;
}

.form-control {
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 10px;
    color: #fff;
    padding: 0.75rem 1rem;
    transition: all 0.3s ease;
}

.form-control:focus {
    background: rgba(255, 255, 255, 0.15);
    border-color: #d4af37;
    box-shadow: 0 0 0 0.2rem rgba(212, 175, 55, 0.25);
    color: #fff;
}

.form-control::placeholder {
    color: rgba(255, 255, 255, 0.6);
}

.form-label {
    color: #d4af37;
    font-weight: 600;
    margin-bottom: 0.5rem;
}

.btn-group .btn {
    border-radius: 8px;
    margin: 0 2px;
    transition: all 0.3s ease;
}

.btn-outline-primary {
    border-color: #d4af37;
    color: #d4af37;
    background: transparent;
}

.btn-outline-primary:hover,
.btn-outline-primary:focus,
.btn-check:checked + .btn-outline-primary {
    background: linear-gradient(135deg, #d4af37 0%, #f4d03f 100%);
    border-color: #d4af37;
    color: #000;
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(212, 175, 55, 0.3);
}

.btn-success {
    background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
    border: none;
    border-radius: 10px;
    padding: 0.75rem 1.5rem;
    transition: all 0.3s ease;
}

.btn-success:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(40, 167, 69, 0.3);
}

.btn-primary {
    background: linear-gradient(135deg, #d4af37 0%, #f4d03f 100%);
    border: none;
    border-radius: 10px;
    color: #000;
    font-weight: 600;
    padding: 0.75rem 1.5rem;
    transition: all 0.3s ease;
}

.btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(212, 175, 55, 0.3);
}

.table {
    background: rgba(255, 255, 255, 0.02) !important;
    border-radius: 15px;
    overflow: hidden;
    color: #fff !important;
}

.table-dark {
    background: linear-gradient(135deg, #d4af37 0%, #f4d03f 100%) !important;
    color: #000 !important;
}

.table-dark th {
    border: none !important;
    padding: 1rem;
    font-weight: 600;
    background: linear-gradient(135deg, #d4af37 0%, #f4d03f 100%) !important;
    color: #000 !important;
}

.table tbody {
    background: rgba(255, 255, 255, 0.02) !important;
}

.table tbody tr {
    transition: all 0.3s ease;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    background: rgba(255, 255, 255, 0.02) !important;
}

.table tbody tr:hover {
    background: rgba(212, 175, 55, 0.1) !important;
    transform: scale(1.01);
}

.table tbody td {
    padding: 1rem;
    border: none !important;
    color: #fff !important;
    background: transparent !important;
}

.table-striped > tbody > tr:nth-of-type(odd) {
    background: rgba(255, 255, 255, 0.05) !important;
}

.table-striped > tbody > tr:nth-of-type(even) {
    background: rgba(255, 255, 255, 0.02) !important;
}

.badge {
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-weight: 600;
    font-size: 0.9rem;
}

.badge.bg-success {
    background: linear-gradient(135deg, #28a745 0%, #20c997 100%) !important;
}

.badge.bg-danger {
    background: linear-gradient(135deg, #dc3545 0%, #fd7e14 100%) !important;
}

.pagination-container {
    margin-top: 2rem;
    display: flex;
    justify-content: center;
    align-items: center;
}

.pagination {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    flex-wrap: nowrap;
    margin: 0;
    padding: 0;
    list-style: none;
}

.page-item {
    margin: 0;
}

.page-link {
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: #fff;
    border-radius: 12px;
    padding: 0.75rem 1rem;
    min-width: 45px;
    height: 45px;
    display: flex;
    align-items: center;
    justify-content: center;
    text-decoration: none;
    font-weight: 600;
    font-size: 0.95rem;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.page-link:hover {
    background: rgba(212, 175, 55, 0.2);
    border-color: #d4af37;
    color: #d4af37;
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(212, 175, 55, 0.3);
}

.page-item.active .page-link {
    background: linear-gradient(135deg, #d4af37 0%, #f4d03f 100%);
    border-color: #d4af37;
    color: #000;
    font-weight: 700;
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(212, 175, 55, 0.4);
}

.page-item.disabled .page-link {
    background: rgba(255, 255, 255, 0.05);
    border-color: rgba(255, 255, 255, 0.1);
    color: rgba(255, 255, 255, 0.3);
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
}

.page-item.disabled .page-link:hover {
    background: rgba(255, 255, 255, 0.05);
    border-color: rgba(255, 255, 255, 0.1);
    color: rgba(255, 255, 255, 0.3);
    transform: none;
    box-shadow: none;
}

/* Ellipsis styling */
.page-item.disabled .page-link:not(.page-link[data-page]) {
    background: transparent;
    border: none;
    color: rgba(255, 255, 255, 0.5);
    font-weight: 700;
    font-size: 1.2rem;
    padding: 0.5rem;
    min-width: auto;
    height: auto;
}

.page-item.disabled .page-link:not(.page-link[data-page]):hover {
    background: transparent;
    border: none;
    color: rgba(255, 255, 255, 0.5);
    transform: none;
    box-shadow: none;
}

.alert-danger {
    background: linear-gradient(135deg, rgba(220, 53, 69, 0.1) 0%, rgba(253, 126, 20, 0.1) 100%);
    border: 2px solid #dc3545;
    color: #dc3545;
    border-radius: 15px;
    padding: 1.5rem;
}

.text-muted {
    color: rgba(255, 255, 255, 0.6) !important;
}

.fa-3x {
    color: #d4af37;
}

/* New Features Styling */
.stat-card {
    border-radius: 15px;
    padding: 1.5rem;
    text-align: center;
    box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    transition: transform 0.3s ease;
    margin-bottom: 1rem;
}

.stat-card:hover {
    transform: translateY(-5px);
}

.stat-card h4 {
    font-size: 2rem;
    font-weight: 700;
    margin: 0.5rem 0;
}

.stat-card p {
    margin: 0;
    font-size: 0.9rem;
    opacity: 0.9;
}



.achievement-section {
    background: rgba(255,255,255,0.05);
    border-radius: 15px;
    padding: 1.5rem;
    border: 1px solid rgba(255,255,255,0.1);
}

.achievement-badges .badge {
    margin: 0.25rem;
    padding: 0.75rem 1rem;
    font-size: 0.9rem;
    border-radius: 20px;
    transition: all 0.3s ease;
}

.achievement-badges .badge:hover {
    transform: scale(1.05);
    box-shadow: 0 5px 15px rgba(0,0,0,0.3);
}

.bg-gold { 
    background: linear-gradient(135deg, #FFD700, #FFA500) !important; 
    color: #000 !important;
}

.bg-silver { 
    background: linear-gradient(135deg, #C0C0C0, #A9A9A9) !important; 
    color: #000 !important;
}

.bg-bronze { 
    background: linear-gradient(135deg, #CD7F32, #B8860B) !important; 
    color: #fff !important;
}

.bg-purple { 
    background: linear-gradient(135deg, #9B59B6, #8E44AD) !important; 
    color: #fff !important;
}

.bg-success { 
    background: linear-gradient(135deg, #28a745, #20c997) !important; 
    color: #fff !important;
}

.quick-actions .btn {
    border-radius: 10px;
    padding: 0.75rem 1rem;
    transition: all 0.3s ease;
    font-weight: 600;
}

.quick-actions .btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(0,0,0,0.3);
}

.btn-outline-warning {
    border-color: #ffc107;
    color: #ffc107;
}

.btn-outline-warning:hover {
    background: linear-gradient(135deg, #ffc107, #ffca2c);
    border-color: #ffc107;
    color: #000;
}

.btn-outline-info {
    border-color: #17a2b8;
    color: #17a2b8;
}

.btn-outline-info:hover {
    background: linear-gradient(135deg, #17a2b8, #138496);
    border-color: #17a2b8;
    color: #fff;
}

/* Responsive */
@@media (max-width: 768px) {
    .card-body {
        padding: 1rem;
    }
    
    .stat-card {
        padding: 1rem;
        margin-bottom: 0.5rem;
    }
    
    .stat-card h4 {
        font-size: 1.5rem;
    }
    
    .achievement-section {
        padding: 1rem;
    }
    
    .achievement-badges .badge {
        padding: 0.5rem 0.75rem;
        font-size: 0.8rem;
        margin: 0.2rem;
    }
    
    .quick-actions .btn {
        padding: 0.5rem 0.75rem;
        font-size: 0.9rem;
        margin-bottom: 0.5rem;
    }
    
    .btn-group {
        flex-direction: column;
    }
    
    .btn-group .btn {
        margin: 2px 0;
    }
    
    .table-responsive {
        font-size: 0.9rem;
    }
    
    .pagination {
        gap: 0.25rem;
    }
    
    .page-link {
        padding: 0.5rem 0.75rem;
        min-width: 40px;
        height: 40px;
        font-size: 0.85rem;
    }
    
    .page-item.disabled .page-link:not(.page-link[data-page]) {
        padding: 0.25rem;
        font-size: 1rem;
    }
}

@@media (max-width: 480px) {
    .stat-card {
        padding: 0.75rem;
    }
    
    .stat-card h4 {
        font-size: 1.25rem;
    }
    
    .stat-card i {
        font-size: 1.5rem !important;
    }
    
    .achievement-section {
        padding: 0.75rem;
    }
    
    .achievement-badges .badge {
        padding: 0.4rem 0.6rem;
        font-size: 0.75rem;
        margin: 0.1rem;
    }
    
    .pagination {
        gap: 0.2rem;
    }
    
    .page-link {
        padding: 0.4rem 0.6rem;
        min-width: 35px;
        height: 35px;
        font-size: 0.8rem;
    }
    
    .page-item.disabled .page-link:not(.page-link[data-page]) {
        padding: 0.2rem;
        font-size: 0.9rem;
    }
}
</style>

