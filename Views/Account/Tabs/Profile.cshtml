@model MovieTheater.ViewModels.ProfilePageViewModel
@{
    ViewData["Title"] = "Profile";
    var profile = Model.Profile;
    var rank = Model.RankInfo;
    var isMaxRank = Model.AllRanks?.OrderByDescending(r => r.RequiredPointsForCurrentRank).FirstOrDefault()?.CurrentRankId == rank.CurrentRankId;
    var progressPercentage = isMaxRank ? 100 : Math.Max(0, Math.Min(100, (double)(rank.TotalPoints - rank.RequiredPointsForCurrentRank) / (rank.RequiredPointsForNextRank - rank.RequiredPointsForCurrentRank) * 100));
}

<link rel="stylesheet" href="~/css/profile-page.css" asp-append-version="true" />

<div class="cinema-app">
    <!-- Theater Header -->
    <div class="theater-header" style="background: @(rank.ColorGradient ?? "linear-gradient(135deg, #1a1a1a 0%, var(--cinema-dark) 100%)");">
        <div class="screen-glow"></div>
        <div class="profile-spotlight">
            <div class="avatar-theater">
                <div class="spotlight-ring"></div>
                <img src="@(profile.Image ?? "/image/profile.jpg")" alt="Profile" id="profileAvatar" class="avatar-image">
                <label for="avatarUpload" class="camera-action">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"></path>
                        <circle cx="12" cy="13" r="4"></circle>
                    </svg>
                </label>
                <form asp-controller="MyAccount" asp-action="UpdateImage" method="post" enctype="multipart/form-data" id="avatarForm" style="display: none;">
                    <input type="file" id="avatarUpload" name="Profile.ImageFile" accept="image/*" hidden>
                </form>
            </div>

                         <div class="profile-marquee">
                 <h1 class="name-display">@profile.FullName</h1>
                 <div class="tier-badge @rank.CurrentRankName.ToLower()" onclick="showRankDetails()" style="cursor: pointer; background: @(rank.ColorGradient ?? "linear-gradient(45deg, var(--cinema-gold), var(--cinema-accent))");">
                     <span class="tier-icon">
                         @if (!string.IsNullOrEmpty(rank.IconClass))
                         {
                             <i class="@rank.IconClass"></i>
                         }
                         else
                         {
                             <span>★</span>
                         }
                     </span>
                     <span class="tier-name">@rank.CurrentRankName Member</span>
                     <span class="tier-info-icon">ℹ️</span>
            </div>
        </div>

            <div class="cinema-stats">
                <div class="stat-reel">
                    <div class="stat-frame">
                        <div class="stat-number">@rank.CurrentScore</div>
                        <div class="stat-label">Current Points</div>
                    </div>
                    <div class="stat-frame">
                        <div class="stat-number">@rank.TotalPoints</div>
                        <div class="stat-label">Total Points</div>
                </div>
                </div>
            </div>
        </div>

        <!-- Progress Theater -->
        <div class="progress-theater">
            <div class="film-strip">
                <div class="film-progress" style="width: @(progressPercentage)%; background: @(rank.ColorGradient ?? "linear-gradient(90deg, var(--cinema-gold), var(--cinema-accent))");"></div>
                <div class="film-holes">
                    <span></span><span></span><span></span><span></span><span></span>
                </div>
            </div>
            <div class="progress-info">
                @if (isMaxRank)
                {
                    <span class="progress-text">🎬 VIP Member - Maximum Level Achieved</span>
                }
                else
                {
                    <span class="progress-text">@(rank.RequiredPointsForNextRank - rank.TotalPoints) points to unlock @rank.NextRankName</span>
                }
            </div>
        </div>
    </div>

    <!-- Main Theater Content -->
    <div class="theater-main">
        <!-- Left Wing - Profile Form -->
        <div class="theater-wing left-wing">
            <div class="wing-header">
                <h2>🎭 Personal Details</h2>
                <div class="header-line"></div>
            </div>

            <form asp-controller="MyAccount" asp-action="EditProfile" method="post" class="cinema-form">
                <div class="form-row">
                    <div class="input-cinema">
                    <input asp-for="Profile.FullName" placeholder=" " required>
                    <label asp-for="Profile.FullName">Full Name</label>
                        <div class="input-glow"></div>
                    </div>

                    <div class="input-cinema">
                        <input asp-for="Profile.DateOfBirth" type="date" placeholder=" ">
                        <label asp-for="Profile.DateOfBirth">Date of Birth</label>
                        <div class="input-glow"></div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="input-cinema">
                        <input asp-for="Profile.Email" placeholder=" " readonly>
                        <label asp-for="Profile.Email">Email Address</label>
                        <div class="input-glow"></div>
                    </div>

                    <div class="input-cinema">
                        <input asp-for="Profile.PhoneNumber" placeholder=" ">
                        <label asp-for="Profile.PhoneNumber">Phone Number</label>
                        <div class="input-glow"></div>
                    </div>
                </div>

                <div class="gender-selector">
                    <span class="selector-label">Gender</span>
                    <div class="gender-options">
                        <label class="gender-option">
                            <input type="radio" asp-for="Profile.Gender" value="male">
                            <span class="option-button">Male</span>
                        </label>
                        <label class="gender-option">
                            <input type="radio" asp-for="Profile.Gender" value="female">
                            <span class="option-button">Female</span>
                        </label>
                        <label class="gender-option">
                            <input type="radio" asp-for="Profile.Gender" value="other">
                            <span class="option-button">Other</span>
                        </label>
                    </div>
                </div>

                <div class="input-cinema full-width">
                    <input asp-for="Profile.Address" placeholder=" ">
                    <label asp-for="Profile.Address">Address</label>
                    <div class="input-glow"></div>
                </div>

                <div class="input-cinema full-width">
                    <input asp-for="Profile.IdentityCard" placeholder=" ">
                    <label asp-for="Profile.IdentityCard">Identity Number</label>
                    <div class="input-glow"></div>
                </div>

                <div class="form-actions">
                    @if (!profile.IsGoogleAccount)
                    {
                        <a href="@Url.Action("ChangePassword", "MyAccount")" class="cinema-btn secondary">🔐 Change Password</a>
                    }
                    <button type="submit" class="cinema-btn primary">💾 Save Changes</button>
                </div>
            </form>
        </div>

        <!-- Right Wing - Booking History -->
        <div class="theater-wing right-wing">
            <div class="wing-header">
                <h2>🎟️ Booking History</h2>
                <div class="header-line"></div>
                </div>

            <div class="ticket-filters">
                <button class="filter-ticket active" data-filter="all">All Tickets</button>
                <button class="filter-ticket" data-filter="booked">Active</button>
                <button class="filter-ticket" data-filter="canceled">Canceled</button>
            </div>

            <div class="tickets-showcase" id="ticketsShowcase">
                <div class="loading-reel">
                    <div class="film-loading"></div>
                    <p>Loading your cinema history...</p>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Avatar Upload with Cinema Effect
    document.getElementById('avatarUpload').addEventListener('change', function (e) {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                showAvatarEditModal(e.target.result);
            };
            reader.readAsDataURL(file);
        }
    });

    // Avatar Edit Modal Functions
    let currentZoom = 1;
    let currentRotation = 0;
    let originalImageData = null;

    function showAvatarEditModal(imageSrc) {
        originalImageData = imageSrc;
        currentZoom = 1;
        currentRotation = 0;
        
        const modal = document.getElementById('avatarEditModal');
        const imagePreview = document.getElementById('avatarImagePreview');
        const zoomSlider = document.getElementById('zoomSlider');
        
        imagePreview.src = imageSrc;
        imagePreview.style.transform = `scale(${currentZoom}) rotate(${currentRotation}deg)`;
        zoomSlider.value = 50; // Reset zoom slider to middle
        
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
    }

    function closeAvatarModal() {
        const modal = document.getElementById('avatarEditModal');
        modal.style.display = 'none';
        document.body.style.overflow = 'auto';
    }

    function updateZoom(value) {
        currentZoom = 0.5 + (value / 100) * 1.5; // Range from 0.5 to 2.0
        const imagePreview = document.getElementById('avatarImagePreview');
        imagePreview.style.transform = `scale(${currentZoom}) rotate(${currentRotation}deg)`;
    }

    function zoomIn() {
        const zoomSlider = document.getElementById('zoomSlider');
        const newValue = Math.min(100, parseInt(zoomSlider.value) + 10);
        zoomSlider.value = newValue;
        updateZoom(newValue);
    }

    function zoomOut() {
        const zoomSlider = document.getElementById('zoomSlider');
        const newValue = Math.max(0, parseInt(zoomSlider.value) - 10);
        zoomSlider.value = newValue;
        updateZoom(newValue);
    }

    function rotateImage() {
        currentRotation += 90;
        const imagePreview = document.getElementById('avatarImagePreview');
        imagePreview.style.transform = `scale(${currentZoom}) rotate(${currentRotation}deg)`;
    }

    function resetAvatar() {
        currentZoom = 1;
        currentRotation = 0;
        const imagePreview = document.getElementById('avatarImagePreview');
        const zoomSlider = document.getElementById('zoomSlider');
        
        imagePreview.style.transform = `scale(${currentZoom}) rotate(${currentRotation}deg)`;
        zoomSlider.value = 50;
    }

    function applyAvatar() {
        const imagePreview = document.getElementById('avatarImagePreview');
        const avatar = document.getElementById('profileAvatar');
        
        // Create a canvas to apply transformations
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        const size = 200; // Avatar size
        
        canvas.width = size;
        canvas.height = size;
        
        // Create a temporary image to get the transformed result
        const tempImg = new Image();
        tempImg.onload = function() {
            // Clear canvas
            ctx.clearRect(0, 0, size, size);
            
            // Apply transformations
            ctx.save();
            ctx.translate(size/2, size/2);
            ctx.rotate(currentRotation * Math.PI / 180);
            ctx.scale(currentZoom, currentZoom);
            
            // Draw the image centered
            const imgSize = Math.min(tempImg.width, tempImg.height);
            const offsetX = (tempImg.width - imgSize) / 2;
            const offsetY = (tempImg.height - imgSize) / 2;
            
            ctx.drawImage(tempImg, offsetX, offsetY, imgSize, imgSize, -size/2, -size/2, size, size);
            ctx.restore();
            
            // Convert to blob and update form
            canvas.toBlob(function(blob) {
                const file = new File([blob], 'avatar.jpg', { type: 'image/jpeg' });
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                
                const fileInput = document.getElementById('avatarUpload');
                fileInput.files = dataTransfer.files;
                
                // Update avatar preview with animation
                avatar.style.transform = 'scale(0.8)';
                setTimeout(() => {
                    avatar.src = URL.createObjectURL(blob);
                    avatar.style.transform = 'scale(1)';
                }, 200);
                
                // Submit form
                setTimeout(() => {
                    const avatarForm = document.getElementById('avatarForm');
                    if (avatarForm) {
                        avatarForm.submit();
                    }
                }, 500);
                
                closeAvatarModal();
            }, 'image/jpeg', 0.9);
        };
        tempImg.src = originalImageData;
    }

    // Filter Tickets
    document.querySelectorAll('.filter-ticket').forEach(filter => {
        filter.addEventListener('click', function () {
            document.querySelectorAll('.filter-ticket').forEach(f => f.classList.remove('active'));
            this.classList.add('active');
            loadTickets(this.dataset.filter, 1);
        });
    });

    // Pagination variables
    let currentPage = 1;
    const itemsPerPage = 5;
    let allTickets = [];
    let currentFilter = 'all';

    // Load Tickets Function
    function loadTickets(filter, page = 1) {
        const showcase = document.getElementById('ticketsShowcase');
        currentFilter = filter;
        currentPage = page;
        
        showcase.innerHTML = '<div class="loading-reel"><div class="film-loading"></div><p>Loading tickets...</p></div>';

        // Map filter values to API status
        const statusMap = {
            'all': 'all',
            'booked': 'booked',
            'canceled': 'canceled'
        };

        fetch(`/Ticket/HistoryPartial?status=${statusMap[filter]}`)
            .then(response => response.json())
            .then(data => {
                if (data.success && data.data && data.data.length > 0) {
                    allTickets = data.data;
                    renderTickets();
                } else {
                    showcase.innerHTML = '<div class="empty-theater"><div class="empty-seats">🎬</div><p>No tickets found</p></div>';
                }
            })
            .catch(error => {
                console.error('Error loading tickets:', error);
                showcase.innerHTML = '<div class="empty-theater"><div class="empty-seats">❌</div><p>Error loading tickets</p></div>';
            });
    }

    // Render tickets with pagination
    function renderTickets() {
        const showcase = document.getElementById('ticketsShowcase');
        const startIndex = (currentPage - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        const currentTickets = allTickets.slice(startIndex, endIndex);

        if (currentTickets.length === 0) {
            showcase.innerHTML = '<div class="empty-theater"><div class="empty-seats">🎬</div><p>No tickets found</p></div>';
                return;
            }

        const ticketsHtml = currentTickets.map(ticket => {
            const movieName = ticket.movieShow?.movie?.movieNameEnglish || 'Unknown Movie';
            const showDate = ticket.movieShow?.showDate ? new Date(ticket.movieShow.showDate).toLocaleDateString('en-GB') : 'N/A';
            const showTime = ticket.movieShow?.schedule?.scheduleTime || 'N/A';
            const seats = ticket.seat || 'N/A';
            const status = ticket.cancel ? 'canceled' : 'booked';
            const amount = ticket.totalMoney ? new Intl.NumberFormat('en-US').format(ticket.totalMoney) + ' VND' : 'N/A';
            const invoiceId = ticket.invoiceId || ticket.id;
            // Get movie poster with fallback logic
            let moviePoster = ticket.movieShow?.movie?.image;
            console.log('Movie poster path:', moviePoster, 'for movie:', movieName);
            if (!moviePoster || moviePoster === '') {
                // Fallback to a real movie poster based on movie name
                const movieNameLower = movieName.toLowerCase();
                if (movieNameLower.includes('oppenheimer') || movieNameLower.includes('open')) {
                    moviePoster = '/image/open.jpg';
                } else if (movieNameLower.includes('barbie')) {
                    moviePoster = '/image/barbie.jpg';
                } else if (movieNameLower.includes('batman')) {
                    moviePoster = '/image/batman.jpg';
                } else if (movieNameLower.includes('spider')) {
                    moviePoster = '/image/spider.jpg';
                } else if (movieNameLower.includes('dune')) {
                    moviePoster = '/image/dune.jpg';
                } else if (movieNameLower.includes('parasite')) {
                    moviePoster = '/image/parasite.jpg';
                } else if (movieNameLower.includes('everything')) {
                    moviePoster = '/image/everything.jpg';
                } else if (movieNameLower.includes('topgun') || movieNameLower.includes('top gun')) {
                    moviePoster = '/image/topgun.jpg';
                } else {
                    moviePoster = '/image/default-movie.png';
                }
                console.log('Using fallback poster:', moviePoster);
            }

            return `
                <div class="movie-ticket ${status}">
                    <div class="ticket-stub">
                        <img src="${moviePoster}" alt="${movieName}" class="movie-poster" 
                             onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" 
                             onload="this.style.display='block'; this.nextElementSibling.style.display='none';">
                        <div class="movie-poster-placeholder">🎬</div>
                    </div>
                    <div class="ticket-main">
                        <div class="ticket-header">
                            <h3 class="movie-title">${movieName}</h3>
                            <span class="ticket-status ${status}">${status === 'booked' ? '✓' : '✗'}</span>
                        </div>
                        <div class="ticket-details">
                            <div class="detail-item">
                                <span class="detail-icon">📅</span>
                                <span>${showDate}</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-icon">🕐</span>
                                <span>${showTime}</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-icon">🪑</span>
                                <span>${seats}</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-icon">💰</span>
                                <span>${amount}</span>
                            </div>
                        </div>
                        <div class="ticket-actions">
                            <a href="/Ticket/Details/${invoiceId}" class="cinema-btn secondary" style="font-size: 0.8rem; padding: 0.5rem 1rem;">
                                🎫 View Details
                            </a>
                        </div>
                    </div>
                    <div class="ticket-perforation"></div>
                </div>
            `;
        }).join('');

        // Add pagination
        const totalPages = Math.ceil(allTickets.length / itemsPerPage);
        const paginationHtml = renderPagination(totalPages);

        showcase.innerHTML = ticketsHtml + paginationHtml;
    }

    // Render pagination controls
    function renderPagination(totalPages) {
        if (totalPages <= 1) return '';

        let paginationHtml = '<div class="ticket-pagination">';

        // Previous button
        if (currentPage > 1) {
            paginationHtml += `<button class="cinema-btn secondary" onclick="loadTickets('${currentFilter}', ${currentPage - 1})">← Previous</button>`;
        }

        // Page numbers with smart display
        const maxVisiblePages = 5;
        let startPage = 1;
        let endPage = totalPages;

        if (totalPages > maxVisiblePages) {
            if (currentPage <= 3) {
                endPage = maxVisiblePages;
            } else if (currentPage >= totalPages - 2) {
                startPage = totalPages - maxVisiblePages + 1;
            } else {
                startPage = currentPage - 2;
                endPage = currentPage + 2;
            }
        }

        // Add first page and ellipsis if needed
        if (startPage > 1) {
            paginationHtml += `<button class="cinema-btn secondary" onclick="loadTickets('${currentFilter}', 1)">1</button>`;
            if (startPage > 2) {
                paginationHtml += `<span class="pagination-ellipsis">...</span>`;
            }
        }

        // Page numbers
        for (let i = startPage; i <= endPage; i++) {
            if (i === currentPage) {
                paginationHtml += `<button class="cinema-btn primary" disabled>${i}</button>`;
            } else {
                paginationHtml += `<button class="cinema-btn secondary" onclick="loadTickets('${currentFilter}', ${i})">${i}</button>`;
            }
        }

        // Add last page and ellipsis if needed
        if (endPage < totalPages) {
            if (endPage < totalPages - 1) {
                paginationHtml += `<span class="pagination-ellipsis">...</span>`;
            }
            paginationHtml += `<button class="cinema-btn secondary" onclick="loadTickets('${currentFilter}', ${totalPages})">${totalPages}</button>`;
        }

        // Next button
        if (currentPage < totalPages) {
            paginationHtml += `<button class="cinema-btn secondary" onclick="loadTickets('${currentFilter}', ${currentPage + 1})">Next →</button>`;
        }

        paginationHtml += '</div>';
        return paginationHtml;
    }

    // Initialize
    loadTickets('all');

    // Add some cinema ambiance
    document.addEventListener('DOMContentLoaded', function () {
        // Spotlight animation
        const spotlight = document.querySelector('.spotlight-ring');
        if (spotlight) {
            setInterval(() => {
                spotlight.style.transform = 'scale(1.1)';
                setTimeout(() => {
                    spotlight.style.transform = 'scale(1)';
                }, 1000);
            }, 3000);
        }
    });

    // Rank Details Modal Functions
    let currentRankSlide = 0;
    const totalRankSlides = @(Model.AllRanks?.Count ?? 0);

    function showRankDetails() {
        const modal = document.getElementById('rankDetailsModal');
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
    }

    function closeRankDetails() {
        const modal = document.getElementById('rankDetailsModal');
        modal.style.display = 'none';
        document.body.style.overflow = 'auto';
    }

    function showRankSlide(slideIndex) {
        const slides = document.querySelectorAll('.rank-slide');
        const indicators = document.querySelectorAll('.rank-indicator');
        
        slides.forEach(slide => slide.classList.remove('active'));
        indicators.forEach(indicator => indicator.classList.remove('active'));
        
        slides[slideIndex].classList.add('active');
        indicators[slideIndex].classList.add('active');
        currentRankSlide = slideIndex;
    }

    function nextRankSlide() {
        const nextSlide = (currentRankSlide + 1) % totalRankSlides;
        showRankSlide(nextSlide);
    }

    function prevRankSlide() {
        const prevSlide = (currentRankSlide - 1 + totalRankSlides) % totalRankSlides;
        showRankSlide(prevSlide);
    }

    // Close modal when clicking outside
    document.addEventListener('click', function(e) {
        const rankModal = document.getElementById('rankDetailsModal');
        const avatarModal = document.getElementById('avatarEditModal');
        if (e.target === rankModal) {
            closeRankDetails();
        }
        if (e.target === avatarModal) {
            closeAvatarModal();
        }
    });
</script>

<!-- Avatar Edit Modal -->
<div class="avatar-edit-modal" id="avatarEditModal">
    <div class="avatar-edit-content">
        <div class="avatar-edit-header">
            <h3>Edit Image</h3>
            <button class="avatar-edit-close" onclick="closeAvatarModal()">×</button>
        </div>
        <div class="avatar-edit-body">
            <div class="avatar-preview-container">
                <div class="avatar-preview-frame">
                    <img id="avatarImagePreview" class="avatar-preview-image" alt="Avatar Preview">
                </div>
            </div>
            <div class="avatar-controls">
                <div class="zoom-control">
                    <div class="zoom-icons">
                        <span class="zoom-icon">🖼️</span>
                        <span class="zoom-icon">🖼️</span>
                    </div>
                    <input type="range" id="zoomSlider" min="0" max="100" value="50" oninput="updateZoom(this.value)" class="zoom-slider">
                </div>
                <div class="rotate-control">
                    <button class="rotate-btn" onclick="rotateImage()">
                        <span class="rotate-icon">🔄</span>
                    </button>
                </div>
            </div>
        </div>
        <div class="avatar-edit-actions">
            <button class="avatar-btn secondary" onclick="resetAvatar()">Reset</button>
            <button class="avatar-btn secondary" onclick="closeAvatarModal()">Cancel</button>
            <button class="avatar-btn primary" onclick="applyAvatar()">Apply</button>
        </div>
    </div>
</div>

<!-- Rank Details Modal -->
<div class="rank-modal" id="rankDetailsModal">
    <div class="rank-modal-content">
        <div class="rank-modal-header">
            <h3>🎭 Rank Tiers & Benefits</h3>
            <button class="rank-modal-close" onclick="closeRankDetails()">×</button>
        </div>
        <div class="rank-modal-body">
            @if (Model.AllRanks != null && Model.AllRanks.Any())
            {
                var sortedRanks = Model.AllRanks.OrderBy(r => r.RequiredPointsForCurrentRank).ToList();
                var currentUserScore = Model.RankInfo.TotalPoints;
                var currentUserRankId = Model.RankInfo.CurrentRankId;

                <div class="rank-carousel" id="rankCarousel">
                    <div class="rank-indicators">
                        @for (int i = 0; i < sortedRanks.Count; i++)
                        {
                            var rankDetail = sortedRanks[i];
                            var activeClass = rankDetail.CurrentRankId == currentUserRankId ? "active" : "";
                            <button class="rank-indicator @activeClass" onclick="showRankSlide(@i)"></button>
                        }
                    </div>
                    <div class="rank-slides">
                        @for (int i = 0; i < sortedRanks.Count; i++)
                        {
                            var rankDetail = sortedRanks[i];
                            var rankGradient = rankDetail.ColorGradient ?? "linear-gradient(135deg, #4e54c8 0%, #6c63ff 50%, #8f94fb 100%)";
                            var rankIcon = rankDetail.IconClass ?? "fas fa-crown";
                            var rankStatus = rankDetail.CurrentRankId == currentUserRankId ? "Current Rank" : (currentUserScore >= rankDetail.RequiredPointsForCurrentRank ? "Achieved" : "Not Reached");
                            var activeClass = rankDetail.CurrentRankId == currentUserRankId ? "active" : "";
                            var prevRankPoints = i > 0 ? sortedRanks[i - 1].RequiredPointsForCurrentRank : 0;
                            var targetRankPoints = rankDetail.RequiredPointsForCurrentRank;
                            var pointsForThisTier = targetRankPoints - prevRankPoints;
                            double rankProgressPercentage;
                            if (currentUserScore >= targetRankPoints)
                            {
                                rankProgressPercentage = 100;
                            }
                            else if (currentUserScore < prevRankPoints)
                            {
                                rankProgressPercentage = 0;
                            }
                            else
                            {
                                var progressRaw = currentUserScore - prevRankPoints;
                                rankProgressPercentage = (pointsForThisTier > 0)
                                ? Math.Min(100, (double)progressRaw / pointsForThisTier * 100)
                                : 100;
                            }
                            <div class="rank-slide @activeClass" data-slide="@i">
                                <div class="rank-card" style="--rank-gradient: @rankGradient; border-color: @(rankDetail.ColorGradient != null ? "transparent" : "var(--cinema-border)");">
                                                                            <div class="rank-card-header">
                                            <div class="rank-icon-wrapper" style="background: @rankGradient;">
                                                <i class="@rankIcon"></i>
                                            </div>
                                        <div class="rank-info">
                                            <span class="rank-title">@rankDetail.CurrentRankName Rank</span>
                                            <span class="rank-status @rankStatus.ToLower().Replace(" ", "-")">@rankStatus</span>
                                        </div>
                                    </div>
                                    <div class="rank-card-body">
                                        <div class="rank-progress-wrapper">
                                            <div class="rank-progress">
                                                <div class="rank-progress-bar" style="width: @rankProgressPercentage.ToString("0.##")%; background: @rankGradient;"></div>
                                            </div>
                                            <div class="rank-points">
                                                <span>@prevRankPoints.ToString("N0") pts</span>
                                                <span>@targetRankPoints.ToString("N0") pts</span>
                                            </div>
                                        </div>
                                        <div class="benefits-section">
                                            <div class="benefits-header">
                                                <span class="benefits-icon">🎁</span>
                                                <span>Benefits:</span>
                                            </div>
                                            <div class="benefits-content">
                                                <div class="benefit-item">
                                                    <span class="benefit-icon">🎫</span>
                                                    <div class="benefit-text">
                                                        <span class="benefit-label">Discount on Tickets</span>
                                                        <span class="benefit-value">@rankDetail.CurrentDiscountPercentage.ToString("0.00")%</span>
                                                    </div>
                                                </div>
                                                <div class="benefit-item">
                                                    <span class="benefit-icon">💰</span>
                                                    <div class="benefit-text">
                                                        <span class="benefit-label">Point Earning Rate</span>
                                                        <span class="benefit-value">@rankDetail.CurrentPointEarningPercentage.ToString("0.00")%</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="auto-upgrade">
                                            <span class="upgrade-icon">⚡</span>
                                            Auto-upgrade at @targetRankPoints.ToString("N0") pts
                    </div>
                </div>
                    </div>
                    </div>
                        }
                    </div>
                    <div class="rank-navigation">
                        <button class="rank-nav-btn" onclick="prevRankSlide()">←</button>
                        <button class="rank-nav-btn" onclick="nextRankSlide()">→</button>
                    </div>
                </div>
            }
            else
            {
                <div class="no-ranks">No rank information available.</div>
            }
        </div>
    </div>
</div>
