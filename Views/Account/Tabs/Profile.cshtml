@model MovieTheater.ViewModels.ProfilePageViewModel
@{
    ViewData["Title"] = "Profile";
    var profile = Model.Profile;
    var rank = Model.RankInfo;
    var isMaxRank = Model.AllRanks?.OrderByDescending(r => r.RequiredPointsForCurrentRank).FirstOrDefault()?.CurrentRankId == rank.CurrentRankId;
    var progressPercentage = isMaxRank ? 100 : Math.Max(0, Math.Min(100, (double)(rank.TotalPoints - rank.RequiredPointsForCurrentRank) / (rank.RequiredPointsForNextRank - rank.RequiredPointsForCurrentRank) * 100));
}

<link rel="stylesheet" href="~/css/profile-page.css" asp-append-version="true" />

<div class="cinema-app">
    <!-- Theater Header -->
    <div class="theater-header" style="background: @(rank.ColorGradient ?? "linear-gradient(135deg, #1a1a1a 0%, var(--cinema-dark) 100%)");">
        <div class="screen-glow"></div>
        <div class="profile-spotlight">
            <div class="avatar-theater">
                <div class="spotlight-ring"></div>
                <img src="@(profile.Image ?? "/image/profile.jpg")" alt="Profile" id="profileAvatar" class="avatar-image">
                <label for="avatarUpload" class="camera-action">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"></path>
                        <circle cx="12" cy="13" r="4"></circle>
                    </svg>
                </label>
                <form asp-controller="MyAccount" asp-action="UpdateImage" method="post" enctype="multipart/form-data" id="avatarForm" style="display: none;">
                    <input type="file" id="avatarUpload" name="Profile.ImageFile" accept="image/*" hidden>
                </form>
            </div>

            <div class="profile-marquee">
                <h1 class="name-display">@profile.FullName</h1>
                <div class="tier-badge @rank.CurrentRankName.ToLower()" onclick="showRankDetails()" style="cursor: pointer; background: @(rank.ColorGradient ?? "linear-gradient(45deg, var(--cinema-gold), var(--cinema-accent))");">
                    <span class="tier-icon">
                        @if (!string.IsNullOrEmpty(rank.IconClass))
                        {
                            <i class="@rank.IconClass"></i>
                        }
                        else
                        {
                            <span>‚òÖ</span>
                        }
                    </span>
                    <span class="tier-name">@rank.CurrentRankName Member</span>
                    <span class="tier-info-icon">‚ÑπÔ∏è</span>
                </div>
            </div>

            <div class="cinema-stats">
                <div class="stat-reel">
                    <div class="stat-frame">
                        <div class="stat-number">@rank.CurrentScore</div>
                        <div class="stat-label">Current Points</div>
                    </div>
                    <div class="stat-frame">
                        <div class="stat-number">@rank.TotalPoints</div>
                        <div class="stat-label">Total Points</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Progress Theater -->
        <div class="progress-theater">
            <div class="film-strip">
                <div class="film-progress" style="width: @(progressPercentage)%; background: @(rank.ColorGradient ?? "linear-gradient(90deg, var(--cinema-gold), var(--cinema-accent))");"></div>
                <div class="film-holes">
                    <span></span><span></span><span></span><span></span><span></span>
                </div>
            </div>
            <div class="progress-info">
                @if (isMaxRank)
                {
                    <span class="progress-text">üé¨ VIP Member - Maximum Level Achieved</span>
                }
                else
                {
                    <span class="progress-text">@(rank.RequiredPointsForNextRank - rank.TotalPoints) points to unlock @rank.NextRankName</span>
                }
            </div>
        </div>
    </div>

    <!-- Main Theater Content -->
    <div class="theater-main">
        <!-- Left Wing - Profile Form -->
        <div class="theater-wing left-wing">
            <div class="wing-header">
                <h2>üé≠ Personal Details</h2>
                <div class="header-line"></div>
            </div>

            <form asp-controller="MyAccount" asp-action="EditProfile" method="post" class="cinema-form">
                <div class="form-row">
                    <div class="input-cinema">
                        <input asp-for="Profile.FullName" placeholder=" " required>
                        <label asp-for="Profile.FullName">Full Name</label>
                        <div class="input-glow"></div>
                    </div>

                    <div class="input-cinema">
                        <input asp-for="Profile.DateOfBirth" type="date" placeholder=" ">
                        <label asp-for="Profile.DateOfBirth">Date of Birth</label>
                        <div class="input-glow"></div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="input-cinema">
                        <input asp-for="Profile.Email" placeholder=" " readonly>
                        <label asp-for="Profile.Email">Email Address</label>
                        <div class="input-glow"></div>
                    </div>

                    <div class="input-cinema">
                        <input asp-for="Profile.PhoneNumber" placeholder=" ">
                        <label asp-for="Profile.PhoneNumber">Phone Number</label>
                        <div class="input-glow"></div>
                    </div>
                </div>

                <div class="gender-selector">
                    <span class="selector-label">Gender</span>
                    <div class="gender-options">
                        <label class="gender-option">
                            <input type="radio" asp-for="Profile.Gender" value="male">
                            <span class="option-button">Male</span>
                        </label>
                        <label class="gender-option">
                            <input type="radio" asp-for="Profile.Gender" value="female">
                            <span class="option-button">Female</span>
                        </label>
                        <label class="gender-option">
                            <input type="radio" asp-for="Profile.Gender" value="other">
                            <span class="option-button">Other</span>
                        </label>
                    </div>
                </div>

                <div class="input-cinema full-width">
                    <input asp-for="Profile.Address" placeholder=" ">
                    <label asp-for="Profile.Address">Address</label>
                    <div class="input-glow"></div>
                </div>

                <div class="input-cinema full-width">
                    <input asp-for="Profile.IdentityCard" placeholder=" ">
                    <label asp-for="Profile.IdentityCard">Identity Number</label>
                    <div class="input-glow"></div>
                </div>

                <div class="form-actions">
                    @if (!profile.IsGoogleAccount)
                    {
                        <a href="@Url.Action("ChangePassword", "MyAccount")" class="cinema-btn secondary">üîê Change Password</a>
                    }
                    <button type="submit" class="cinema-btn primary">üíæ Save Changes</button>
                </div>
            </form>
        </div>

        <!-- Right Wing - Booking History -->
        <div class="theater-wing right-wing">
            <div class="wing-header">
                <h2>üéüÔ∏è Booking History</h2>
                <div class="header-line"></div>
            </div>

            <div class="ticket-filters">
                <button class="filter-ticket active" data-filter="all">All Tickets</button>
                <button class="filter-ticket" data-filter="booked">Active</button>
                <button class="filter-ticket" data-filter="canceled">Canceled</button>
            </div>

            <div class="tickets-showcase" id="ticketsShowcase">
                <div class="loading-reel">
                    <div class="film-loading"></div>
                    <p>Loading your cinema history...</p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Rank Details Modal -->
<div class="rank-modal" id="rankDetailsModal" style="display:none;">
    <div class="rank-modal-content">
        <div class="rank-modal-header">
            <h3>üé≠ Rank Tiers & Benefits</h3>
            <button class="rank-modal-close" onclick="closeRankDetails()">√ó</button>
        </div>
        <div class="rank-modal-body">
            @if (Model.AllRanks != null && Model.AllRanks.Any())
            {
                var sortedRanks = Model.AllRanks.OrderBy(r => r.RequiredPointsForCurrentRank).ToList();
                var currentUserScore = Model.RankInfo.TotalPoints;
                var currentUserRankId = Model.RankInfo.CurrentRankId;
            <div class="rank-carousel" id="rankCarousel">
                <div class="rank-indicators">
                    @for (int i = 0; i < sortedRanks.Count; i++)
                    {
                        var rankDetail = sortedRanks[i];
                        var activeClass = rankDetail.CurrentRankId == currentUserRankId ? "active" : "";
                        <button class="rank-indicator @activeClass" onclick="showRankSlide(@i)"></button>
                    }
                </div>
                <div class="rank-slides">
                    @for (int i = 0; i < sortedRanks.Count; i++)
                    {
                        var rankDetail = sortedRanks[i];
                        var rankGradient = rankDetail.ColorGradient ?? "linear-gradient(135deg, #4e54c8 0%, #6c63ff 50%, #8f94fb 100%)";
                        var rankIcon = rankDetail.IconClass ?? "fas fa-crown";
                        var rankStatus = rankDetail.CurrentRankId == currentUserRankId ? "Current Rank" : (currentUserScore >= rankDetail.RequiredPointsForCurrentRank ? "Achieved" : "Not Reached");
                        var activeClass = rankDetail.CurrentRankId == currentUserRankId ? "active" : "";
                        var prevRankPoints = i > 0 ? sortedRanks[i - 1].RequiredPointsForCurrentRank : 0;
                        var targetRankPoints = rankDetail.RequiredPointsForCurrentRank;
                        var pointsForThisTier = targetRankPoints - prevRankPoints;
                        double rankProgressPercentage;
                        if (currentUserScore >= targetRankPoints)
                        {
                            rankProgressPercentage = 100;
                        }
                        else if (currentUserScore < prevRankPoints)
                        {
                            rankProgressPercentage = 0;
                        }
                        else
                        {
                            var progressRaw = currentUserScore - prevRankPoints;
                            rankProgressPercentage = (pointsForThisTier > 0)
                                ? Math.Min(100, (double)progressRaw / pointsForThisTier * 100)
                                : 100;
                        }
                    <div class="rank-slide @activeClass" data-slide="@i">
                        <div class="rank-card" style="--rank-gradient: @rankGradient;">
                            <div class="rank-card-header">
                                <div class="rank-icon-wrapper" style="background: @rankGradient;">
                                    <i class="@rankIcon"></i>
                                </div>
                                <div class="rank-info">
                                    <span class="rank-title">@rankDetail.CurrentRankName Rank</span>
                                    <span class="rank-status @rankStatus.ToLower().Replace(" ", "-")">@rankStatus</span>
                                </div>
                            </div>
                            <div class="rank-card-body">
                                <div class="rank-progress-wrapper">
                                    <div class="rank-progress">
                                        <div class="rank-progress-bar" style="width: @rankProgressPercentage.ToString("0.##")%; background: @rankGradient;"></div>
                                    </div>
                                    <div class="rank-points">
                                        <span>@prevRankPoints.ToString("N0") pts</span>
                                        <span>@targetRankPoints.ToString("N0") pts</span>
                                    </div>
                                </div>
                                <div class="benefits-section">
                                    <div class="benefits-header">
                                        <span class="benefits-icon">üéÅ</span>
                                        <span>Benefits:</span>
                                    </div>
                                    <div class="benefits-content">
                                        <div class="benefit-item">
                                            <span class="benefit-icon">üé´</span>
                                            <div class="benefit-text">
                                                <span class="benefit-label">Discount on Tickets</span>
                                                <span class="benefit-value">@rankDetail.CurrentDiscountPercentage.ToString("0.00")%</span>
                                            </div>
                                        </div>
                                        <div class="benefit-item">
                                            <span class="benefit-icon">üí∞</span>
                                            <div class="benefit-text">
                                                <span class="benefit-label">Point Earning Rate</span>
                                                <span class="benefit-value">@rankDetail.CurrentPointEarningPercentage.ToString("0.00")%</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="auto-upgrade">
                                    <span class="upgrade-icon">‚ö°</span>
                                    Auto-upgrade at @targetRankPoints.ToString("N0") pts
                                </div>
                            </div>
                        </div>
                    </div>
                    }
                </div>
                <div class="rank-navigation">
                    <button class="rank-nav-btn" onclick="prevRankSlide()">‚Üê</button>
                    <button class="rank-nav-btn" onclick="nextRankSlide()">‚Üí</button>
                </div>
            </div>
            }
            else
            {
                <div class="no-ranks">No rank information available.</div>
            }
        </div>
    </div>
</div>

<script>
    // Simple initialization function
    function initProfileTab() {
        // Load tickets immediately
        loadTickets('all');
        
        // Attach filter event listeners
        document.querySelectorAll('.filter-ticket').forEach(btn => {
            btn.addEventListener('click', function() {
                document.querySelectorAll('.filter-ticket').forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                loadTickets(this.dataset.filter, 1);
            });
        });
    }

    // Load tickets function
    function loadTickets(filter, page = 1) {
        const showcase = document.getElementById('ticketsShowcase');
        showcase.innerHTML = '<div class="loading-reel"><div class="film-loading"></div><p>Loading tickets...</p></div>';

        fetch(`/Ticket/HistoryPartial?status=${filter}`)
            .then(response => response.json())
            .then(data => {
                if (data.success && data.data && data.data.length > 0) {
                    renderTickets(data.data, page);
                } else {
                    showcase.innerHTML = '<div class="empty-theater"><div class="empty-seats">üé¨</div><p>No tickets found</p></div>';
                }
            })
            .catch(error => {
                console.error('Error loading tickets:', error);
                showcase.innerHTML = '<div class="empty-theater"><div class="empty-seats">‚ùå</div><p>Error loading tickets</p></div>';
            });
    }

    // Render tickets with pagination
    function renderTickets(tickets, page = 1) {
        const showcase = document.getElementById('ticketsShowcase');
        const itemsPerPage = 5;
        const startIndex = (page - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        const currentTickets = tickets.slice(startIndex, endIndex);
        const totalPages = Math.ceil(tickets.length / itemsPerPage);

        if (currentTickets.length === 0) {
            showcase.innerHTML = '<div class="empty-theater"><div class="empty-seats">üé¨</div><p>No tickets found</p></div>';
            return;
        }

        const ticketsHtml = currentTickets.map(ticket => {
            const movieName = ticket.movieShow?.movie?.movieNameEnglish || 'Unknown Movie';
            const showDate = ticket.movieShow?.showDate ? new Date(ticket.movieShow.showDate).toLocaleDateString('en-GB') : 'N/A';
            const showTime = ticket.movieShow?.schedule?.scheduleTime || 'N/A';
            const seats = ticket.seat || 'N/A';
            const status = ticket.cancel ? 'canceled' : 'booked';
            const amount = ticket.totalMoney ? new Intl.NumberFormat('en-US').format(ticket.totalMoney) + ' VND' : 'N/A';
            const invoiceId = ticket.invoiceId || ticket.id;

            // L·∫•y ƒë∆∞·ªùng d·∫´n ·∫£nh phim
            let moviePoster = ticket.movieShow?.movie?.image;
            if (!moviePoster || moviePoster === '') {
                const movieNameLower = movieName.toLowerCase();
                if (movieNameLower.includes('oppenheimer') || movieNameLower.includes('open')) {
                    moviePoster = '/image/open.jpg';
                } else if (movieNameLower.includes('barbie')) {
                    moviePoster = '/image/barbie.jpg';
                } else if (movieNameLower.includes('batman')) {
                    moviePoster = '/image/batman.jpg';
                } else if (movieNameLower.includes('spider')) {
                    moviePoster = '/image/spider.jpg';
                } else if (movieNameLower.includes('dune')) {
                    moviePoster = '/image/dune.jpg';
                } else if (movieNameLower.includes('parasite')) {
                    moviePoster = '/image/parasite.jpg';
                } else if (movieNameLower.includes('everything')) {
                    moviePoster = '/image/everything.jpg';
                } else if (movieNameLower.includes('topgun') || movieNameLower.includes('top gun')) {
                    moviePoster = '/image/topgun.jpg';
                } else {
                    moviePoster = '/image/default-movie.png';
                }
            }
            
            return `
                <div class="movie-ticket ${status}">
                    <div class="ticket-stub">
                        <img src="${moviePoster}" alt="${movieName}" class="movie-poster"
                            onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
                            onload="this.style.display='block'; this.nextElementSibling.style.display='none';">
                        <div class="movie-poster-placeholder">üé¨</div>
                    </div>
                    <div class="ticket-main">
                        <div class="ticket-header">
                            <h3 class="movie-title">${movieName}</h3>
                            <span class="ticket-status ${status}">${status === 'booked' ? '‚úì' : '‚úó'}</span>
                        </div>
                        <div class="ticket-details">
                            <div class="detail-item">
                                <span class="detail-icon">üìÖ</span>
                                <span>${showDate}</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-icon">üïê</span>
                                <span>${showTime}</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-icon">ü™ë</span>
                                <span>${seats}</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-icon">üí∞</span>
                                <span>${amount}</span>
                            </div>
                        </div>
                        <div class="ticket-actions">
                            <a href="/Ticket/Details/${invoiceId}" class="cinema-btn secondary" style="font-size: 0.8rem; padding: 0.5rem 1rem;">
                                üé´ View Details
                            </a>
                        </div>
                    </div>
                    <div class="ticket-perforation"></div>
                </div>
            `;
        }).join('');

        // T·∫°o ph√¢n trang
        let paginationHtml = '';
        if (totalPages > 1) {
            paginationHtml = '<div class="ticket-pagination">';
            
            // N√∫t Previous
            if (page > 1) {
                paginationHtml += `<button class="page-btn prev-btn" onclick="changePage(${page - 1})">‚Üê</button>`;
            }
            
            // C√°c n√∫t s·ªë trang - t·ªëi ∆∞u cho 1 h√†ng
            const maxVisiblePages = 7; // TƒÉng s·ªë n√∫t hi·ªÉn th·ªã
            let startPage = Math.max(1, page - Math.floor(maxVisiblePages / 2));
            let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
            
            if (endPage - startPage + 1 < maxVisiblePages) {
                startPage = Math.max(1, endPage - maxVisiblePages + 1);
            }
            
            // N√∫t ƒë·∫ßu ti√™n n·∫øu c·∫ßn
            if (startPage > 1) {
                paginationHtml += `<button class="page-btn" onclick="changePage(1)">1</button>`;
                if (startPage > 2) {
                    paginationHtml += `<span class="page-dots">...</span>`;
                }
            }
            
            // C√°c n√∫t trang ch√≠nh
            for (let i = startPage; i <= endPage; i++) {
                const activeClass = i === page ? 'active' : '';
                paginationHtml += `<button class="page-btn ${activeClass}" onclick="changePage(${i})">${i}</button>`;
            }
            
            // N√∫t cu·ªëi c√πng n·∫øu c·∫ßn
            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    paginationHtml += `<span class="page-dots">...</span>`;
                }
                paginationHtml += `<button class="page-btn" onclick="changePage(${totalPages})">${totalPages}</button>`;
            }
            
            // N√∫t Next
            if (page < totalPages) {
                paginationHtml += `<button class="page-btn next-btn" onclick="changePage(${page + 1})">‚Üí</button>`;
            }
            
            paginationHtml += '</div>';
        }

        showcase.innerHTML = ticketsHtml + paginationHtml;
    }

    // H√†m chuy·ªÉn trang
    function changePage(page) {
        const currentFilter = document.querySelector('.filter-ticket.active').dataset.filter;
        loadTickets(currentFilter, page);
    }

    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initProfileTab);
    } else {
        initProfileTab();
    }

    // Avatar upload functionality
    document.getElementById('avatarUpload').addEventListener('change', function (e) {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                // Simple avatar update without modal
                document.getElementById('profileAvatar').src = e.target.result;
            };
            reader.readAsDataURL(file);
        }
    });

    // Rank details modal
    function showRankDetails() {
        alert('Rank details feature coming soon!');
    }
</script>

<script>
// Rank Details Modal Logic
if (typeof window.currentRankSlide === 'undefined') window.currentRankSlide = 0;
function showRankDetails() {
    document.getElementById('rankDetailsModal').style.display = 'flex';
    document.body.style.overflow = 'hidden';
    showRankSlide(window.currentRankSlide);
}
function closeRankDetails() {
    document.getElementById('rankDetailsModal').style.display = 'none';
    document.body.style.overflow = 'auto';
}
function showRankSlide(slideIndex) {
    var slides = document.querySelectorAll('.rank-slide');
    var indicators = document.querySelectorAll('.rank-indicator');
    slides.forEach(slide => slide.classList.remove('active'));
    indicators.forEach(indicator => indicator.classList.remove('active'));
    if (slides[slideIndex]) slides[slideIndex].classList.add('active');
    if (indicators[slideIndex]) indicators[slideIndex].classList.add('active');
    window.currentRankSlide = slideIndex;
}
function nextRankSlide() {
    var slides = document.querySelectorAll('.rank-slide');
    var next = (window.currentRankSlide + 1) % slides.length;
    showRankSlide(next);
}
function prevRankSlide() {
    var slides = document.querySelectorAll('.rank-slide');
    var prev = (window.currentRankSlide - 1 + slides.length) % slides.length;
    showRankSlide(prev);
}
document.addEventListener('click', function(e) {
    var modal = document.getElementById('rankDetailsModal');
    if (e.target === modal) closeRankDetails();
});
</script> 