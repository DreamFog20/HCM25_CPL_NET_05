@model List<MovieTheater.Models.Invoice>
@{
    ViewData["Title"] = "Booking History";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-lg-12">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h2 class="text-center mb-0">Booking History</h2>
                </div>
                <div class="card-body">
                    @if (TempData["Success"] != null)
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            <i class="fas fa-check-circle me-2"></i>@TempData["Success"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }

                    @if (TempData["Error"] != null)
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="fas fa-exclamation-circle me-2"></i>@TempData["Error"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }

                    <!-- Filter Form -->
                    <form id="historyFilterForm" class="row g-3 filter-form mb-4">
                        <div class="filter-col">
                            <label class="filter-label">From Date</label>
                            <input type="date" id="fromDate" name="fromDate" class="form-control filter-input" />
                        </div>
                        <div class="filter-col">
                            <label class="filter-label">To Date</label>
                            <input type="date" id="toDate" name="toDate" class="form-control filter-input" />
                        </div>
                        <div class="filter-col d-flex align-items-end justify-content-end gap-2">
                            <button type="button" id="viewAllBtn" class="btn filter-btn filter-btn-success">
                                <i class="fas fa-list"></i> View All
                            </button>
                            <button type="submit" id="filterBtn" class="btn filter-btn filter-btn-primary">
                                <i class="fas fa-search"></i> Filter
                            </button>
                        </div>
                    </form>

                    <!-- Booking History Table -->
                    <div id="historyResult">
                        <!-- Nội dung danh sách booking và phân trang sẽ được load động từ _HistoryPartial.cshtml -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(function() {
        // Prevent form submission
        $('#historyFilterForm').attr('action', 'javascript:void(0)');
        $('#historyFilterForm').removeAttr('method');

        // Function to load history
        function loadHistory(fromDate, toDate) {
            // Show loading state
            $('#filterBtn, #viewAllBtn').prop('disabled', true);
            $('#filterBtn').html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Loading...');
            
            $.ajax({
                url: '/Ticket/HistoryPartial',
                type: 'GET',
                data: { fromDate: fromDate, toDate: toDate },
                success: function (result) {
                    $('#historyResult').html(result);
                    $('#accountTabs .nav-link').removeClass('active');
                    $('#accountTabs .nav-link[data-tab="History"]').addClass('active');
                    
                    // Initialize pagination after loading new data
                    setTimeout(function() {
                        initializeHistoryPagination();
                    }, 100);
                },
                error: function () {
                    $('#historyResult').html('<div class="alert alert-danger"><i class="fas fa-exclamation-triangle"></i> Error loading data.</div>');
                },
                complete: function() {
                    // Reset button state
                    $('#filterBtn, #viewAllBtn').prop('disabled', false);
                    $('#filterBtn').html('<i class="fas fa-search"></i> Filter');
                }
            });
        }

        // Handle form submit
        $('#historyFilterForm').on('submit', function(e) {
            e.preventDefault();
            var fromDate = $('#fromDate').val();
            var toDate = $('#toDate').val();
            loadHistory(fromDate, toDate);
        });

        // Handle View All button click
        $('#viewAllBtn').on('click', function() {
            loadHistory('', '');
        });

        // Load initial data (all records)
        loadHistory('', '');
    });
    
    // Pagination functionality for History
    const HISTORY_ITEMS_PER_PAGE = 7;
    let historyCurrentPage = 1;
    let historyFilteredRows = [];

    function initializeHistoryPagination() {
        historyFilteredRows = Array.from(document.querySelectorAll('.history-row'));
        displayHistoryPage(historyCurrentPage);
        updateHistoryPagination();
    }

    function displayHistoryPage(page) {
        const startIndex = (page - 1) * HISTORY_ITEMS_PER_PAGE;
        const endIndex = startIndex + HISTORY_ITEMS_PER_PAGE;
        
        // Hide all rows first
        historyFilteredRows.forEach(row => row.style.display = 'none');
        
        // Show only the rows for the current page
        historyFilteredRows.slice(startIndex, endIndex).forEach(row => row.style.display = '');
    }

    function updateHistoryPagination() {
        const totalPages = Math.ceil(historyFilteredRows.length / HISTORY_ITEMS_PER_PAGE);
        const pagination = document.getElementById('historyPagination');
        if (!pagination) return;
        
        pagination.innerHTML = '';

        // Previous button
        const prevLi = document.createElement('li');
        prevLi.className = `page-item ${historyCurrentPage === 1 ? 'disabled' : ''}`;
        prevLi.innerHTML = `<a class="page-link" href="#" onclick="changeHistoryPage(${historyCurrentPage - 1})">Previous</a>`;
        pagination.appendChild(prevLi);

        // Page numbers
        for (let i = 1; i <= totalPages; i++) {
            const li = document.createElement('li');
            li.className = `page-item ${historyCurrentPage === i ? 'active' : ''}`;
            li.innerHTML = `<a class="page-link" href="#" onclick="changeHistoryPage(${i})">${i}</a>`;
            pagination.appendChild(li);
        }

        // Next button
        const nextLi = document.createElement('li');
        nextLi.className = `page-item ${historyCurrentPage === totalPages ? 'disabled' : ''}`;
        nextLi.innerHTML = `<a class="page-link" href="#" onclick="changeHistoryPage(${historyCurrentPage + 1})">Next</a>`;
        pagination.appendChild(nextLi);
    }

    function changeHistoryPage(page) {
        if (page < 1 || page > Math.ceil(historyFilteredRows.length / HISTORY_ITEMS_PER_PAGE)) return;
        historyCurrentPage = page;
        displayHistoryPage(historyCurrentPage);
        updateHistoryPagination();
    }

    // Initialize pagination when the content is loaded
    $(document).ready(function() {
        initializeHistoryPagination();
    });

    // Re-initialize pagination when the history content is loaded
    $(document).on('historyTabLoaded', function() {
        initializeHistoryPagination();
    });
</script>

@section Styles {
    <style>
        .table th {
            white-space: nowrap;
        }
        .badge {
            font-size: 0.9em;
            padding: 0.5em 0.8em;
        }
        .btn-group {
            gap: 0.5rem;
        }
        .table td {
            vertical-align: middle;
        }
        .btn-sm {
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
        }
        .filter-form {
            background: linear-gradient(to right, #f8f9fa, #e9ecef);
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        }

        .filter-col {
            flex: 0 0 33.333333%;
            max-width: 33.333333%;
            padding: 0 1rem;
        }

        .filter-col:first-child {
            padding-left: 0;
        }

        .filter-col:last-child {
            padding-right: 0;
        }

        .filter-label {
            color: rgb(65, 123, 199);
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .filter-input {
            border: 1px solid rgb(65, 123, 199);
            border-radius: 8px;
            padding: 0.75rem;
            transition: all 0.3s ease;
        }

        .filter-input:focus {
            border-color: rgb(28, 109, 216);
            box-shadow: 0 0 0 3px rgba(65, 123, 199, 0.15);
        }

        .filter-btn {
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .filter-btn-primary {
            background: rgb(65, 123, 199);
            border-color: rgb(65, 123, 199);
        }

        .filter-btn-primary:hover {
            background: rgb(28, 109, 216);
            border-color: rgb(28, 109, 216);
            transform: translateY(-2px);
        }

        .filter-btn-success {
            background: rgb(56, 168, 134);
            border-color: rgb(56, 168, 134);
        }

        .filter-btn-success:hover {
            background: rgb(45, 147, 118);
            border-color: rgb(45, 147, 118);
            transform: translateY(-2px);
        }
    </style>
}
