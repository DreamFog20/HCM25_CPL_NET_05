@model MovieTheater.ViewModels.RegisterViewModel;
@{
    ViewData["Title"] = "Change Password";
}

<a asp-controller="MyAccount" asp-action="MainPage" asp-route-tab="Profile" class="btn btn-secondary ms-3 mt-3">
    &larr; Return
</a>

<div class="d-flex justify-content-center align-items-center vh-70">
    <div class="p-4 shadow rounded" style="width: 100%; max-width: 500px; margin-bottom: 30px">
        <h2 class="text-center mb-4">Change Password</h2>
        <form id="changePasswordForm">
            <div class="form-group mb-3">
                <label for="currentPassword" class="form-label">Current Password</label>
                <div class="password-input-container">
                    <input type="password" class="form-control" id="currentPassword" name="CurrentPassword" placeholder="Enter current password" required />
                    <button class="password-toggle-btn" type="button" id="toggleCurrentPassword">
                        <i class="fas fa-eye" id="currentPasswordIcon"></i>
                    </button>
                </div>
                <span id="currentPasswordFeedback" class="form-text text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label for="newPassword" class="form-label">New Password</label>
                <div class="password-input-container">
                    <input type="password" class="form-control" id="newPassword" name="NewPassword" placeholder="Enter new password" required />
                    <button class="password-toggle-btn" type="button" id="toggleNewPassword">
                        <i class="fas fa-eye" id="newPasswordIcon"></i>
                    </button>
                </div>
                <div class="password-requirements mt-2">
                   
                    <ul class="list-unstyled mt-1">
                        <li id="length-check"><small>• 8-16 characters</small></li>
                        <li id="uppercase-check"><small>• At least one uppercase letter</small></li>
                        <li id="lowercase-check"><small>• At least one lowercase letter</small></li>
                        <li id="number-check"><small>• At least one number</small></li>
                        <li id="special-check"><small>• At least one special character (!@@#$%^&*)</small></li>
                    </ul>
                </div>
                <span id="newPasswordFeedback" class="form-text text-danger"></span>
            </div>

            <div class="form-group mb-4">
                <label for="confirmNewPassword" class="form-label">Confirm New Password</label>
                <div class="password-input-container">
                    <input type="password" class="form-control" id="confirmNewPassword" name="confirmPassword" placeholder="Confirm new password" required />
                    <button class="password-toggle-btn" type="button" id="toggleConfirmNewPassword">
                        <i class="fas fa-eye" id="confirmNewPasswordIcon"></i>
                    </button>
                </div>
                <span id="passwordFeedback" class="form-text text-danger"></span>
            </div>

            <div id="otpContainer" class="otp-container" style="display:none;">
                @for (var i = 0; i < 6; i++)
                {
                    <input type="text"
                           inputmode="numeric"
                           pattern="\d*"
                           maxlength="1"
                           class="otp-box"
                           data-index="@i" />
                }
                <span id="otpTimer" class="form-text" style="margin-left:1rem;"></span>
            </div>
            <span id="otpFeedback" class="form-text text-danger"></span>

            <button type="button" id="changePasswordBtn" class="btn btn-primary w-100 mt-4" disabled>
                Change Password
            </button>

            <div class="alert alert-warning mb-3 mt-4" role="alert">
                For security reasons, changing your password will log you out and require you to sign in again.
            </div>
        </form>
    </div>
</div>

<!-- Toast notification for OTP sent -->
<div id="otpToast" class="toast align-items-center text-bg-success border-0 position-fixed end-0 p-3" role="alert" aria-live="assertive" aria-atomic="true" style="z-index: 1050; top: 80px; display: none;">
  <div class="d-flex">
    <div class="toast-body">
      OTP sent. Check your email.
    </div>
    <button type="button" class="btn-close btn-close-white me-2 m-auto" aria-label="Close" onclick="document.getElementById('otpToast').style.display='none';"></button>
  </div>
</div>

@section Styles {
    <style>
    /* Password input container with icon inside */
    .password-input-container {
        position: relative;
        display: flex;
        align-items: center;
    }

    .password-toggle-btn {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: #666;
        cursor: pointer;
        padding: 5px;
        z-index: 10;
        transition: color 0.3s ease;
    }

    .password-toggle-btn:hover {
        color: #333;
    }

    .password-input-container .form-control {
        padding-right: 40px;
    }

    .otp-container {
      display: flex;
      gap: 0.5rem;
      justify-content: center;
      margin-top: 1rem;
      align-items: center;
    }
    .otp-box {
      width: 3rem;
      height: 3rem;
      text-align: center;
      font-size: 1.5rem;
      border: 2px solid #ccc;
      border-radius: 0.5rem;
      transition: border-color 0.2s;
    }
    .otp-box:focus {
      outline: none;
      border-color: #007bff;
      box-shadow: 0 0 2px rgba(0,123,255,0.5);
    }
    #otpTimer {
      color: #ffc107;
      font-weight: bold;
      font-size: 1.1rem;
      margin-left: 1rem;
    }
    </style>
}

@section Scripts {
<script>
document.addEventListener('DOMContentLoaded', () => {
  // Toggle password visibility
  const toggleCurrentPassword = document.getElementById('toggleCurrentPassword');
  const toggleNewPassword = document.getElementById('toggleNewPassword');
  const toggleConfirmNewPassword = document.getElementById('toggleConfirmNewPassword');
  const currentPasswordIcon = document.getElementById('currentPasswordIcon');
  const newPasswordIcon = document.getElementById('newPasswordIcon');
  const confirmNewPasswordIcon = document.getElementById('confirmNewPasswordIcon');
  
  toggleCurrentPassword.addEventListener('click', function() {
    const currentPassword = document.getElementById('currentPassword');
    const type = currentPassword.getAttribute('type') === 'password' ? 'text' : 'password';
    currentPassword.setAttribute('type', type);
    currentPasswordIcon.classList.toggle('fa-eye');
    currentPasswordIcon.classList.toggle('fa-eye-slash');
  });
  
  toggleNewPassword.addEventListener('click', function() {
    const newPassword = document.getElementById('newPassword');
    const type = newPassword.getAttribute('type') === 'password' ? 'text' : 'password';
    newPassword.setAttribute('type', type);
    newPasswordIcon.classList.toggle('fa-eye');
    newPasswordIcon.classList.toggle('fa-eye-slash');
  });
  
  toggleConfirmNewPassword.addEventListener('click', function() {
    const confirmNewPassword = document.getElementById('confirmNewPassword');
    const type = confirmNewPassword.getAttribute('type') === 'password' ? 'text' : 'password';
    confirmNewPassword.setAttribute('type', type);
    confirmNewPasswordIcon.classList.toggle('fa-eye');
    confirmNewPasswordIcon.classList.toggle('fa-eye-slash');
  });

  const boxes = Array.from(document.querySelectorAll('.otp-box'));
  const feedback = document.getElementById('otpFeedback');
  const otpContainer = document.getElementById('otpContainer');
  const otpTimer = document.getElementById('otpTimer');
  let timerInterval, timerSeconds = 600;

  // OTP box logic
  boxes.forEach((box, idx) => {
    box.addEventListener('input', e => {
      const val = e.target.value;
      if (!/^\d$/.test(val)) {
        e.target.value = '';
        return;
      }
      if (idx < boxes.length - 1) boxes[idx + 1].focus();
    });
    box.addEventListener('keydown', e => {
      if (e.key === 'Backspace' && !e.target.value && idx > 0) {
        boxes[idx - 1].focus();
      }
    });
    if (idx === 0) {
      box.addEventListener('paste', e => {
        e.preventDefault();
        const pasted = (e.clipboardData || window.clipboardData).getData('text');
        const digits = pasted.replace(/\D/g, '').slice(0, boxes.length).split('');
        digits.forEach((d, i) => boxes[i].value = d);
        const next = digits.length < boxes.length ? digits.length : boxes.length - 1;
        boxes[next].focus();
      });
    }
  });

  // Timer logic
  function startOtpTimer() {
    timerSeconds = 600;
    updateOtpTimer();
    clearInterval(timerInterval);
    timerInterval = setInterval(() => {
      timerSeconds--;
      updateOtpTimer();
      if (timerSeconds <= 0) {
        clearInterval(timerInterval);
        otpTimer.textContent = 'OTP expired. Please request a new one.';
      }
    }, 1000);
  }
  function updateOtpTimer() {
    const min = Math.floor(timerSeconds / 60);
    const sec = timerSeconds % 60;
    otpTimer.textContent = `OTP valid for ${min}:${sec.toString().padStart(2, '0')}`;
  }

  // Hook into your sendOtp() logic
  window.showOtpUI = function() {
    otpContainer.style.display = 'flex';
    boxes.forEach(b => b.value = '');
    boxes[0].focus();
    startOtpTimer();
  };

  // Example: read OTP when verifying
  window.getOtpValue = function() {
    return boxes.map(b => b.value).join('');
  };

  // --- Existing logic below ---
  const form          = document.getElementById('changePasswordForm');
  const currentInput  = document.getElementById('currentPassword');
  const newInput      = document.getElementById('newPassword');
  const confirmInput  = document.getElementById('confirmNewPassword');
  const btn           = document.getElementById('changePasswordBtn');
  const passwordFeedback = document.getElementById('passwordFeedback');
  const currentPasswordFeedback = document.getElementById('currentPasswordFeedback');
  let step = 0;

  function validatePassword(password) {
    const requirements = {
      length: password.length >= 8 && password.length <= 16,
      uppercase: /[A-Z]/.test(password),
      lowercase: /[a-z]/.test(password),
      number: /\d/.test(password),
      special: /[!@@#$%^&*]/.test(password)
    };
    
    // Update visual indicators
    document.getElementById('length-check').style.color = requirements.length ? '#28a745' : '#dc3545';
    document.getElementById('uppercase-check').style.color = requirements.uppercase ? '#28a745' : '#dc3545';
    document.getElementById('lowercase-check').style.color = requirements.lowercase ? '#28a745' : '#dc3545';
    document.getElementById('number-check').style.color = requirements.number ? '#28a745' : '#dc3545';
    document.getElementById('special-check').style.color = requirements.special ? '#28a745' : '#dc3545';
    
    return Object.values(requirements).every(req => req);
  }

  function validatePasswords() {
    const cur = currentInput.value;
    const nw  = newInput.value;
    const cf  = confirmInput.value;
    const isPasswordValid = validatePassword(nw);
    const isConfirmPasswordValid = nw === cf && nw.length > 0;
    const isCurrentPasswordValid = cur.length > 0;
    const isDifferentPassword = nw !== cur;
    
    btn.disabled = !(isCurrentPasswordValid && isPasswordValid && isConfirmPasswordValid && isDifferentPassword);
    
    if (nw !== cf && cf.length > 0) {
      passwordFeedback.textContent = 'Passwords do not match';
    } else if (nw === cur && nw) {
      passwordFeedback.textContent = 'New password must be different from current password';
    } else if (!isPasswordValid && nw.length > 0) {
      passwordFeedback.textContent = 'Password does not meet requirements';
    } else {
      passwordFeedback.textContent = '';
    }
  }
  [currentInput,newInput,confirmInput].forEach(i => 
    i.addEventListener('input', validatePasswords)
  );

  async function sendOtp() {
    btn.disabled = true;
    btn.textContent = 'Sending OTP…';
    const cur = currentInput.value;
    const res = await fetch('/MyAccount/SendOtp', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ currentPassword: cur })
    });
    const data = await res.json();
    if (data.success) {
      step = 1;
      showOtpUI();
      // Show toast instead of feedback
      const toast = document.getElementById('otpToast');
      toast.style.display = 'block';
      setTimeout(() => { toast.style.display = 'none'; }, 4000);
      feedback.textContent = '';
      btn.textContent = 'Verify OTP';
    } else {
      feedback.textContent = data.error || 'Could not send OTP.';
      btn.textContent = 'Change Password';
    }
    btn.disabled = false;
  }

  async function verifyOtp() {
    const code = getOtpValue();
    if (!code || code.length < 6) {
      feedback.textContent = 'Please enter all digits.';
      return;
    }
    btn.disabled = true;
    btn.textContent = 'Verifying…';
    const res = await fetch('/MyAccount/VerifyOtp',{
      method:'POST',
      headers:{ 'Content-Type':'application/json' },
      body: JSON.stringify({ otp: code })
    });
    const data = await res.json();
    if (data.success) {
      step = 2;
      feedback.textContent = '';
      btn.textContent = 'Submit Password Change';
      otpContainer.style.display = 'none';
      // Show toast for successful OTP verification
      const toast = document.getElementById('otpToast');
      toast.querySelector('.toast-body').textContent = 'OTP verified successfully!';
      toast.style.display = 'block';
      setTimeout(() => { toast.style.display = 'none'; }, 4000);
    } else {
      feedback.textContent = data.error || 'Invalid OTP.';
      btn.textContent = 'Verify OTP';
    }
    btn.disabled = false;
  }

  async function submitChange() {
    btn.disabled = true;
    btn.textContent = 'Changing…';
    const payload = new URLSearchParams(new FormData(form));
    payload.append('otp', getOtpValue());
    const res = await fetch('/MyAccount/ChangePassword',{
      method:'POST',
      body: payload
    });
    const data = await res.json();
    if (data.success) {
      window.location.href = '/Account/Login';
    } else {
      alert(data.error||'Error');
      btn.textContent = 'Submit Password Change';
      btn.disabled = false;
    }
  }

  btn.addEventListener('click', () => {
    if (step === 0)        return sendOtp();
    else if (step === 1)   return verifyOtp();
    else if (step === 2)   return submitChange();
  });
});
</script>
}

<partial name="_ToastMessages" />
