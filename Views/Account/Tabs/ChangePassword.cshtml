@model MovieTheater.ViewModels.RegisterViewModel;

@{
    ViewData["Title"] = "Change Password";
}

<a asp-controller="MyAccount" asp-action="MainPage" asp-route-tab="Profile" class="btn btn-secondary ms-3 mt-3">
    &larr; Return
</a>

<div class="d-flex justify-content-center align-items-center vh-70">
    <div class="p-4 shadow rounded">
        <h2 class="text-center mb-4">Change Password</h2>
        <form id="changePasswordForm">
            <div class="form-group mb-3">
                <label for="currentPassword" class="form-label">Current Password</label>
                <div class="password-input-container">
                    <input type="password" class="form-control" id="currentPassword" name="CurrentPassword" placeholder="Enter current password" required />
                    <button class="password-toggle-btn" type="button" id="toggleCurrentPassword">
                        <i class="fas fa-eye" id="currentPasswordIcon"></i>
                    </button>
                </div>
                <span id="currentPasswordFeedback" class="form-text text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label for="newPassword" class="form-label">New Password</label>
                <div class="password-input-container">
                    <input type="password" class="form-control" id="newPassword" name="NewPassword" placeholder="Enter new password" required />
                    <button class="password-toggle-btn" type="button" id="toggleNewPassword">
                        <i class="fas fa-eye" id="newPasswordIcon"></i>
                    </button>
                </div>
                <div class="password-requirements mt-2" id="passwordRequirements" style="display: none;">
                    <ul class="list-unstyled mt-1">
                        <li id="length-check"><small>• 8-16 characters</small></li>
                        <li id="uppercase-check"><small>• At least one uppercase letter</small></li>
                        <li id="lowercase-check"><small>• At least one lowercase letter</small></li>
                        <li id="number-check"><small>• At least one number</small></li>
                        <li id="special-check"><small>• At least one special character (!@@#$%^&*)</small></li>
                    </ul>
                </div>
                <span id="newPasswordFeedback" class="form-text text-danger"></span>
            </div>

            <div class="form-group mb-4">
                <label for="confirmNewPassword" class="form-label">Confirm New Password</label>
                <div class="password-input-container">
                    <input type="password" class="form-control" id="confirmNewPassword" name="confirmPassword" placeholder="Confirm new password" required />
                    <button class="password-toggle-btn" type="button" id="toggleConfirmNewPassword">
                        <i class="fas fa-eye" id="confirmNewPasswordIcon"></i>
                    </button>
                </div>
                <span id="passwordFeedback" class="form-text text-danger"></span>
            </div>

            <div id="otpContainer" class="otp-container" style="display:none;">
                @for (var i = 0; i < 6; i++)
                {
                    <input type="text"
                           inputmode="numeric"
                           pattern="\d*"
                           maxlength="1"
                           class="otp-box"
                           data-index="@i" />
                }
                <span id="otpTimer" class="form-text" style="margin-left:1rem;"></span>
            </div>
            <span id="otpFeedback" class="form-text text-danger"></span>

            <button type="button" id="changePasswordBtn" class="btn btn-primary w-100 mt-4" disabled>
                Change Password
            </button>

            <div class="alert alert-warning mb-3 mt-4" role="alert">
                For security reasons, changing your password will log you out and require you to sign in again.
            </div>
        </form>
    </div>
</div>

<!-- Toast notification for OTP sent -->
<div id="otpToast" class="toast align-items-center text-bg-success border-0 position-fixed end-0 p-3" role="alert" aria-live="assertive" aria-atomic="true" style="z-index: 1050; top: 80px; display: none;">
    <div class="d-flex">
        <div class="toast-body">
            OTP sent. Check your email.
        </div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" aria-label="Close" onclick="document.getElementById('otpToast').style.display='none';"></button>
    </div>
</div>

@section Styles {
    <style>
        /* Premium Theme Variables */
        :root {
            --primary-bg: #0f0f23;
            --secondary-bg: #1a1a2e;
            --accent-purple: #8b5cf6;
            --accent-pink: #ec4899;
            --accent-blue: #3b82f6;
            --text-white: #ffffff;
            --text-gray: #9ca3af;
            --text-muted: #6b7280;
            --success: #10b981;
            --error: #ef4444;
            --warning: #f59e0b;
            --border-light: rgba(255, 255, 255, 0.1);
            --border-glow: rgba(139, 92, 246, 0.3);
        }
        
        /* Main Container - More compact */
        .d-flex.justify-content-center.align-items-center.vh-70 {
            min-height: calc(100vh - 100px);
            background: linear-gradient(135deg, var(--primary-bg) 0%, var(--secondary-bg) 50%, var(--primary-bg) 100%);
            position: relative;
            overflow: hidden;
            padding: 2rem 1rem;
        }

        .d-flex.justify-content-center.align-items-center.vh-70::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: radial-gradient(circle at 20% 30%, rgba(139, 92, 246, 0.1) 0%, transparent 50%), 
                        radial-gradient(circle at 80% 70%, rgba(236, 72, 153, 0.08) 0%, transparent 50%), 
                        radial-gradient(circle at 50% 50%, rgba(59, 130, 246, 0.03) 0%, transparent 50%);
            pointer-events: none;
        }
        
        /* Form Container - Smaller and more elegant */
        .p-4.shadow.rounded {
            background: rgba(26, 26, 46, 0.95) !important;
            backdrop-filter: blur(30px) !important;
            -webkit-backdrop-filter: blur(30px) !important;
            border: 1px solid var(--border-light) !important;
            border-radius: 24px !important;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.8), 
                        0 0 0 1px rgba(255, 255, 255, 0.05), 
                        inset 0 1px 0 rgba(255, 255, 255, 0.1) !important;
            position: relative;
            z-index: 10;
            max-width: 420px !important;
            width: 100% !important;
            padding: 2.5rem !important;
        }

        .p-4.shadow.rounded::before {
            content: '';
            position: absolute;
            top: -1px;
            left: -1px;
            right: -1px;
            bottom: -1px;
            background: linear-gradient(45deg, var(--accent-purple), var(--accent-pink), var(--accent-blue), var(--accent-purple));
            border-radius: 24px;
            z-index: -1;
            opacity: 0.15;
            transition: opacity 0.4s ease;
            background-size: 400% 400%;
            animation: gradientShift 8s ease infinite;
        }

        @@keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .p-4.shadow.rounded:hover::before {
            opacity: 0.25;
        }
        
        /* Title - Smaller and more elegant */
        h2.text-center.mb-4 {
            color: var(--text-white) !important;
            font-weight: 800 !important;
            font-size: 2.2rem !important;
            letter-spacing: -0.02em !important;
            margin-bottom: 2.5rem !important;
            position: relative;
            text-align: center;
            text-shadow: 0 2px 15px rgba(139, 92, 246, 0.3);
        }

        h2.text-center.mb-4::after {
            content: '';
            position: absolute;
            bottom: -15px;
            left: 50%;
            transform: translateX(-50%);
            width: 60px;
            height: 3px;
            background: linear-gradient(90deg, transparent, var(--accent-purple), var(--accent-pink), transparent);
            border-radius: 2px;
        }
        
        /* Form Groups - More compact spacing */
        .form-group {
            margin-bottom: 1.8rem !important;
        }

        .form-label {
            color: var(--text-white) !important;
            font-weight: 600 !important;
            font-size: 1rem !important;
            margin-bottom: 0.75rem !important;
            display: block;
            letter-spacing: 0.01em;
            text-shadow: 0 1px 8px rgba(139, 92, 246, 0.2);
        }
        
        /* Password Input Container - Smaller and more elegant */
        .password-input-container {
            position: relative;
            display: flex;
            align-items: center;
            background: rgba(255, 255, 255, 0.02) !important;
            border: 1.5px solid var(--border-light) !important;
            border-radius: 16px !important;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
            overflow: hidden;
        }

        .password-input-container:focus-within {
            border-color: var(--accent-purple) !important;
            box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.12) !important;
            background: rgba(255, 255, 255, 0.03) !important;
            transform: translateY(-1px);
        }

        .password-input-container .form-control {
            background: transparent !important;
            border: none !important;
            color: var(--text-white) !important;
            padding: 1rem 1rem 1rem 1.5rem !important;
            font-size: 1rem !important;
            outline: none !important;
            flex: 1;
            font-weight: 500;
        }

        .password-input-container .form-control::placeholder {
            color: var(--text-muted) !important;
            font-weight: 400;
        }
        
        /* Password Toggle Button - Smaller and more elegant */
        .password-toggle-btn {
            position: absolute;
            right: 12px;
            top: 50%;
            transform: translateY(-50%);
            background: rgba(139, 92, 246, 0.08) !important;
            border: 1px solid rgba(139, 92, 246, 0.15) !important;
            color: var(--accent-purple) !important;
            cursor: pointer;
            padding: 8px !important;
            border-radius: 12px !important;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .password-toggle-btn:hover {
            background: rgba(139, 92, 246, 0.15) !important;
            border-color: var(--accent-purple) !important;
            transform: translateY(-50%) scale(1.1) !important;
            box-shadow: 0 4px 12px rgba(139, 92, 246, 0.25) !important;
        }
        
        /* Password Requirements - More compact */
        .password-requirements {
            background: rgba(139, 92, 246, 0.04) !important;
            border: 1px solid rgba(139, 92, 246, 0.08) !important;
            border-radius: 16px !important;
            padding: 1.5rem !important;
            margin-top: 1.5rem !important;
            animation: slideDown 0.3s ease-out;
        }

        @@keyframes slideDown {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .password-requirements ul {
            margin: 0 !important;
            padding: 0 !important;
        }

        .password-requirements li {
            color: var(--text-gray) !important;
            font-size: 0.9rem !important;
            margin-bottom: 0.5rem !important;
            transition: all 0.3s ease !important;
            display: flex;
            align-items: center;
            font-weight: 500;
        }

        .password-requirements li::before {
            content: '✦';
            color: var(--accent-purple);
            margin-right: 0.75rem;
            font-weight: bold;
            font-size: 1rem;
            opacity: 0.8;
            transition: all 0.3s ease;
        }

        .password-requirements li.valid {
            color: var(--success) !important;
        }

        .password-requirements li.valid::before {
            content: '✓';
            color: var(--success);
            opacity: 1;
        }

        .password-requirements li:last-child {
            margin-bottom: 0 !important;
        }
        
        /* OTP Container - Smaller and more elegant */
        .otp-container {
            display: flex;
            gap: 0.8rem;
            justify-content: center;
            margin-top: 2rem;
            align-items: center;
            flex-wrap: wrap;
        }

        .otp-box {
            width: 3.5rem;
            height: 3.5rem;
            text-align: center;
            font-size: 1.4rem;
            font-weight: 700;
            background: rgba(255, 255, 255, 0.02) !important;
            border: 1.5px solid var(--border-light) !important;
            border-radius: 16px !important;
            color: var(--text-white) !important;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
        }

        .otp-box:focus {
            outline: none !important;
            border-color: var(--accent-purple) !important;
            box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.12) !important;
            background: rgba(255, 255, 255, 0.03) !important;
            transform: scale(1.05);
        }

        #otpTimer {
            color: var(--accent-purple) !important;
            font-weight: 600 !important;
            font-size: 1rem !important;
            margin-left: 1.5rem !important;
        }
        
        /* Submit Button - Smaller and more elegant */
        #changePasswordBtn {
            background: linear-gradient(135deg, var(--accent-purple) 0%, var(--accent-pink) 50%, var(--accent-blue) 100%) !important;
            border: none !important;
            color: var(--text-white) !important;
            font-weight: 700 !important;
            font-size: 1.1rem !important;
            padding: 1.2rem 2.5rem !important;
            border-radius: 16px !important;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
            box-shadow: 0 8px 25px rgba(139, 92, 246, 0.3) !important;
            position: relative;
            overflow: hidden;
            letter-spacing: 0.02em;
            background-size: 200% 200%;
            animation: buttonGradient 4s ease infinite;
        }

        @@keyframes buttonGradient {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        #changePasswordBtn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            transition: left 0.6s ease;
        }

        #changePasswordBtn:hover {
            transform: translateY(-2px) !important;
            box-shadow: 0 12px 35px rgba(139, 92, 246, 0.4) !important;
        }

        #changePasswordBtn:hover::before {
            left: 100%;
        }

        #changePasswordBtn:disabled {
            background: rgba(255, 255, 255, 0.05) !important;
            color: var(--text-muted) !important;
            cursor: not-allowed !important;
            transform: none !important;
            box-shadow: none !important;
            border: 1px solid var(--border-light) !important;
            animation: none;
        }
        
        /* Alert Box - More compact */
        .alert.alert-warning {
            background: rgba(245, 158, 11, 0.08) !important;
            border: 1px solid rgba(245, 158, 11, 0.15) !important;
            color: var(--warning) !important;
            border-radius: 16px !important;
            padding: 1.2rem 1.5rem !important;
            font-size: 0.95rem !important;
            font-weight: 500;
        }
        
        /* Feedback Messages - Smaller */
        .form-text.text-danger {
            color: var(--error) !important;
            font-size: 0.9rem !important;
            margin-top: 0.75rem !important;
            font-weight: 500 !important;
        }
        
        /* Return Button - Smaller and more elegant */
        .btn.btn-secondary {
            background: rgba(255, 255, 255, 0.05) !important;
            border: 1px solid var(--border-light) !important;
            color: var(--text-white) !important;
            border-radius: 12px !important;
            padding: 0.8rem 1.5rem !important;
            font-weight: 600 !important;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
            text-decoration: none !important;
            display: inline-flex !important;
            align-items: center !important;
            gap: 0.75rem !important;
            font-size: 1rem;
        }

        .btn.btn-secondary:hover {
            background: rgba(139, 92, 246, 0.1) !important;
            border-color: var(--accent-purple) !important;
            color: var(--accent-purple) !important;
            transform: translateX(-4px) !important;
            text-decoration: none !important;
            box-shadow: 0 6px 20px rgba(139, 92, 246, 0.25) !important;
        }
        
        /* Toast - Smaller */
        #otpToast {
            background: var(--success) !important;
            border: none !important;
            border-radius: 16px !important;
            box-shadow: 0 15px 35px rgba(16, 185, 129, 0.3) !important;
        }
        
        /* Responsive - More compact on mobile */
        @@media (max-width: 768px) {
            .p-4.shadow.rounded {
                margin: 1.5rem !important;
                padding: 2rem !important;
                max-width: 380px !important;
            }

            h2.text-center.mb-4 {
                font-size: 1.8rem !important;
                margin-bottom: 2rem !important;
            }

            .otp-container {
                gap: 0.6rem;
            }

            .otp-box {
                width: 3rem;
                height: 3rem;
                font-size: 1.2rem;
            }

            #otpTimer {
                font-size: 0.9rem !important;
                margin-left: 1rem !important;
            }
            
            .password-input-container .form-control {
                padding: 0.9rem 1rem 0.9rem 1.3rem !important;
                font-size: 0.95rem !important;
            }
            
            #changePasswordBtn {
                padding: 1rem 2rem !important;
                font-size: 1rem !important;
            }
        }

        @@media (max-width: 480px) {
            .p-4.shadow.rounded {
                margin: 1rem !important;
                padding: 1.5rem !important;
                max-width: 340px !important;
            }

            h2.text-center.mb-4 {
                font-size: 1.6rem !important;
                margin-bottom: 1.8rem !important;
            }

            .otp-box {
                width: 2.8rem;
                height: 2.8rem;
                font-size: 1.1rem;
            }

            .password-input-container .form-control {
                padding: 0.8rem 1rem 0.8rem 1.2rem !important;
                font-size: 0.9rem !important;
            }

            #changePasswordBtn {
                padding: 0.9rem 1.8rem !important;
                font-size: 0.95rem !important;
            }
            
            .form-group {
                margin-bottom: 1.5rem !important;
            }
        }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Toggle password visibility
            const togglePasswordVisibility = (inputElementId, iconElementId) => {
                const input = document.getElementById(inputElementId);
                const icon = document.getElementById(iconElementId);
                const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
                input.setAttribute('type', type);
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            };

            document.getElementById('toggleCurrentPassword').addEventListener('click', () => {
                togglePasswordVisibility('currentPassword', 'currentPasswordIcon');
            });
            document.getElementById('toggleNewPassword').addEventListener('click', () => {
                togglePasswordVisibility('newPassword', 'newPasswordIcon');
            });
            document.getElementById('toggleConfirmNewPassword').addEventListener('click', () => {
                togglePasswordVisibility('confirmNewPassword', 'confirmNewPasswordIcon');
            });

            const boxes = Array.from(document.querySelectorAll('.otp-box'));
            const otpFeedback = document.getElementById('otpFeedback');
            const otpContainer = document.getElementById('otpContainer');
            const otpTimer = document.getElementById('otpTimer');
            let timerInterval, timerSeconds = 600; // 10 minutes

            // OTP box logic
            boxes.forEach((box, idx) => {
                box.addEventListener('input', e => {
                    const val = e.target.value;
                    if (!/^\d$/.test(val)) { // Only allow digits
                        e.target.value = '';
                        return;
                    }
                    if (idx < boxes.length - 1 && val) { // Move focus to next box if a digit is entered
                        boxes[idx + 1].focus();
                    } else if (idx === boxes.length - 1 && val) { // If last box is filled, blur
                        e.target.blur();
                    }
                    validatePasswords(); // Re-validate to enable/disable button
                });
                box.addEventListener('keydown', e => {
                    if (e.key === 'Backspace' && !e.target.value && idx > 0) {
                        boxes[idx - 1].focus();
                    }
                });
                if (idx === 0) { // Only attach paste listener to the first box
                    box.addEventListener('paste', e => {
                        e.preventDefault();
                        const pasted = (e.clipboardData || window.clipboardData).getData('text');
                        const digits = pasted.replace(/\D/g, '').slice(0, boxes.length).split('');
                        digits.forEach((d, i) => boxes[i].value = d);
                        const next = digits.length < boxes.length ? digits.length : boxes.length - 1;
                        boxes[next].focus();
                        validatePasswords(); // Re-validate after paste
                    });
                }
            });

            // Timer logic
            function startOtpTimer() {
                timerSeconds = 600; // Reset to 10 minutes
                updateOtpTimer();
                clearInterval(timerInterval);
                timerInterval = setInterval(() => {
                    timerSeconds--;
                    updateOtpTimer();
                    if (timerSeconds <= 0) {
                        clearInterval(timerInterval);
                        otpTimer.textContent = 'OTP expired. Please request a new one.';
                        // Optionally disable OTP input boxes here
                    }
                }, 1000);
            }

            function updateOtpTimer() {
                const min = Math.floor(timerSeconds / 60);
                const sec = timerSeconds % 60;
                otpTimer.textContent = `OTP valid for ${min}:${sec.toString().padStart(2, '0')}`;
            }

            // Function to show OTP UI (called after OTP is sent)
            window.showOtpUI = function () {
                otpContainer.style.display = 'flex';
                boxes.forEach(b => b.value = ''); // Clear OTP boxes
                boxes[0].focus(); // Focus first OTP box
                startOtpTimer();
            };

            // Function to get OTP value (called when verifying)
            window.getOtpValue = function () {
                return boxes.map(b => b.value).join('');
            };

            // --- Form Validation and Submission Logic ---
            const form = document.getElementById('changePasswordForm');
            const currentInput = document.getElementById('currentPassword');
            const newInput = document.getElementById('newPassword');
            const confirmInput = document.getElementById('confirmNewPassword');
            const changePasswordBtn = document.getElementById('changePasswordBtn');
            const passwordFeedback = document.getElementById('passwordFeedback');
            const newPasswordFeedback = document.getElementById('newPasswordFeedback'); // Added for new password specific feedback
            const currentPasswordFeedback = document.getElementById('currentPasswordFeedback'); // For current password feedback

            let step = 0; // 0: Initial, 1: OTP sent, 2: OTP verified

            function validatePassword(password) {
                const requirements = {
                    length: password.length >= 8 && password.length <= 16,
                    uppercase: /[A-Z]/.test(password),
                    lowercase: /[a-z]/.test(password),
                    number: /\d/.test(password),
                    special: /[!@@#$%^&*]/.test(password)
                };

                // Show requirements container when user starts typing
                const requirementsContainer = document.getElementById('passwordRequirements');
                if (password.length > 0 && requirementsContainer.style.display === 'none') {
                    requirementsContainer.style.display = 'block';
                }

                // Update visual indicators with classes
                const lengthCheck = document.getElementById('length-check');
                const uppercaseCheck = document.getElementById('uppercase-check');
                const lowercaseCheck = document.getElementById('lowercase-check');
                const numberCheck = document.getElementById('number-check');
                const specialCheck = document.getElementById('special-check');

                lengthCheck.classList.toggle('valid', requirements.length);
                uppercaseCheck.classList.toggle('valid', requirements.uppercase);
                lowercaseCheck.classList.toggle('valid', requirements.lowercase);
                numberCheck.classList.toggle('valid', requirements.number);
                specialCheck.classList.toggle('valid', requirements.special);

                return Object.values(requirements).every(req => req);
            }

            function validatePasswords() {
                const cur = currentInput.value;
                const nw = newInput.value;
                const cf = confirmInput.value;
                const otpCode = getOtpValue();

                const isNewPasswordValid = validatePassword(nw);
                const isConfirmPasswordMatch = nw === cf && nw.length > 0;
                const isCurrentPasswordFilled = cur.length > 0;
                const isNewPasswordDifferent = nw !== cur;
                const isOtpFilled = otpCode.length === 6;

                let canEnableButton = false;

                if (step === 0) { // Initial step: Validate current, new, confirm passwords
                    canEnableButton = isCurrentPasswordFilled && isNewPasswordValid && isConfirmPasswordMatch && isNewPasswordDifferent;
                } else if (step === 1) { // OTP sent step: Validate OTP
                    canEnableButton = isOtpFilled;
                } else if (step === 2) { // OTP verified step: Validate current, new, confirm passwords (again) and OTP
                    canEnableButton = isCurrentPasswordFilled && isNewPasswordValid && isConfirmPasswordMatch && isNewPasswordDifferent && isOtpFilled;
                }

                changePasswordBtn.disabled = !canEnableButton;

                // Feedback for new password requirements
                if (!isNewPasswordValid && nw.length > 0) {
                    newPasswordFeedback.textContent = 'New password does not meet requirements.';
                } else {
                    newPasswordFeedback.textContent = '';
                }

                // Feedback for confirm password
                if (nw !== cf && cf.length > 0) {
                    passwordFeedback.textContent = 'Passwords do not match.';
                } else {
                    passwordFeedback.textContent = '';
                }

                // Feedback for new password being same as current
                if (nw === cur && nw.length > 0) {
                    newPasswordFeedback.textContent = 'New password must be different from current password.';
                }
            }

            // Attach input listeners to all relevant fields
            [currentInput, newInput, confirmInput].forEach(input =>
                input.addEventListener('input', validatePasswords)
            );
            // Also attach to OTP boxes, as filling them enables the button in step 1
            boxes.forEach(box => box.addEventListener('input', validatePasswords));


            async function sendOtp() {
                changePasswordBtn.disabled = true;
                changePasswordBtn.textContent = 'Sending OTP…';
                otpFeedback.textContent = ''; // Clear previous OTP feedback

                const cur = currentInput.value;
                const res = await fetch('/MyAccount/SendOtp', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ currentPassword: cur })
                });
                const data = await res.json();

                if (data.success) {
                    step = 1;
                    showOtpUI();
                    showToast('OTP sent. Check your email.', 'success');
                    changePasswordBtn.textContent = 'Verify OTP';
                } else {
                    otpFeedback.textContent = data.error || 'Could not send OTP.';
                    changePasswordBtn.textContent = 'Change Password';
                }
                changePasswordBtn.disabled = false;
                validatePasswords(); // Re-validate button state
            }

            async function verifyOtp() {
                const code = getOtpValue();
                if (!code || code.length < 6) {
                    otpFeedback.textContent = 'Please enter all digits.';
                    return;
                }

                changePasswordBtn.disabled = true;
                changePasswordBtn.textContent = 'Verifying…';
                otpFeedback.textContent = ''; // Clear previous OTP feedback

                const res = await fetch('/MyAccount/VerifyOtp', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ otp: code })
                });
                const data = await res.json();

                if (data.success) {
                    step = 2;
                    otpFeedback.textContent = '';
                    changePasswordBtn.textContent = 'Submit Password Change';
                    otpContainer.style.display = 'none';
                    showToast('OTP verified successfully!', 'success');
                } else {
                    otpFeedback.textContent = data.error || 'Invalid OTP.';
                    changePasswordBtn.textContent = 'Verify OTP';
                }
                changePasswordBtn.disabled = false;
                validatePasswords(); // Re-validate button state
            }

            async function submitChange() {
                changePasswordBtn.disabled = true;
                changePasswordBtn.textContent = 'Changing…';
                otpFeedback.textContent = ''; // Clear previous OTP feedback

                const payload = new URLSearchParams(new FormData(form));
                payload.append('otp', getOtpValue()); // Ensure OTP is included in the final submission

                const res = await fetch('/MyAccount/ChangePassword', {
                    method: 'POST',
                    body: payload
                });
                const data = await res.json();

                if (data.success) {
                    window.location.href = '/Account/Login'; // Redirect on success
                } else {
                    // Display error, potentially re-show OTP if needed
                    otpFeedback.textContent = data.error || 'Failed to change password.';
                    changePasswordBtn.textContent = 'Submit Password Change';
                    changePasswordBtn.disabled = false;
                }
                validatePasswords(); // Re-validate button state
            }

            changePasswordBtn.addEventListener('click', () => {
                if (step === 0) {
                    sendOtp();
                } else if (step === 1) {
                    verifyOtp();
                } else if (step === 2) {
                    submitChange();
                }
            });

            // Helper function to show toast notifications
            function showToast(message, type = 'success') {
                const toast = document.getElementById('otpToast');
                const toastBody = toast.querySelector('.toast-body');
                toastBody.textContent = message;

                // Reset classes and apply new type
                toast.classList.remove('text-bg-success', 'text-bg-danger', 'text-bg-warning');
                if (type === 'success') toast.classList.add('text-bg-success');
                else if (type === 'error') toast.classList.add('text-bg-danger');
                else if (type === 'warning') toast.classList.add('text-bg-warning');

                toast.style.display = 'block';
                setTimeout(() => { toast.style.display = 'none'; }, 4000);
            }

            // Initial validation on page load
            validatePasswords();
        });
    </script>
}

<partial name="_ToastMessages" />