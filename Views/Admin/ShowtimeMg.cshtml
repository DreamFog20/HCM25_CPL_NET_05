@model MovieTheater.ViewModels.ShowtimeManagementViewModel

<h2 class="text-center">Showtime List</h2>

<div class="rounded">
    <div class="d-flex justify-content-center gap-3 mb-2">
        <select id="dateFilter" class="form-select w-auto">
            <option value="">All dates</option>
            @foreach (var date in Model.AvailableDates)
            {
                if (date.Date == Model.SelectedDate.Date)
                {
                    <option value="@date.ToString("dd/MM/yyyy")" selected="selected">
                        @date.ToString("dd MMM ddd")
                    </option>
                }
                else
                {
                    <option value="@date.ToString("dd/MM/yyyy")">
                        @date.ToString("dd MMM ddd")
                    </option>
                }
            }
        </select>

        <select id="scheduleFilter" class="form-select w-auto">
            @if (Model.AvailableSchedules == null || !Model.AvailableSchedules.Any())
            {
                <option value="">No schedules available</option>
            }
            else
            {
                <option value="">All times</option>
                @foreach (var schedule in Model.AvailableSchedules)
                {
                    <option value="@schedule.ScheduleId">@schedule.ScheduleTime</option>
                }
            }
        </select>
    </div>
</div>

<div class="rounded">
    @if (Model.MovieShows == null || !Model.MovieShows.Any())
    {
        <div class="alert alert-warning text-center">No showtime</div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-bordered table-striped">
                <thead class="table-dark">
                    <tr class="text-center">
                        <th width="500">Movie Name</th>
                        <th width="200">Date</th>
                        <th width="200">
                            Time
                            <button class="btn btn-sm btn-link p-0 ms-1" onclick="sortTime('asc')">
                                <i class="bi bi-arrow-up"></i>
                            </button>
                            <button class="btn btn-sm btn-link p-0" onclick="sortTime('desc')">
                                <i class="bi bi-arrow-down"></i>
                            </button>
                        </th>
                        <th width="200">Screen</th>
                        <th width="200">Actions</th>
                    </tr>
                </thead>
                <tbody id="showtimeTableBody">
                    @foreach (var show in Model.MovieShows)
                    {
                        <tr class="showtime-row" 
                            data-date="@show.ShowDate.ToString("dd/MM/yyyy")"
                            data-schedule="@show.ScheduleId"
                            data-time="@show.Schedule?.ScheduleTime">
                            <td>@show.Movie?.MovieNameEnglish</td>
                            <td class="text-center">@show.ShowDate.ToString("dd MMM yyyy")</td>
                            <td class="text-center">
                                @{
                                    var start = show.Schedule?.ScheduleTime;
                                    var duration = show.Movie?.Duration ?? 0;
                                    string timeDisplay = "";
                                    if (start != null && duration > 0)
                                    {
                                        var end = start.Value.AddMinutes(duration);
                                        timeDisplay = $"[{start:HH\\:mm} ~ {end:HH\\:mm}]";
                                    }
                                    else if (start != null)
                                    {
                                        timeDisplay = $"[{start:HH\\:mm}]";
                                    }
                                    @timeDisplay
                                }
                            </td>
                            <td class="text-center">@show.CinemaRoom?.CinemaRoomName</td>
                            <td class="text-center">
                                <button class="btn btn-sm btn-primary">View Showroom</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        
        <div class="d-flex justify-content-center mt-3">
            <nav aria-label="Page navigation">
                <ul class="pagination" id="pagination">
                    <!-- Pagination will be dynamically generated here -->
                </ul>
            </nav>
        </div>
    }
</div>

<script>
    const SHOWTIME_ITEMS_PER_PAGE = 7;
    let showtimeCurrentPage = 1;
    let showtimeFilteredRows = [];

    function initializeShowtimePagination() {
        const rows = document.querySelectorAll('.showtime-row');
        showtimeFilteredRows = Array.from(rows);
        displayShowtimePage(showtimeCurrentPage);
        updateShowtimePagination();
    }

    function filterShowtimes() {
        const selectedDate = document.getElementById('dateFilter').value;
        const selectedSchedule = document.getElementById('scheduleFilter').value;
        const rows = document.querySelectorAll('.showtime-row');
        
        showtimeFilteredRows = Array.from(rows).filter(row => {
            const rowDate = row.dataset.date;
            const rowSchedule = row.dataset.schedule;
            
            const dateMatch = !selectedDate || rowDate === selectedDate;
            const scheduleMatch = !selectedSchedule || rowSchedule === selectedSchedule;
            
            return dateMatch && scheduleMatch;
        });

        showtimeCurrentPage = 1;
        displayShowtimePage(showtimeCurrentPage);
        updateShowtimePagination();
    }

    function displayShowtimePage(page) {
        const startIndex = (page - 1) * SHOWTIME_ITEMS_PER_PAGE;
        const endIndex = startIndex + SHOWTIME_ITEMS_PER_PAGE;
        const rows = document.querySelectorAll('.showtime-row');
        
        // Hide all rows first
        rows.forEach(row => row.style.display = 'none');
        
        // Show only the rows for the current page
        showtimeFilteredRows.slice(startIndex, endIndex).forEach(row => row.style.display = '');
    }

    function updateShowtimePagination() {
        const totalPages = Math.ceil(showtimeFilteredRows.length / SHOWTIME_ITEMS_PER_PAGE);
        const pagination = document.getElementById('pagination');
        pagination.innerHTML = '';

        // Previous button
        const prevLi = document.createElement('li');
        prevLi.className = `page-item ${showtimeCurrentPage === 1 ? 'disabled' : ''}`;
        prevLi.innerHTML = `<a class="page-link" href="#" onclick="changeShowtimePage(${showtimeCurrentPage - 1})">Previous</a>`;
        pagination.appendChild(prevLi);

        // Page numbers
        for (let i = 1; i <= totalPages; i++) {
            const li = document.createElement('li');
            li.className = `page-item ${showtimeCurrentPage === i ? 'active' : ''}`;
            li.innerHTML = `<a class="page-link" href="#" onclick="changeShowtimePage(${i})">${i}</a>`;
            pagination.appendChild(li);
        }

        // Next button
        const nextLi = document.createElement('li');
        nextLi.className = `page-item ${showtimeCurrentPage === totalPages ? 'disabled' : ''}`;
        nextLi.innerHTML = `<a class="page-link" href="#" onclick="changeShowtimePage(${showtimeCurrentPage + 1})">Next</a>`;
        pagination.appendChild(nextLi);
    }

    function changeShowtimePage(page) {
        if (page < 1 || page > Math.ceil(showtimeFilteredRows.length / SHOWTIME_ITEMS_PER_PAGE)) return;
        showtimeCurrentPage = page;
        displayShowtimePage(showtimeCurrentPage);
        updateShowtimePagination();
    }

    function sortTime(direction) {
        const tbody = document.getElementById('showtimeTableBody');
        const rows = Array.from(tbody.getElementsByClassName('showtime-row'));

        rows.sort((a, b) => {
            const timeA = a.dataset.time || '';
            const timeB = b.dataset.time || '';
            
            if (direction === 'asc') {
                return timeA.localeCompare(timeB);
            } else {
                return timeB.localeCompare(timeA);
            }
        });

        // Reorder the rows in the table
        rows.forEach(row => tbody.appendChild(row));
        
        // Update filtered rows and pagination
        showtimeFilteredRows = rows;
        showtimeCurrentPage = 1;
        displayShowtimePage(showtimeCurrentPage);
        updateShowtimePagination();
    }

    // Initialize pagination when the content is loaded
    $(document).ready(function() {
        initializeShowtimePagination();
        
        // Add event listeners for filters
        $('#dateFilter, #scheduleFilter').on('change', function() {
            filterShowtimes();
        });
    });

    // Re-initialize pagination when the tab content is loaded
    $(document).on('showtimeTabLoaded', function() {
        // Small delay to ensure DOM is ready
        setTimeout(function() {
            initializeShowtimePagination();
            
            // Re-attach event listeners for filters
            $('#dateFilter, #scheduleFilter').off('change').on('change', function() {
                filterShowtimes();
            });
        }, 100);
    });
</script>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">