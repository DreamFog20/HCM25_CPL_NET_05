@model MovieTheater.ViewModels.SeatSelectionViewModel

@{
    ViewData["Title"] = "Select Seats";
}

@* Add Return Button at the top *@
@if (!string.IsNullOrEmpty(Model.ReturnUrl))
{
    <div class="text-start p-3">
        <a href="@Model.ReturnUrl" class="btn btn-secondary">&larr; Return</a>
    </div>
}

<h2 class="text-center mb-4">SELECT SEATS</h2>

<link rel="stylesheet" href="~/css/seat.css" asp-append-version="true" />

<div class="container mt-4">

    <div class="row mb-4 align-items-center">
        <div class="col-md-4">
             <div class="form-group row align-items-center">
                <label for="seatQuantity" class="col-auto col-form-label">Number of Seats:</label>
                <div class="col-sm-4">
                    <select id="seatQuantity" class="form-select form-select-sm">
                        @for (int i = 0; i <= 8; i++)
                        {
                            <option value="@i">@i</option>
                        }
                    </select>
                </div>
            </div>
             @* Container for message to prevent layout shift *@
             <div style="min-height: 1.5em;"> @* Adjust min-height as needed based on message size *@
                 <div id="seatMessage" class="mt-2 text-danger"></div>
             </div>
        </div>
         <div class="col-md-8 text-end">
         </div>
    </div>

    @* Add border around seat container and legends *@@* Start of bordered section *@
    <div class="seat-layout-bordered-area" style="border: 1px solid #ccc; padding: 20px; margin-bottom: 20px;">

        <div class="screen-label text-center mb-4">
            Screen
        </div>

        <div class="seat-container">
            <table class="table table-bordered text-center">
                <tbody>
                    @for (int row = 1; row <= Model.SeatLength; row++)
                    {
                        <tr>
                            @for (int col = 1; col <= Model.SeatWidth; col++)
                            {
                                var seat = Model.Seats.FirstOrDefault(s => s.SeatRow == row && s.SeatColumn == col.ToString());
                                var isOccupied = seat?.SeatStatusId == 2;
                                var seatType = Model.SeatTypes.FirstOrDefault(st => st.SeatTypeId == seat?.SeatTypeId);
                                var seatStyle = $"background-color: {(isOccupied ? "#808080" : seatType?.ColorHex ?? "#d3d3d3")};";

                                if (seat != null)
                                {
                                    <td style="@seatStyle" 
                                        data-seat-id="@seat.SeatId"
                                        data-seat-name="@seat.SeatName"
                                        data-seat-type="@seat?.SeatTypeId"
                                        @(isOccupied ? "disabled" : "")
                                         onclick="@(isOccupied ? "" : "selectSeat(this)")">
                                        <span class="material-icons">
                                            chair
                                        </span>
                                    </td>
                                }
                                else
                                {
                                    <td class="empty-seat"></td>
                                }
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        @* Seat Legend - Updated to colored squares and text *@
        <div class="d-flex flex-wrap gap-4 mb-4 justify-content-center">
            @foreach (var type in Model.SeatTypes)
            {
                <div class="d-flex align-items-center me-3">
                    <span style="display: inline-block; width: 20px; height: 20px; background-color: @type.ColorHex; margin-right: 5px; border-radius: 3px;"></span>
                    <span>@type.TypeName</span>
                </div>
            }
            @* Add Sold legend *@
             <div class="d-flex align-items-center me-3">
                <span style="display: inline-block; width: 20px; height: 20px; background-color: #808080; margin-right: 5px; border-radius: 3px;"></span>
                <span>Sold</span>
            </div>
            @* Add Selected legend *@
             <div class="d-flex align-items-center me-3">
                <span style="display: inline-block; width: 20px; height: 20px; background-color: #c3e6cb; margin-right: 5px; border-radius: 3px;"></span> @* Using a light green color for the selected legend box *@
                <span>Selected</span>
            </div>
        </div>

    </div>@* End of bordered section *@@* Add Showime details below the bordered area *@
    <div class="showtime-details-and-selection mt-4 p-3 bg-light rounded">
        @* Movie Details - New Layout *@
        <h4 class="fw-bold">@Model.MovieName</h4>
        <p class="mb-1" style="color: orange;">@Model.ShowTime • @Model.ShowDate.ToString("dd MMM yyyy") • @Model.CinemaRoomName</p>

        <hr class="mt-3 mb-3" /> @* Add a horizontal line *@@* Selected Seats Display *@
        <p class="mt-4 mb-0"><strong>Selected Seats:</strong> <span id="selectedSeatNames"></span></p> @* Increased margin-top *@@* Selected Seats Display *@
    </div>

    <div class="row mt-4"> @* Added margin-top *@@* Add Continue button *@@* Updated to use text-end for right alignment *@
        <div class="col-md-12 text-end">
            <button id="continueBtn" class="btn btn-primary" disabled>Continue &rarr;</button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let selectedSeats = new Set();
        const maxSeats = 8; // Assuming max 8 seats based on your dropdown

        function selectSeat(clickedTd) {
            const seatId = clickedTd.getAttribute('data-seat-id');

            // Prevent selecting occupied seats
            if (clickedTd.classList.contains('occupied')) {
                return;
            }

            const quantity = parseInt($('#seatQuantity').val());

            if (clickedTd.classList.contains('selected-seat')) {
                // Deselect the seat
                clickedTd.classList.remove('selected-seat');
                selectedSeats.delete(seatId);
            } else {
                // Select the seat
                 if (quantity === 0) {
                    // Prevent selecting if quantity is 0
                    return;
                 }
                if (selectedSeats.size >= quantity) {
                    // Limit selection based on quantity dropdown
                    $('#seatMessage').text(`Please select only ${quantity} seat(s)`);
                    return;
                }
                clickedTd.classList.add('selected-seat');
                selectedSeats.add(seatId);
            }

            updateSeatMessage();
            updateContinueButton();
            updateSelectedSeatsDisplay(); // Update the displayed seat names
        }

        function updateSeatMessage() {
            const quantity = parseInt($('#seatQuantity').val());
            const selectedCount = selectedSeats.size;

            if (quantity === 0) {
                 $('#seatMessage').text('');
            } else if (selectedCount < quantity) {
                $('#seatMessage').text(`Please select ${quantity - selectedCount} more seat(s)`);
            } else if (selectedCount > quantity) {
                $('#seatMessage').text(`Please select only ${quantity} seat(s)`);
            } else {
                $('#seatMessage').text('');
            }
        }

        function updateContinueButton() {
            const quantity = parseInt($('#seatQuantity').val());
            // Enable button only if quantity > 0 and selected count matches quantity
            $('#continueBtn').prop('disabled', quantity > 0 && selectedSeats.size !== quantity);
        }

        // Handle change in the number of seats dropdown
        $('#seatQuantity').on('change', function() {
            // Clear selected seats and their visual indication
            selectedSeats.clear();
            $('.selected-seat').removeClass('selected-seat');
            // No need to remove 'selected' class from '.seat-cell' based on current HTML
            updateSeatMessage();
            updateContinueButton();
            updateSelectedSeatsDisplay(); // Update displayed seats when quantity changes
        });

        // Handle click on continue button (navigation to Ticket Information page)
        $('#continueBtn').on('click', function() {
            // Prevent navigation if button is disabled
            const quantity = parseInt($('#seatQuantity').val());
            if (quantity > 0 && selectedSeats.size !== quantity) return;

            const selectedSeatIds = Array.from(selectedSeats);
            const data = {
                movieId: '@Model.MovieId',
                showDate: '@Model.ShowDate.ToString("yyyy-MM-dd")',
                showTime: '@Model.ShowTime',
                selectedSeatIds: selectedSeatIds
            };

            // Build query string
            const params = new URLSearchParams();
            for (const key in data) {
                if (Array.isArray(data[key])) {
                    data[key].forEach(item => params.append(key, item));
                } else {
                    params.append(key, data[key]);
                }
            }

            // Navigate to the next page
            window.location.href = `/Ticket/Information?${params.toString()}`;
        });

        // Function to update the display of selected seat names
        function updateSelectedSeatsDisplay() {
            const selectedSeatNames = Array.from(selectedSeats).map(seatId => {
                const seatElement = $(`td[data-seat-id="${seatId}"]`);
                return seatElement.length ? seatElement.data('seat-name') : '';
            }).join(', ');
            $('#selectedSeatNames').text(selectedSeatNames);
        }

        // Removed the jQuery click handler here

        updateSeatMessage();
        updateContinueButton();
        updateSelectedSeatsDisplay();

    </script>
}