@model MovieTheater.ViewModels.MovieDetailViewModel
@using System.Security.Claims
@{
    ViewData["Title"] = "Movie Show Schedule";
    var userRole = User.FindFirst(ClaimTypes.Role)?.Value;
}
<link rel="stylesheet" href="~/css/schedule.css" asp-append-version="true" />

<div class="container schedule-form-container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        @if (userRole == "Admin")
        {
            <a asp-controller="Admin" asp-action="MainPage" asp-route-tab="MovieMg" class="btn btn-outline-secondary">
                &larr; Return
            </a>
        }
        else
        {
            <a asp-controller="Employee" asp-action="MainPage" asp-route-tab="MovieMg" class="btn btn-outline-secondary">
                &larr; Return
            </a>
        }
    </div>

    <h2 class="schedule-page-title mb-0 text-center" style="font-size: xx-large">Movie Schedule</h2>

    <div class="movie-info mb-4" style="font-size: large">
        <p class="text-muted mb-1">
            <span class="fw-bold">Movie ID:</span> @Model.MovieId
        </p>
        <p class="text-muted mb-1">
            <span class="fw-bold">Movie Name:</span> @Model.MovieNameEnglish
        </p>
         <p class="text-muted mb-1">
            <span class="fw-bold">Duration:</span> @Model.Duration minutes
        </p>
        <input type="hidden" id="movieDuration" value="@Model.Duration" />
         <p class="text-muted mb-1">
            <strong>Version: </strong>
            @foreach (var version in Model.AvailableVersions)
            {
                <label class="me-3">
                    <input type="radio"
                           name="SelectedVersionIds"
                           value="@version.VersionId"
                           @(Model.SelectedVersionIds.Contains(version.VersionId) ? "checked" : "")
                           class="version-radio" />
                    @version.VersionName
                </label>
            }
            <span asp-validation-for="SelectedVersionIds" class="text-danger"></span>
        </p>
    </div>

    <div class="schedule-form">
        <input type="hidden" id="movieId" value="@Model.MovieId" />
        <div id="validationSummary" class="text-danger"></div>

        <!-- Cinema Room Selection -->
        <div class="form-group mb-4">
            <label for="cinemaRoomSelect" class="section-title">Cinema Room</label>
            <select class="form-control" id="cinemaRoomSelect">
                <option value="">-- Select a Cinema Room --</option>
                @foreach (var room in Model.AvailableCinemaRooms)
                {
                    <option value="@room.CinemaRoomId">@room.CinemaRoomName</option>
                }
            </select>
            <span class="text-danger" id="cinemaRoomError"></span>
        </div>

        <!-- Show Dates -->
        <div class="form-group mb-4">
            <label class="section-title">Show Date</label>
            <select class="form-control" id="showDateSelect">
                <option value="">-- Select a Show Date --</option>
                @foreach (var showDate in Model.AvailableShowDates)
                {
                    <option value="@showDate.ToString("yyyy-MM-dd")">@showDate.ToString("dd/MM/yyyy")</option>
                }
            </select>
            <span class="text-danger" id="showDateError"></span>
        </div>

        <!-- Schedules -->
        <div class="form-group mb-4">
            <label class="section-title">Available Schedules</label>
            <div id="lastShowEndTime" class="text-muted" style="font-size: 0.9em; margin-bottom: 5px;"></div>
            <select class="form-control" id="scheduleSelect">
                @foreach (var schedule in Model.AvailableSchedules)
                {
                    <option value="@schedule.ScheduleId">@schedule.ScheduleTime</option>
                }
            </select>
            <span class="text-danger" id="scheduleError"></span>
        </div>

        <!-- Movie Show List -->
        <div class="form-group">
            <label class="section-title">Current Movie Shows</label>
            <div id="movieShowsContainer" class="mt-3 p-2 bg-light rounded border">
                <!-- Movie shows will be rendered here by JavaScript -->
            </div>

            <div class="text-center">
                <button type="button" class="btn btn-outline-primary mt-3 mb-3" id="addMovieShowBtn" disabled>
                    Add Movie Show
                </button>
            </div>
        </div>
        <div class="text-center">
            <button type="button" class="btn btn-primary mb-3" id="saveChangesBtn">
                Save Changes
            </button>
        </div>
    </div>
</div>

<partial name="_ToastMessages" />

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const cinemaRoomSelect = document.getElementById('cinemaRoomSelect');
        const showDateSelect = document.getElementById('showDateSelect');
        const scheduleSelect = document.getElementById('scheduleSelect');
        const addMovieShowBtn = document.getElementById('addMovieShowBtn');
        const movieShowsContainer = document.getElementById('movieShowsContainer');
        const saveChangesBtn = document.getElementById('saveChangesBtn');
        const movieId = document.getElementById('movieId').value;
        const movieDuration = parseInt(document.getElementById('movieDuration').value, 10);
        const cleaningTime = 15; // You can change this value as needed
        const lastShowEndTimeEl = document.getElementById('lastShowEndTime');
        
        let movieShowItems = @Html.Raw(Json.Serialize(Model.CurrentMovieShows.Select(show => new {
            dateId = show.ShowDate.ToString("yyyy-MM-dd"),
            dateText = show.ShowDate.ToString("dd/MM/yyyy"),
            roomId = show.CinemaRoomId,
            roomName = show.CinemaRoom?.CinemaRoomName ?? "N/A",
            scheduleId = show.ScheduleId,
            scheduleText = show.Schedule?.ScheduleTime?.ToString("HH:mm") ?? "N/A"
        })));

        async function updateAvailableSchedules() {
            const selectedRoom = cinemaRoomSelect.value;
            const selectedDate = showDateSelect.value;

            if (!selectedRoom || !selectedDate) {
                scheduleSelect.innerHTML = '<option value="">-- Select a Schedule --</option>';
                return;
            }

            try {
                const response = await fetch(`/Movie/GetAvailableScheduleTimes?cinemaRoomId=${selectedRoom}&showDate=${selectedDate}&movieDurationMinutes=${movieDuration}&cleaningTimeMinutes=${cleaningTime}`);
                if (!response.ok) {
                    throw new Error('Failed to fetch available schedule times');
                }
                const result = await response.json();
                const availableSchedules = result.schedules;
                
                scheduleSelect.innerHTML = '<option value="">-- Select a Schedule --</option>';
                availableSchedules.forEach(schedule => {
                    const option = document.createElement('option');
                    option.value = schedule.scheduleId;
                    option.textContent = schedule.scheduleTime;
                    scheduleSelect.appendChild(option);
                });

                if (result.lastShowEndTime && result.lastShowEndTime !== "N/A") {
                    let hintText = `This cinema is available at: ${result.lastShowEndTime} (+ 15 mins cleaning)`;
                    if (result.nextAvailableTime && result.nextAvailableTime !== "N/A"){
                        hintText += ` - Next available time: ${result.nextAvailableTime}`;
                    }
                    lastShowEndTimeEl.textContent = hintText;
                } else {
                    lastShowEndTimeEl.textContent = 'No shows scheduled for this room and date yet.';
                }
            } catch (error) {
                console.error('Error updating available schedules:', error);
                lastShowEndTimeEl.textContent = 'Error loading schedules.';
            }
        }

        function updateAddButtonState() {
            const hasRoom = cinemaRoomSelect.value !== '';
            const hasDate = showDateSelect.value !== '';
            const hasSchedule = scheduleSelect.value !== '';
            addMovieShowBtn.disabled = !(hasRoom && hasDate && hasSchedule);
        }

        cinemaRoomSelect.addEventListener('change', async function() {
            await updateAvailableSchedules();
            updateAddButtonState();
        });

        showDateSelect.addEventListener('change', async function() {
            await updateAvailableSchedules();
            updateAddButtonState();
        });

        scheduleSelect.addEventListener('change', updateAddButtonState);

        addMovieShowBtn.addEventListener('click', addMovieShow);

        renderMovieShows();

        function renderMovieShows() {
            movieShowsContainer.innerHTML = '';
            
            movieShowItems.sort((a, b) => {
                const dateComparison = a.dateId.localeCompare(b.dateId);
                if (dateComparison !== 0) return dateComparison;
                const roomComparison = a.roomName.localeCompare(b.roomName);
                if (roomComparison !== 0) return roomComparison;
                return a.scheduleText.localeCompare(b.scheduleText);
            });

            const indexedMovieShowItems = movieShowItems.map((item, index) => ({ ...item, originalIndex: index }));

            const groupedByDate = indexedMovieShowItems.reduce((acc, show) => {
                if (!acc[show.dateId]) {
                    acc[show.dateId] = [];
                }
                acc[show.dateId].push(show);
                return acc;
            }, {});

            Object.keys(groupedByDate).sort().forEach(dateId => {
                const showsForDate = groupedByDate[dateId];
                const dateText = new Date(dateId).toLocaleDateString('en-GB');

                const dateContainer = document.createElement('div');
                dateContainer.className = 'date-group mb-4 p-3 border rounded';
                
                const dateHeader = document.createElement('h5');
                dateHeader.className = 'date-header mb-3 border-bottom pb-2';
                dateHeader.textContent = `Date: ${dateText}`;
                dateContainer.appendChild(dateHeader);

                showsForDate.forEach(show => {
                    const showDiv = document.createElement('div');
                    showDiv.className = 'movie-show-entry alert alert-light d-flex justify-content-between align-items-center mb-2';
                    
                    let endTimeText = '';
                    if (show.scheduleText && show.scheduleText !== 'N/A' && movieDuration) {
                        const [hours, minutes] = show.scheduleText.split(':').map(Number);
                        const startTime = new Date();
                        startTime.setHours(hours, minutes, 0, 0);
                        
                        const endTime = new Date(startTime.getTime() + movieDuration * 60000);
                        
                        const endHours = endTime.getHours().toString().padStart(2, '0');
                        const endMinutes = endTime.getMinutes().toString().padStart(2, '0');
                        endTimeText = ` ~ ${endHours}:${endMinutes}`;
                    }

                    const contentDiv = document.createElement('div');
                    contentDiv.innerHTML = `
                        <span class="fw-bold me-2">Room:</span><span>${show.roomName}</span>
                        <span class="fw-bold ms-3 me-2">Time:</span><span>[${show.scheduleText}${endTimeText}]</span>
                    `;

                    const removeButton = document.createElement('button');
                    removeButton.type = 'button';
                    removeButton.className = 'btn btn-outline-danger btn-sm';
                    removeButton.innerHTML = 'Remove';
                    removeButton.onclick = function() {
                        removeMovieShow(show.originalIndex);
                    };

                    showDiv.appendChild(contentDiv);
                    showDiv.appendChild(removeButton);
                    dateContainer.appendChild(showDiv);
                });

                movieShowsContainer.appendChild(dateContainer);
            });
        }

        async function addMovieShow() {
            const selectedDateId = showDateSelect.value;
            const selectedDateText = showDateSelect.options[showDateSelect.selectedIndex].text;
            const selectedScheduleId = scheduleSelect.value;
            const selectedScheduleText = scheduleSelect.options[scheduleSelect.selectedIndex].text;

            const roomId = cinemaRoomSelect.value;
            const roomName = cinemaRoomSelect.options[cinemaRoomSelect.selectedIndex].text;

            const isDuplicate = movieShowItems.some(item =>
                item.dateId === selectedDateId &&
                item.scheduleId === selectedScheduleId &&
                item.roomId === roomId
            );

            if (isDuplicate) {
                alert('This movie show has already been added.');
                return;
            }

            const movieShowItem = {
                dateId: selectedDateId,
                dateText: selectedDateText,
                scheduleId: selectedScheduleId,
                scheduleText: selectedScheduleText,
                roomId: roomId,
                roomName: roomName
            };

            movieShowItems.push(movieShowItem);
            renderMovieShows();

            scheduleSelect.innerHTML = '<option value="">-- Select a Schedule --</option>';
            await updateAvailableSchedules(); 
            updateAddButtonState();
        }

        function removeMovieShow(index) {
            movieShowItems.splice(index, 1);
            renderMovieShows();
        }

        saveChangesBtn.addEventListener('click', async function() {
            if (movieShowItems.length === 0) {
                alert('Please add at least one movie show before saving.');
                return;
            }

            try {
                const deleteResponse = await fetch(`/Movie/DeleteAllMovieShows?movieId=${movieId}`, {
                    method: 'POST'
                });

                if (!deleteResponse.ok) {
                    throw new Error('Failed to clear existing movie shows');
                }

                for (const showItem of movieShowItems) {
                    const response = await fetch('/Movie/AddMovieShow', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            movieId: movieId,
                            showDate: showItem.dateId,
                            scheduleId: showItem.scheduleId,
                            cinemaRoomId: showItem.roomId
                        })
                    });

                    if (!response.ok) {
                        throw new Error(`Failed to add movie show for schedule ${showItem.scheduleText}`);
                    }
                }

                alert('Movie shows saved successfully!');
                window.location.reload();
            } catch (error) {
                console.error('Error saving movie shows:', error);
                alert('An error occurred while saving the movie shows. Please try again.');
            }
        });

        const versionRadios = document.querySelectorAll('.version-radio');
        versionRadios.forEach(radio => {
            radio.addEventListener('change', async function() {
                const versionId = this.value;
                const response = await fetch(`/Cinema/GetRoomsByVersion?versionId=${versionId}`);
                if (response.ok) {
                    const rooms = await response.json();
                    cinemaRoomSelect.innerHTML = '<option value="">-- Select a Cinema Room --</option>';
                    rooms.forEach(room => {
                        const option = document.createElement('option');
                        option.value = room.cinemaRoomId;
                        option.textContent = room.cinemaRoomName;
                        cinemaRoomSelect.appendChild(option);
                    });
                } else {
                    cinemaRoomSelect.innerHTML = '<option value="">-- No rooms available --</option>';
                }
            });
        });
    });
</script>
