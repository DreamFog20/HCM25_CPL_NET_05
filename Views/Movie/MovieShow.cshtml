@model MovieTheater.ViewModels.MovieDetailViewModel
@using System.Security.Claims
@{
    ViewData["Title"] = "Movie Show Schedule";
    var userRole = User.FindFirst(ClaimTypes.Role)?.Value;
}
<link rel="stylesheet" href="~/css/schedule.css" asp-append-version="true" />

<div class="container schedule-form-container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        @if (userRole == "Admin")
        {
            <a asp-controller="Admin" asp-action="MainPage" asp-route-tab="ScheduleMg" class="btn btn-outline-secondary">
                &larr; Return
            </a>
        }
        else
        {
            <a asp-controller="Employee" asp-action="MainPage" asp-route-tab="ScheduleMg" class="btn btn-outline-secondary">
                &larr; Return
            </a>
        }
    </div>

    <h2 class="schedule-page-title mb-0 text-center" style="font-size: xx-large">Movie Schedule</h2>

    <div class="movie-info mb-4" style="font-size: large">
        <p class="text-muted mb-1">
            <span class="fw-bold">Movie ID:</span> @Model.MovieId
        </p>
        <p class="text-muted mb-1">
            <span class="fw-bold">Movie Name:</span> @Model.MovieNameEnglish
        </p>
    </div>

    <div class="schedule-form">
        <input type="hidden" id="movieId" value="@Model.MovieId" />
        <div id="validationSummary" class="text-danger"></div>

        <!-- Cinema Room Selection -->
        <div class="form-group mb-4">
            <label for="cinemaRoomSelect" class="section-title">Cinema Room</label>
            <select class="form-control" id="cinemaRoomSelect">
                <option value="">-- Select a Cinema Room --</option>
                @foreach (var room in Model.AvailableCinemaRooms)
                {
                    <option value="@room.CinemaRoomId">@room.CinemaRoomName</option>
                }
            </select>
            <span class="text-danger" id="cinemaRoomError"></span>
        </div>

        <!-- Show Dates -->
        <div class="form-group mb-4">
            <label class="section-title">Show Date</label>
            <div class="d-flex flex-wrap gap-3 mt-2">
                @foreach (var showDate in Model.AvailableShowDates)
                {
                    <div class="form-check me-3">
                        <input class="form-check-input show-date-checkbox" type="radio" name="SelectedShowDateIds" value="@showDate.ShowDateId" id="showDate_@showDate.ShowDateId" />
                        <label class="form-check-label" for="showDate_@showDate.ShowDateId">
                            @(showDate.ShowDate1?.ToString("dd/MM/yyyy") ?? showDate.DateName)
                        </label>
                    </div>
                }
            </div>
            <span class="text-danger" id="showDateError"></span>
        </div>

        <!-- Schedules -->
        <div class="form-group mb-4">
            <label class="section-title">Available Schedules</label>
            <div id="scheduleContainer" class="d-flex flex-wrap gap-3 mt-2">
                @foreach (var schedule in Model.AvailableSchedules)
                {
                    <div class="form-check">
                        <input class="form-check-input schedule-checkbox" type="checkbox" name="SelectedScheduleIds" value="@schedule.ScheduleId" id="schedule_@schedule.ScheduleId" data-time="@schedule.ScheduleTime" />
                        <label class="form-check-label" for="schedule_@schedule.ScheduleId">
                            @schedule.ScheduleTime
                        </label>
                    </div>
                }
            </div>
            <span class="text-danger" id="scheduleError"></span>
            <div id="scheduleConflictWarning" class="text-danger mt-2" style="display: none;">
                Maximum 3 movies can be shown at the same time in the theater.
            </div>
        </div>

        <!-- Movie Show List -->
        <div class="form-group">
            <label class="section-title">Current Movie Shows</label>
            <div id="movieShowsContainer" class="mt-3 p-2 bg-light rounded border">
                <!-- Dynamic movie shows will appear here -->
            </div>

            <div class="text-center">
                <button type="button" class="btn btn-outline-primary mt-3 mb-3" id="addMovieShowBtn" disabled>
                    Add Movie Show
                </button>
            </div>
        </div>
        <div class="text-center">
            <button type="button" class="btn btn-primary mb-3" id="saveChangesBtn">
                Save Changes
            </button>
        </div>
    </div>
</div>

<partial name="_ToastMessages" />

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const cinemaRoomSelect = document.getElementById('cinemaRoomSelect');
        const showDateCheckboxes = document.querySelectorAll('.show-date-checkbox');
        const scheduleCheckboxes = document.querySelectorAll('.schedule-checkbox');
        const addMovieShowBtn = document.getElementById('addMovieShowBtn');
        const movieShowsContainer = document.getElementById('movieShowsContainer');
        const scheduleConflictWarning = document.getElementById('scheduleConflictWarning');
        const saveChangesBtn = document.getElementById('saveChangesBtn');
        const movieId = document.getElementById('movieId').value;
        console.log('Movie ID:', movieId); // Debug log

        let movieShows = [];

        function updateAddButtonState() {
            const hasRoom = cinemaRoomSelect.value !== '';
            const hasDate = Array.from(showDateCheckboxes).some(cb => cb.checked);
            const hasSchedule = Array.from(scheduleCheckboxes).some(cb => cb.checked);
            addMovieShowBtn.disabled = !(hasRoom && hasDate && hasSchedule);
        }

        async function loadExistingMovieShows() {
            try {
                console.log('Loading shows for movie:', movieId); // Debug log
                const response = await fetch(`/Movie/MovieShow/${movieId}`, {
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });
                if (!response.ok) {
                    throw new Error('Failed to fetch movie shows');
                }
                const existingShows = await response.json();
                console.log('Existing shows:', existingShows); // Debug log
                
                // Group shows by date and room
                const groupedShows = existingShows.reduce((acc, show) => {
                    const key = `${show.showDateId}_${show.cinemaRoomId}`;
                    if (!acc[key]) {
                        acc[key] = {
                            dateId: show.showDateId,
                            dateText: show.showDate,
                            roomId: show.cinemaRoomId,
                            roomName: show.cinemaRoomName,
                            schedules: []
                        };
                    }
                    acc[key].schedules.push({
                        id: show.scheduleId,
                        text: show.scheduleTime
                    });
                    return acc;
                }, {});

                console.log('Grouped shows:', groupedShows); // Debug log

                // Add each group to movieShows array and update UI
                for (const show of Object.values(groupedShows)) {
                    movieShows.push(show);
                    await updateMovieShowUI(show);
                }
            } catch (error) {
                console.error('Error loading existing movie shows:', error);
            }
        }

        // Load existing movie shows when page loads
        if (movieId) {
            loadExistingMovieShows();
        } else {
            console.error('No movie ID found!');
        }

        function checkScheduleConflicts() {
            const selectedSchedules = Array.from(scheduleCheckboxes)
                .filter(cb => cb.checked)
                .map(cb => cb.dataset.time);

            const scheduleGroups = {};
            selectedSchedules.forEach(time => {
                if (!scheduleGroups[time]) {
                    scheduleGroups[time] = 0;
                }
                scheduleGroups[time]++;
            });

            const hasConflict = Object.values(scheduleGroups).some(count => count > 3);
            scheduleConflictWarning.style.display = hasConflict ? 'block' : 'none';
            return hasConflict;
        }

        async function checkScheduleAvailability(showDateId, scheduleId, cinemaRoomId) {
            try {
                const response = await fetch(`/Movie/CheckScheduleAvailability?showDateId=${showDateId}&scheduleId=${scheduleId}&cinemaRoomId=${cinemaRoomId}`);
                const data = await response.json();
                return data.isAvailable;
            } catch (error) {
                console.error('Error checking schedule availability:', error);
                return false;
            }
        }

        async function updateMovieShowUI(movieShow) {
            // Find or create date container
            let dateContainer = document.querySelector(`.date-container[data-date="${movieShow.dateText}"]`);
            if (!dateContainer) {
                dateContainer = document.createElement('div');
                dateContainer.className = 'date-container mb-3';
                dateContainer.setAttribute('data-date', movieShow.dateText);
                movieShowsContainer.appendChild(dateContainer);
            }

            // Find existing show entry
            const existingShow = dateContainer.querySelector(`.movie-show-entry[data-room="${movieShow.roomId}"]`);
            
            if (existingShow) {
                // Update existing show
                const timesDiv = existingShow.querySelector('.times-container');
                
                // Get existing schedule IDs
                const existingScheduleIds = Array.from(existingShow.querySelectorAll('.time-slot'))
                    .map(span => span.getAttribute('data-schedule-id'));
                
                // Get existing hidden inputs
                const existingInputs = Array.from(existingShow.querySelectorAll('input[name="SelectedScheduleIds"]'))
                    .map(input => input.value);
                
                // Add only new schedules
                movieShow.schedules.forEach(schedule => {
                    if (!existingScheduleIds.includes(schedule.id)) {
                        const timeSpan = document.createElement('span');
                        timeSpan.className = 'time-slot me-2';
                        timeSpan.innerHTML = `[${schedule.text}]`;
                        timeSpan.setAttribute('data-schedule-id', schedule.id);
                        timesDiv.appendChild(timeSpan);

                        const scheduleInput = document.createElement('input');
                        scheduleInput.type = 'hidden';
                        scheduleInput.name = 'SelectedScheduleIds';
                        scheduleInput.value = schedule.id;
                        existingShow.appendChild(scheduleInput);
                    }
                });

                // Sort all time slots
                const timeSlots = Array.from(timesDiv.querySelectorAll('.time-slot'));
                timeSlots.sort((a, b) => {
                    const timeA = a.textContent.replace(/[\[\]]/g, '');
                    const timeB = b.textContent.replace(/[\[\]]/g, '');
                    return timeA.localeCompare(timeB);
                });
                
                // Reorder time slots in the DOM
                timeSlots.forEach(slot => timesDiv.appendChild(slot));
            } else {
                // Create new show entry
                const showDiv = document.createElement('div');
                showDiv.className = 'movie-show-entry alert alert-info d-flex justify-content-between align-items-center mb-2';
                showDiv.setAttribute('data-room', movieShow.roomId);
                showDiv.setAttribute('data-date-id', movieShow.dateId);
                
                const contentDiv = document.createElement('div');
                contentDiv.className = 'd-flex flex-column';
                contentDiv.innerHTML = `
                    <div class="d-flex align-items-center mb-1">
                        <span class="fw-bold me-2">Date:</span>
                        <span>${movieShow.dateText}</span>
                    </div>
                    <div class="d-flex align-items-center">
                        <span class="fw-bold me-2">Room:</span>
                        <span>${movieShow.roomName}</span>
                    </div>
                `;
                
                const timesContainer = document.createElement('div');
                timesContainer.className = 'times-container mt-2';
                timesContainer.innerHTML = '<span class="fw-bold">Time:</span> ';
                
                // Sort schedules by time
                const sortedSchedules = movieShow.schedules.sort((a, b) => a.text.localeCompare(b.text));
                
                sortedSchedules.forEach(schedule => {
                    const timeSpan = document.createElement('span');
                    timeSpan.className = 'time-slot me-2';
                    timeSpan.innerHTML = `[${schedule.text}]`;
                    timeSpan.setAttribute('data-schedule-id', schedule.id);
                    timesContainer.appendChild(timeSpan);
                });
                
                const removeButton = document.createElement('button');
                removeButton.type = 'button';
                removeButton.className = 'btn btn-outline-danger btn-sm ms-3';
                removeButton.innerHTML = 'Remove';
                removeButton.onclick = function() {
                    removeMovieShow(this, movieShow.dateId, movieShow.roomId, movieShow.dateText);
                };
                
                contentDiv.appendChild(timesContainer);
                showDiv.appendChild(contentDiv);
                showDiv.appendChild(removeButton);
                dateContainer.appendChild(showDiv);

                // Add hidden inputs
                const dateInput = document.createElement('input');
                dateInput.type = 'hidden';
                dateInput.name = 'SelectedShowDateIds';
                dateInput.value = movieShow.dateId;
                showDiv.appendChild(dateInput);

                sortedSchedules.forEach(schedule => {
                    const scheduleInput = document.createElement('input');
                    scheduleInput.type = 'hidden';
                    scheduleInput.name = 'SelectedScheduleIds';
                    scheduleInput.value = schedule.id;
                    showDiv.appendChild(scheduleInput);
                });
            }
        }

        async function addMovieShow() {
            if (checkScheduleConflicts()) {
                return;
            }

            const selectedDates = Array.from(showDateCheckboxes)
                .filter(cb => cb.checked)
                .map(cb => ({
                    id: cb.value,
                    text: cb.nextElementSibling.textContent.trim()
                }));

            const selectedSchedules = Array.from(scheduleCheckboxes)
                .filter(cb => cb.checked)
                .map(cb => ({
                    id: cb.value,
                    text: cb.nextElementSibling.textContent.trim()
                }));

            const roomId = cinemaRoomSelect.value;
            const roomName = cinemaRoomSelect.options[cinemaRoomSelect.selectedIndex].text;

            // Check availability for all combinations first
            for (const date of selectedDates) {
                for (const schedule of selectedSchedules) {
                    const isAvailable = await checkScheduleAvailability(date.id, schedule.id, roomId);
                    if (!isAvailable) {
                        alert(`Schedule conflict detected: ${date.text} at ${schedule.text} in ${roomName} is already booked.`);
                        return;
                    }
                }
            }

            // Group by date and room
            for (const date of selectedDates) {
                const movieShow = {
                    dateId: date.id,
                    dateText: date.text,
                    schedules: selectedSchedules,
                    roomId: roomId,
                    roomName: roomName
                };

                // Find existing show for this date and room
                const existingShowIndex = movieShows.findIndex(ms => 
                    ms.dateId === movieShow.dateId && ms.roomId === movieShow.roomId
                );

                if (existingShowIndex !== -1) {
                    // Merge new schedules with existing ones
                    const existingShow = movieShows[existingShowIndex];
                    const allSchedules = [...existingShow.schedules, ...movieShow.schedules];
                    
                    // Remove duplicates and sort by time
                    existingShow.schedules = allSchedules.filter((schedule, index, self) =>
                        index === self.findIndex(s => s.id === schedule.id)
                    ).sort((a, b) => a.text.localeCompare(b.text));
                } else {
                    // Add new show
                    movieShows.push(movieShow);
                }

                // Update UI
                await updateMovieShowUI(movieShow);
            }

            // Clear selections
            showDateCheckboxes.forEach(cb => cb.checked = false);
            scheduleCheckboxes.forEach(cb => cb.checked = false);
            updateAddButtonState();
        }

        async function createMovieShowImmediately(movieShow) {
            try {
                for (const schedule of movieShow.schedules) {
                    const response = await fetch('/Movie/AddMovieShow', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            movieId: '@Model.MovieId',
                            showDateId: movieShow.dateId,
                            scheduleId: schedule.id,
                            cinemaRoomId: movieShow.roomId
                        })
                    });

                    if (!response.ok) {
                        throw new Error(`Failed to add movie show for schedule ${schedule.text}`);
                    }
                }
                return true;
            } catch (error) {
                console.error('Error adding movie show:', error);
                return false;
            }
        }

        window.removeMovieShow = function(button, dateId, roomId, dateText) {
            const showDiv = button.closest('.movie-show-entry');
            const dateContainer = showDiv.closest('.date-container');
            
            showDiv.remove();
            
            if (dateContainer && dateContainer.querySelectorAll('.movie-show-entry').length === 0) {
                dateContainer.remove();
            }
            
            movieShows = movieShows.filter(ms => 
                !(ms.dateId === dateId && ms.roomId === roomId)
            );
            
            checkScheduleConflicts();
        };

        saveChangesBtn.addEventListener('click', async function() {
            if (movieShows.length === 0) {
                alert('Please add at least one movie show before saving.');
                return;
            }

            try {
                // First delete all existing movie shows for this movie
                const deleteResponse = await fetch(`/Movie/DeleteAllMovieShows?movieId=${movieId}`, {
                    method: 'POST'
                });

                if (!deleteResponse.ok) {
                    throw new Error('Failed to clear existing movie shows');
                }

                // Then add all new movie shows
                for (const movieShow of movieShows) {
                    for (const schedule of movieShow.schedules) {
                        const response = await fetch('/Movie/AddMovieShow', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                movieId: movieId,
                                showDateId: movieShow.dateId,
                                scheduleId: schedule.id,
                                cinemaRoomId: movieShow.roomId
                            })
                        });

                        if (!response.ok) {
                            throw new Error(`Failed to add movie show for schedule ${schedule.text}`);
                        }
                    }
                }

                // If all successful, redirect to the appropriate page
                const userRole = '@userRole';
                if (userRole === 'Admin') {
                    window.location.href = '/Admin/MainPage?tab=ScheduleMg';
                } else {
                    window.location.href = '/Employee/MainPage?tab=ScheduleMg';
                }
            } catch (error) {
                console.error('Error saving movie shows:', error);
                alert('An error occurred while saving the movie shows. Please try again.');
            }
        });

        cinemaRoomSelect.addEventListener('change', updateAddButtonState);
        showDateCheckboxes.forEach(cb => cb.addEventListener('change', updateAddButtonState));
        scheduleCheckboxes.forEach(cb => cb.addEventListener('change', updateAddButtonState));
        addMovieShowBtn.addEventListener('click', addMovieShow);
    });
</script>
