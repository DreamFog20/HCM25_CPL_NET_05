@model MovieTheater.ViewModels.MovieDetailViewModel

@{
	ViewData["Title"] = "Movie Detail";
	var isAuthenticated = User.Identity.IsAuthenticated;
}

<link rel="stylesheet" href="~/css/movieedit.css" asp-append-version="true" />

<div class="signup-wrapper">

	<div class="signup-card">
		<a asp-controller="Movie" asp-action="MovieList" class="btn btn-secondary">
			&larr; Return
		</a>

		<h2 class="signup-title">Movie Detail</h2>

		<div class="row">
			<!-- Left Column: Images -->
			<div class="col mt-2">
				<img src="@Url.Content(Model.LargeImage)" alt="@Model.MovieNameEnglish" width="350" height="400">
			</div>

			<!-- Right Column: Movie Details -->
			<div class="col-md-6">
				<div class="form-group mb-3">
					<div><strong>Movie Name (EN):</strong> @Model.MovieNameEnglish</div>
				</div>

				<div class="form-group mb-3">
					<div><strong>Movie Name (VN):</strong> @Model.MovieNameVn</div>
				</div>

				<div class="row mb-3">
					<div class="col">
						<div><strong>From Date:</strong> @Model.FromDate?.ToString()</div>

					</div>
					<div class="col">
						<div><strong>To Date:</strong> @Model.ToDate?.ToString()</div>

					</div>
				</div>

				<div class="form-group mb-3">
					<div><strong>Actor:</strong> @Model.Actor</div>
				</div>

				<div class="form-group mb-3">
					<div><strong>Production Company:</strong> @Model.MovieProductionCompany</div>
				</div>

				<div class="form-group mb-3">
					<div><strong>Director:</strong> @Model.Director</div>
				</div>

				<div class="form-group mb-3">
					<div><strong>Duration (min):</strong> @Model.Duration</div>
				</div>

				<div class="form-group mb-3">
					<div>
						<strong>Version:</strong>
						@foreach (var version in Model.AvailableVersions)
						{
						<span class="badge bg-info me-1">@version.VersionName</span>
						}
					</div>
				</div>

				<div class="form-group mb-3">
					<div>
						<strong>Types:</strong>
						@foreach (var type in Model.AvailableTypes)
						{
							<span class="badge bg-secondary me-1">@type.TypeName</span>
						}
					</div>
				</div>				
			</div>
		</div>

		<div class="form-group">
			<strong>Description:</strong>
			<div style="white-space: pre-line;">@Model.Content</div>
		</div>

		<h2 class="signup-title">Movie Schedule</h2>
		<div id="movieShowsContainer" class="mt-3 p-2 rounded">
			<!-- Dynamic movie shows will appear here -->
		</div>

		<h2 class="signup-title">Movie Trailer</h2>

		<div class="video-container mb-4">
			<iframe src="@Model.TrailerUrl" frameborder="0" allowfullscreen></iframe>
		</div>

		<div id="errorMessage" class="text-danger mb-3 mx-auto" style="width: 400px">
			@if (!isAuthenticated)
			{
				<div class="alert alert-warning mb-3 text-center" role="alert">
					Please log in to book your tickets.
				</div>
			}
		</div>

		<div class="text-center">
			<a asp-controller="Booking" id="bookBtn"
			   asp-action="TicketBooking"
			   asp-route-movieId="@Model.MovieId"
			   class="btn btn-primary px-4 py-2 rounded">
				Book a Ticket
			</a>
		</div>

	</div>
</div>

<script>
		document.getElementById('bookBtn').addEventListener('click', function(event) {
		var isAuthenticated = @User.Identity.IsAuthenticated.ToString().ToLower();
		if (!isAuthenticated) {
			event.preventDefault();  
			window.location.href = '@Url.Action("Login", "Account")';
		}
	});

	async function loadMovieShows() {
		try {
			const movieId = '@Model.MovieId';
			const response = await fetch(`/Movie/MovieShow/${movieId}`, {
				headers: {
					'X-Requested-With': 'XMLHttpRequest'
				}
			});
			
			if (!response.ok) throw new Error('Failed to fetch movie shows');

			const shows = await response.json();
			const container = document.getElementById('movieShowsContainer');
			container.innerHTML = ''; // Clear container

			// Group shows by date and version
			const groupedShows = shows.reduce((acc, show) => {
				const dateKey = show.showDate;
				if (!acc[dateKey]) {
					acc[dateKey] = {
						dateText: dateKey,
						versions: {}
					};
				}
				
				const versionKey = show.versionName || 'Unknown';
				if (!acc[dateKey].versions[versionKey]) {
					acc[dateKey].versions[versionKey] = new Set();
				}
				acc[dateKey].versions[versionKey].add(show.scheduleTime);
				return acc;
			}, {});

			const sortedGroups = Object.values(groupedShows).sort((a, b) =>
				new Date(a.dateText.split('/').reverse().join('-')) - new Date(b.dateText.split('/').reverse().join('-'))
			);

			if (sortedGroups.length === 0) {
				container.innerHTML = '<div class="p-3 text-center text-muted rounded">No shows scheduled yet.</div>';
				return;
			}

			sortedGroups.forEach(group => {
				const groupDiv = document.createElement('div');
				groupDiv.className = 'movie-show-date-group mb-4';

				const heading = document.createElement('h5');
				heading.className = 'text-primary fw-bold border-bottom pb-1 mb-3';
				heading.innerHTML = `Date: ${group.dateText}`;
				groupDiv.appendChild(heading);

				// Sort versions alphabetically
				const sortedVersions = Object.keys(group.versions).sort();
				
				sortedVersions.forEach(versionName => {
					const versionDiv = document.createElement('div');
					versionDiv.className = 'mb-3';

					const versionLabel = document.createElement('div');
					versionLabel.className = 'fw-bold text-secondary mb-2';
					versionLabel.innerHTML = versionName;
					versionDiv.appendChild(versionLabel);

					const timeContainer = document.createElement('div');
					timeContainer.className = 'd-flex flex-wrap gap-2';

					// Convert Set to Array and sort times
					const sortedTimes = Array.from(group.versions[versionName]).sort((a, b) => a.localeCompare(b));
					sortedTimes.forEach(time => {
						const timeBadge = document.createElement('span');
						timeBadge.className = 'badge bg-primary text-white px-3 py-2 rounded-pill shadow-sm';
						timeBadge.innerText = time;
						timeContainer.appendChild(timeBadge);
					});

					versionDiv.appendChild(timeContainer);
					groupDiv.appendChild(versionDiv);
				});

				container.appendChild(groupDiv);
			});
		} catch (error) {
			console.error('Error loading movie shows:', error);
			document.getElementById('movieShowsContainer').innerHTML = 
				'<div class="text-center text-danger">Error loading movie shows</div>';
		}
	}

	loadMovieShows();
</script>