@model MovieTheater.ViewModels.MovieDetailViewModel
@using System.Security.Claims

@{
    ViewData["Title"] = "Movie Detail";
    var isAuthenticated = User.Identity.IsAuthenticated;
}


<div class="container-fluid px-4 py-3" style="font-size: 20px">
    <div class="mb-3">
        <a asp-controller="Movie" asp-action="MovieList" class="btn btn-outline-secondary">
            &larr; Return
        </a>
    </div>

    <div class="row">
        <!-- Left Column: Movie Poster -->
        <div class="col-md-6 text-end">
            <img id="smallImagePreview" src="@Url.Content(Model.SmallImage)" alt="@Model.MovieNameEnglish" class="img-fluid rounded shadow-sm" style="width: 55%; object-fit: cover; margin-right: 5rem" />
        </div>

        <!-- Right Column: Movie Details -->
        <div class="col-md-6">
            <div class="movie-details" style="font-size: 20px">
                <!-- Title and Director -->
                <span class="mb-4" style="font-size: 60px; font-family: 'Segoe UI'; font-weight: bold">@Model.MovieNameEnglish</span>
                <h5 class="text-muted mb-4">
                    by @Html.Raw(string.Join(", ", Model.People?.Where(p => p.IsDirector == true).Select(d =>
                                        $"<a href='javascript:void(0);' class='person-link' " +
                                        $"data-name='{d.Name}' " +
                                        $"data-dob='{d.DateOfBirth?.ToString("yyyy-MM-dd") ?? ""}' " +
                                        $"data-nationality='{d.Nationality}' " +
                                        $"data-gender='{d.Gender}' " +
                                        $"data-description='{d.Description}' " +
                                        $"data-image='{Url.Content(d.Image)}'>" +
                                        $"<u>{d.Name}</u></a>") ?? new[] { "<u>Unknown Director</u>" }))
                </h5>

                <!-- Versions and Types -->
                <div class="mb-4">
                    <div class="d-flex flex-wrap gap-2">
                        @foreach (var version in Model.AvailableVersions)
                        {
                            <span class="badge bg-secondary" style="border-radius: 20px">@version.VersionName</span>
                        }
                        @foreach (var type in Model.AvailableTypes)
                        {
                            <span class="badge" style="border-radius: 20px; border: 1px solid black; color: black;">@type.TypeName</span>
                        }
                    </div>
                </div>

                <!-- Duration and Year -->
                <div class="mb-4">
                    <span class="text-muted">
                        @Model.Duration min â€¢ @(Model.FromDate?.Year ?? DateTime.Now.Year)
                    </span>
                </div>

                <!-- Actors Images -->
                @if (Model.People?.Any(p => p.IsDirector == false) == true)
                {
                    <div class="mb-4">
                        <div class="d-flex flex-wrap gap-3">
                            @foreach (var actor in Model.People.Where(p => p.IsDirector == false))
                            {
                                <div class="director-image-container text-center">
                                    <a href="javascript:void(0);" class="person-link"
                                       data-name="@actor.Name"
                                       data-dob="@(actor.DateOfBirth?.ToString("yyyy-MM-dd") ?? "")"
                                       data-nationality="@actor.Nationality"
                                       data-gender="@actor.Gender"
                                       data-description="@actor.Description"
                                       data-image="@actor.Image">
                                        <img src="@Url.Content(actor.Image)" alt="@actor.Name"
                                             class="rounded-circle shadow-sm"
                                             style="width: 60px; height: 60px; object-fit: cover;" />
                                    </a>
                                    <p class="small text-muted mt-2 mb-0">@actor.Name</p>
                                </div>
                            }
                        </div>
                    </div>
                }

                <!-- Description -->
                <div class="mb-4">
                    <p class="text-justify" style="line-height: 1.6; width: 80%">@Model.Content</p>
                </div>

                <div class="row mb-4 me-2" style="width: 80%">
                    <div class="col-md-6 text-end">
                        <a asp-controller="Booking" id="bookBtn"
                           asp-action="TicketBooking"
                           asp-route-movieId="@Model.MovieId"
                           class="btn btn-primary btn-lg" style="width: 200px; border-radius: 20px">
                            Book Tickets
                        </a>
                    </div>
                    <div class="col-md-6 text-start">
                        <button class="btn btn-outline-primary btn-lg" style="width: 200px; border-radius: 20px" data-bs-toggle="modal" data-bs-target="#trailerModal">
                            Watch Trailer
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Schedule -->
    <div class="mb-4" id="scheduleSection" style="margin-left: 15rem; margin-top: 3rem">
        <h2 class="mb-3">Schedule</h2>
        <div id="movieShowsContainer" class="schedule-container" ">
            <!-- Dynamic movie shows will appear here -->
        </div>
    </div>


    <!-- Booking Button -->
    @if (!isAuthenticated)
    {
        <div class="alert alert-warning mb-3" role="alert">
            Please log in to book your tickets.
        </div>
    }
</div>

<script>
        document.getElementById('bookBtn').addEventListener('click', function(event) {
        var isAuthenticated = @User.Identity.IsAuthenticated.ToString().ToLower();
        if (!isAuthenticated) {
            event.preventDefault();
            window.location.href = '@Url.Action("Login", "Account")';
        }
    });

    // Add event listeners for actor links
    document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('.person-link').forEach(function(link) {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                const actor = {
                    image: this.dataset.image || 'Unknown',
                    name: this.dataset.name || 'Unknown',
                    dateOfBirth: this.dataset.dob || '',
                    nationality: this.dataset.nationality || '',
                    gender: this.dataset.gender === 'True' ? true : this.dataset.gender === 'False' ? false : null,
                    description: this.dataset.description || ''
                };
                showActorModal(actor);
            });
        });
    });

    function showActorModal(actor) {
        const modalBody = document.getElementById('actorModalBody');

        let bodyHtml = `
        <div class="container-fluid">
                <div class="row g-3 align-items-center" style="margin-top: 0.1rem">
                  <!-- Left Column -->
              <div class="col-md-6 text-center">
                ${actor.image ? `
                  <img src="${actor.image}" alt="${actor.name}" class="rounded-circle shadow-sm" style="width: 200px; height: 200px; object-fit: cover;">
                ` : `
                  <div class="rounded-circle bg-light d-flex align-items-center justify-content-center shadow-sm" style="width: 200px; height: 200px;">
                    <i class="fas fa-user text-muted" style="font-size: 2rem;"></i>
                  </div>
                `}
              </div>

              <!-- Right Column -->
                <div class="col-md-6 d-flex flex-column justify-content-center">
                ${actor.name ? `<p><strong>Name:</strong> ${actor.name}</p>` : ''}
                ${actor.dateOfBirth ? `<p><strong>Born:</strong> ${actor.dateOfBirth}</p>` : ''}
                ${actor.nationality ? `<p><strong>Nationality:</strong> ${actor.nationality}</p>` : ''}
                ${actor.gender !== null ? `<p><strong>Gender:</strong> ${actor.gender ? 'Female' : 'Male'}</p>` : ''}
              </div>
            </div>

            ${actor.description ? `
              <div class="row mt-3">
                <div class="col-12">
                  <p>${actor.description}</p>
                </div>
              </div>
            ` : ''}
        </div>
    `   ;

        if (bodyHtml === '') bodyHtml = '<p class="text-muted">No information available.</p>';

        modalBody.innerHTML = bodyHtml;

        // Show the modal using Bootstrap
        const modal = new bootstrap.Modal(document.getElementById('actorModal'));
        modal.show();
    }

    async function loadMovieShows() {
        try {
            const movieId = '@Model.MovieId';
            const response = await fetch(`/Movie/MovieShow/${movieId}`, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });

            if (!response.ok) throw new Error('Failed to fetch movie shows');

            const shows = await response.json();
            const container = document.getElementById('movieShowsContainer');
            container.innerHTML = ''; // Clear container

            // Group shows by date and version
            const groupedShows = shows.reduce((acc, show) => {
                const dateKey = show.showDate;
                if (!acc[dateKey]) {
                    acc[dateKey] = {
                        dateText: dateKey,
                        versions: {}
                    };
                }

                const versionKey = show.versionName || 'Unknown';
                if (!acc[dateKey].versions[versionKey]) {
                    acc[dateKey].versions[versionKey] = new Set();
                }
                acc[dateKey].versions[versionKey].add(show.scheduleTime);
                return acc;
            }, {});

            const sortedGroups = Object.values(groupedShows).sort((a, b) =>
                new Date(a.dateText.split('/').reverse().join('-')) - new Date(b.dateText.split('/').reverse().join('-'))
            );
            const scheduleSection = document.getElementById('scheduleSection');
            if (sortedGroups.length === 0) {
                container.innerHTML = '<div class="text-muted">No shows scheduled yet.</div>';
                if (scheduleSection) {
                scheduleSection.style.display = 'none';
                }
                return;
            }
            if (scheduleSection) {
                 scheduleSection.style.display = 'block';
            }

            sortedGroups.forEach(group => {
                const groupDiv = document.createElement('div');
                groupDiv.className = 'schedule-date mb-4';

                const heading = document.createElement('h4');
                heading.className = 'text-muted mb-3 bg bg-info text-center';
                heading.innerHTML = group.dateText;
                heading.style = 'width: 150px; border-radius: 10px';
                groupDiv.appendChild(heading);

                // Sort versions alphabetically
                const sortedVersions = Object.keys(group.versions).sort();

                sortedVersions.forEach(versionName => {
                    const versionDiv = document.createElement('div');
                    versionDiv.className = 'mb-3';

                    const versionLabel = document.createElement('div');
                    versionLabel.className = 'medium text-black mb-2';
                    versionLabel.innerHTML = versionName;
                    versionDiv.appendChild(versionLabel);

                    const timeContainer = document.createElement('div');
                    timeContainer.className = 'd-flex flex-wrap gap-2';

                    // Convert Set to Array and sort times
                    const sortedTimes = Array.from(group.versions[versionName]).sort((a, b) => a.localeCompare(b));
                    sortedTimes.forEach(time => {
                        const timeBtn = document.createElement('button');
                        timeBtn.className = 'btn btn-outline-primary btn-sm';
                        timeBtn.innerText = time;
                        timeContainer.appendChild(timeBtn);
                    });

                    versionDiv.appendChild(timeContainer);
                    groupDiv.appendChild(versionDiv);
                });

                container.appendChild(groupDiv);
            });
        } catch (error) {
            console.error('Error loading movie shows:', error);
            document.getElementById('movieShowsContainer').innerHTML =
                '<div class="text-danger">Error loading movie shows</div>';
        }
    }

    loadMovieShows();
</script>

<div class="modal fade" id="trailerModal" tabindex="-1" aria-labelledby="trailerModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body" style="background-color: black">
                @if (!string.IsNullOrWhiteSpace(Model.TrailerUrl))
                {
                    <div class="ratio ratio-16x9">
                        <iframe src="@Model.TrailerUrl" frameborder="0" allowfullscreen></iframe>
                    </div>
                }
                else
                {
                    <div class="text-muted">Trailer not available.</div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Actor Info Modal -->
<div class="modal fade" id="actorModal" tabindex="-1" aria-labelledby="actorModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" style="border-radius: 20px">
            <div class="modal-body" id="actorModalBody">
                <!-- Actor details will be injected here -->
            </div>
        </div>
    </div>
</div>
