@{
    ViewBag.Title = "Advanced Gradient Color Picker Demo";
}

<link rel="stylesheet" href="~/css/gradient-color-picker.css" asp-append-version="true" />

<div class="gradient-flex">
    <div class="gradient-card">
        <fieldset class="gradient-fieldset">
            <legend class="gradient-legend">Gradient Options</legend>
            <ul class="gradient-list">
                <li class="gradient-list-item">
                    <label class="gradient-label" for="orientation">Orientation</label>
                    <select id="orientation" class="gradient-select">
                        <option value="linear">linear</option>
                        <option value="radial">radial</option>
                    </select>
                </li>
                <li class="gradient-list-item">
                    <label class="gradient-label" for="direction">Position</label>
                    <select id="direction" class="gradient-select">
                        <option value="to top">top</option>
                        <option value="to bottom">bottom</option>
                        <option value="to left">left</option>
                        <option value="to right">right</option>
                        <option value="135deg">135°</option>
                        <option value="90deg">90°</option>
                        <option value="45deg">45°</option>
                    </select>
                </li>
                <li class="gradient-list-item">
                    <div id="stops"></div>
                </li>
                <li class="gradient-list-item">
                    <button type="button" id="addStop">Add stop color</button>
                </li>
            </ul>
        </fieldset>
    </div>

    <div class="gradient-card">
        <fieldset class="gradient-fieldset">
            <legend class="gradient-legend">Preview</legend>
            <div id="preview"></div>
        </fieldset>
        <div style="margin-top:10px;">
            <label class="css-gradient-label" for="gradientString" style="margin-bottom:4px;">CSS Gradient String:</label>
            <input type="text" id="gradientString" readonly />
        </div>
    </div>
</div>

<script>
    let stops = [{ color: '#121FCF', pos: 23 }, { color: '#CF1512', pos: 100 }];
    function renderStops() {
        const container = document.getElementById('stops'); container.innerHTML = '';
        const sortedStops = [...stops].sort((a, b) => a.pos - b.pos);
        sortedStops.forEach((stop, i) => {
            const row = document.createElement('div'); row.className='stop-row';
            row.innerHTML = `
                <div class="stop-colors">
                  ${i!==0 && i!==sortedStops.length-1 ? `
                    <div class="stop-label-row">
                      <span class="color-label">Stop Color</span>
                      <button type="button" class="removeStop" data-idx="${stops.indexOf(stop)}" aria-label="Remove stop">✕</button>
                    </div>
                  ` : `<span class="color-label">${i===0?'Start Color':'End Color'}</span>`}
                  <div class="color-picker-wrapper">
                    <div class="color-picker-group">
                      <div class="color-swatch-wrapper">
                        <input type="color" value="${stop.color}" data-idx="${stops.indexOf(stop)}" class="native-color-input">
                        <button type="button" class="custom-color-swatch" aria-label="Pick color" style="background: ${stop.color};"></button>
                      </div>
                      <input type="text" value="${stop.color}" data-idx="${stops.indexOf(stop)}" class="form-control text-monospace">
                    </div>
                  </div>
                </div>
                <div class="stop-slider">
                  <span class="slider-label">${i===0?'Start Position:':i===sortedStops.length-1?'End Position:':'Position:'} <b>${stop.pos}%</b></span>
                  <input type="range" min="0" max="100" value="${stop.pos}" data-idx="${stops.indexOf(stop)}" class="gradient-slider">
                </div>
            `;
            container.appendChild(row);
        }); attachEvents();
    }
    function attachEvents() {
        document.querySelectorAll('.custom-color-swatch').forEach((btn, i) => {
          btn.addEventListener('click', function() {
            const colorInput = btn.parentElement.querySelector('input[type=color]');
            colorInput.click();
          });
          const colorInput = btn.parentElement.querySelector('input[type=color]');
          colorInput.addEventListener('input', function() {
            btn.style.background = colorInput.value;
            colorInput.closest('.color-picker-group').querySelector('input[type=text]').value = colorInput.value;
            stops[i].color = colorInput.value;
            updateGradient();
          });
        });
        document.querySelectorAll('.color-picker-group input[type=text]').forEach((el, i) => {
          el.oninput = e => {
            const v = e.target.value;
            if(/^#([0-9A-Fa-f]{3}){1,2}$/.test(v)){
              stops[e.target.dataset.idx].color = v;
              // Update the swatch and color input
              const group = el.closest('.color-picker-group');
              group.querySelector('.custom-color-swatch').style.background = v;
              group.querySelector('input[type=color]').value = v;
              updateGradient();
              renderStops();
            }
          };
        });
        document.querySelectorAll('.gradient-slider').forEach(el=>el.oninput=e=>{
            stops[e.target.dataset.idx].pos=+e.target.value;
            const label = e.target.closest('.stop-slider').querySelector('.slider-label b');
            if(label) label.innerText = stops[e.target.dataset.idx].pos + '%';
            updateGradient();
        });
        document.querySelectorAll('.removeStop').forEach(btn=>btn.onclick=e=>{stops.splice(e.target.dataset.idx,1); renderStops(); updateGradient();});
    }
    document.getElementById('addStop').onclick=()=>{const mid=Math.floor(stops.length/2); const prev=stops[mid-1]?.pos||0; const next=stops[mid]?.pos||100; stops.splice(mid,0,{color:'#FFFFFF',pos:Math.round((prev+next)/2)}); renderStops(); updateGradient();};
    document.getElementById('orientation').onchange=updateGradient; document.getElementById('direction').onchange=updateGradient;
    function updateGradient(){
        const sortedStops = [...stops].sort((a, b) => a.pos - b.pos);
        const orient = document.getElementById('orientation').value;
        let dir = document.getElementById('direction').value;
        if(orient==='radial'&& dir!=='circle') dir='circle';
        const s = sortedStops.map(s=>`${s.color} ${s.pos}%`).join(', ');
        const g = `${orient}-gradient(${dir}, ${s})`;
        document.getElementById('preview').style.background=g;
        document.getElementById('gradientString').value=g;
    }
    renderStops(); updateGradient();
</script>
