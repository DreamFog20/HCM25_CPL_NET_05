@model MovieTheater.ViewModels.SeatSelectionViewModel
@{
    ViewBag.CurrentStep = 2;
}

@Html.Partial("_BookingProgress")

<link rel="stylesheet" href="~/css/seat.css" asp-append-version="true" />
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">

@{
    var movieId = Model.MovieId;

    var date = Model.ShowDate;

    var time = Model.ShowTime;

    var bookedSeats = ViewBag.BookedSeats as List<int> ?? new List<int>();

    var returnUrl = Model.ReturnUrl ?? (movieId != null ? $"/Movie/Detail/{movieId}" : "/Admin");

    var seatTypes = Model.SeatTypes;

    var movieShow = ViewBag.MovieShow as MovieTheater.Models.MovieShow;

    var movieShowId = Model.MovieShowId.ToString();

    var isAdminSell = Context.Request.Query["isAdminSell"] == "true";

    string returnLink = isAdminSell

        ? Url.Action("Select", "Showtime", new { area = "Admin" })

        : Url.Action("TicketBooking", "Booking");

    var coupleSeatPairs = new Dictionary<int, int>();

    if (ViewBag.CoupleSeats != null)

    {

        foreach (var couple in (List<MovieTheater.Models.CoupleSeat>)ViewBag.CoupleSeats)

        {

            coupleSeatPairs[couple.FirstSeatId] = couple.SecondSeatId;

            coupleSeatPairs[couple.SecondSeatId] = couple.FirstSeatId;

        }

    }

    var isAuthenticated = User.Identity.IsAuthenticated;

    bool isCompactSeatMap = Model.SeatWidth > 9 || Model.SeatLength > 9;
}

<div class="cinema-container" @(isAuthenticated ? "" : "style='display:none;'")>
    <!-- Header Section -->
    <div class="cinema-header">
        <div class="header-content">
            <a href="@returnLink" class="back-btn">
                <span class="material-icons">arrow_back</span>
                <span>Back</span>
            </a>
            <h1 class="page-title">Select Your Seats</h1>
        </div>
    </div>

    <!-- Movie Info Card -->
    <div class="movie-info-card">
        <div class="movie-poster1">
            @if (!string.IsNullOrEmpty(Model.MoviePoster))
            {
                <img src="@Model.MoviePoster" alt="@Model.MovieName" />
            }
        </div>
        <div class="movie-details">
            <h2 class="movie-title">@Model.MovieName</h2>
            <p class="movie-description">@Model.MovieContent</p>
            <div class="movie-meta">
                <div class="meta-item">
                    <span class="meta-label">Director:</span>
                    <span class="meta-value">@Model.MovieDirector</span>
                </div>
                <div class="meta-item">
                    <span class="meta-label">Starring:</span>
                    <span class="meta-value">@Model.MovieActor</span>
                </div>
                <div class="meta-item">
                    <span class="meta-label">Genre:</span>
                    <span class="meta-value">@Model.MovieGenre</span>
                </div>
                <div class="meta-item">
                    <span class="meta-label">Duration:</span>
                    <span class="meta-value">@(Model.MovieDuration ?? 0) min</span>
                </div>
               
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="main-content" id="mainBookingArea">
        <div class="content-wrapper">
            <!-- Seat Selection Area -->
            <div class="seat-area">
                <div class="seat-selection-section" id="seatSelectionArea">
                    <!-- Screen -->
                    <div class="screen-container">
                        <div class="screen">
                            <span>SCREEN</span>
                        </div>
                    </div>

                    <!-- Seat Map -->
                    <div class="seat-map-container @(isCompactSeatMap ? "compact" : "")">
                        <div class="seat-grid">
                            @for (int row = 1; row <= Model.SeatLength; row++)

                            {
                                <div class="seat-row" data-row="@row">
                                    <div class="row-label">@((char)('A' + row - 1))</div>
                                    <div class="seats">
                                        @for (int col = 1; col <= Model.SeatWidth; col++)

                                        {

                                            var seat = Model.Seats.FirstOrDefault(s => s.SeatRow == row && s.SeatColumn == col.ToString());

                                            if (seat != null)

                                            {

                                                var seatType = seatTypes?.FirstOrDefault(st => st.SeatTypeId == seat.SeatTypeId);

                                                bool isDisabledType = seatType?.TypeName == "Disabled";

                                                bool isBooked = bookedSeats.Contains(seat.SeatId);

                                                var versionMulti = ViewBag.MovieShow?.Version?.Multi ?? 1m;

                                                // PricePercent is the actual price in thousands (e.g., 40 = 40,000 VND)
                                                var basePrice = seatType?.PricePercent ?? 0;

                                                var calculatedPrice = basePrice * versionMulti;

                                                if (isDisabledType)
                                                {
                                                    // Render placeholder để giữ nguyên vị trí
                                                    <div class="seat empty"></div>
                                                }
                                                else
                                                {
                                                    <div class="seat @(isBooked ? "booked" : "")"
                                                         data-seat-id="@seat.SeatId"
                                                         data-seat-name="@seat.SeatName"
                                                         data-seat-type="@seatType?.TypeName"
                                                         data-seat-price="@calculatedPrice"
                                                         data-base-price="@(basePrice )"
                                                         data-version-multi="@versionMulti"
                                                         data-seat-color="@(seatType?.ColorHex ?? "#cccbc8")"
                                                         style="background-color:@(seatType?.ColorHex ?? "#cccbc8")"
                                                         @(coupleSeatPairs.ContainsKey(seat.SeatId) ? "data-couple-seat=true" : "")
                                                         @(isBooked ? "" : "onclick=selectSeat(this)")>
                                                        <div class="seat-inner">
                                                            <span class="seat-number">@seat.SeatName</span>
                                                            @if (coupleSeatPairs.ContainsKey(seat.SeatId))
                                                            {
                                                                <span class="couple-indicator">❤️</span>
                                                            }
                                                        </div>
                                                    </div>
                                                }
                                                // Nếu là ghế Disabled thì không render gì cả
                                            }

                                            else

                                            {
                                                <div class="seat empty"></div>
                                            }

                                        }
                                    </div>
                                    <div class="row-label">@((char)('A' + row - 1))</div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Seat Legend -->
                    <div class="seat-legend">
                        @foreach (var type in seatTypes.Where(t => t.TypeName != "Disabled"))

                        {
                            <div class="legend-item">
                                <div class="legend-color" style="background-color: @(type.ColorHex ?? "#FFFFFF")"></div>
                                <span>@type.TypeName</span>
                            </div>
                        }
                        <div class="legend-item">
                            <div class="legend-color" style="background-color: #10b981"></div>
                            <span>Selected</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color" style="background-color: #cccbc8; filter: brightness(0.3) saturate(0.5); position: relative;">
                                <span style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); color: #dc2626; font-weight: bold; font-size: 0.8rem; text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);">✗</span>
                            </div>
                            <span>Booked</span>
                        </div>
                       
                        <div class="legend-item">
                            <div class="legend-color" style="background-color: #f59e42"></div>
                            <span>Being Held</span>
                        </div>
                    </div>
                </div>

                <!-- Food Selection Area -->
                <div class="food-selection-section" id="foodSelectionArea" style="display:none;">
                    <div class="section-header">
                        <h2>Choose Your Snacks</h2>
                        <button id="backToSeatBtn" class="back-to-seat-btn">
                            <span class="material-icons">arrow_back</span>
                            Back to Seats
                        </button>
                    </div>

                    <div class="food-grid">
                        @if (ViewBag.Foods != null)

                        {

                            foreach (var food in (List<MovieTheater.ViewModels.FoodViewModel>)ViewBag.Foods)

                            {
                                <div class="food-item" data-food-id="@food.FoodId">
                                    <div class="food-image">
                                        <img src="@food.Image" alt="@food.Name" />
                                    </div>
                                    <div class="food-info">
                                        <h3 class="food-name">@food.Name</h3>
                                        <p class="food-description">@food.Description</p>
                                        <div class="food-price">@food.Price.ToString("N0") VND</div>
                                        <div class="quantity-control">
                                            <button class="qty-btn minus" data-food-id="@food.FoodId">-</button>
                                            <input type="text" class="qty-input" data-food-id="@food.FoodId" value="0" readonly />
                                            <button class="qty-btn plus" data-food-id="@food.FoodId">+</button>
                                        </div>
                                    </div>
                                </div>
                            }

                        }
                    </div>
                </div>
            </div>

            <!-- Booking Summary Sidebar -->
            <div class="booking-sidebar">
                <div class="sidebar-content">
                    <!-- Show Info -->
                    <div class="show-info">
                        <div class="cinema-room">@Model.CinemaRoomName</div>
                        <div class="show-datetime">
                            <span class="show-date">@date.ToString("MMM dd, yyyy")</span>
                            <span class="show-time">@time</span>
                        </div>
                    </div>

                    <!-- Movie Title -->
                    <div class="sidebar-movie-title">@Model.MovieName</div>

                    <!-- Booking Summary -->
                    <div class="booking-summary" id="summarySeatBlock">
                        <div id="noSeatAlert" class="no-seat-alert">
                            <span class="material-icons">event_seat</span>
                            <p>Please select your seats</p>
                        </div>

                        <div id="seatInfo" class="seat-info" style="display:none;">
                            <div class="summary-item">
                                <span class="label">Seats:</span>
                                <span class="value" id="selectedSeatNames"></span>
                            </div>
                            <div class="summary-item">
                                <span class="label">Seat Total:</span>
                                <span class="value"><span id="totalPrice">0</span> VND</span>
                            </div>
                            <div class="summary-item">
                                <span class="label">Food Total:</span>
                                <span class="value"><span id="totalFoodPrice">0</span> VND</span>
                            </div>
                            <div class="food-list">
                                <span class="label">Selected Food:</span>
                                <ul id="selectedFoodList">
                                    <li class="no-food">No food selected</li>
                                </ul>
                            </div>
                            <div class="total-amount">
                                <span class="label">Total:</span>
                                <span class="amount" id="grandTotal">0 VND</span>
                            </div>
                            <div id="countdownTimer" class="countdown"></div>
                        </div>
                    </div>

                    <!-- Continue Button -->
                    @if (!string.IsNullOrEmpty(time))

                    {
                        <button id="bookButton" class="continue-btn" disabled>
                            <span class="btn-text">Continue</span>
                            <span class="material-icons">arrow_forward</span>
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Login Modal (if not authenticated) -->
@if (!isAuthenticated)

{
    <div class="login-modal-overlay">
        <div class="login-modal">
            <div class="modal-icon">
                <span class="material-icons">login</span>
            </div>
            <h3>Login Required</h3>
            <p>Please log in to select seats and book tickets.</p>
            <a href="@Url.Action("Login", "Account")" class="login-btn">
                <span class="material-icons">login</span>
                Go to Login
            </a>
        </div>
    </div>
}

<!-- Account In Use Modal -->
<div id="accountInUseModal" class="modal-overlay" style="display:none;">
    <div class="modal-content">
        <div class="modal-icon warning">
            <span class="material-icons">warning</span>
        </div>
        <h3>Account In Use</h3>
        <p>This account is currently being used to book tickets for this showtime on another device.</p>
        <div class="modal-actions">
            <a href="@Url.Action("Index", "Home")" class="btn secondary">
                <span class="material-icons">home</span>
                Home
            </a>
            <a href="@Url.Action("TicketBooking", "Booking")" class="btn primary">
                <span class="material-icons">refresh</span>
                Try Again
            </a>
        </div>
    </div>
</div>

<!-- Timeout Modal -->
<div id="timeoutModal" class="modal-overlay" style="display:none;">
    <div class="modal-content timeout-modal">
        <div class="modal-icon timeout">
            <span class="material-icons">timer_off</span>
        </div>
        <h3>Time Expired</h3>
        <p>Your seat selection time has expired. Please select your seats again.</p>
        <div class="modal-actions">
            <a href="https://localhost:7201/Booking/TicketBooking" class="btn primary">
                <span class="material-icons">refresh</span>
                Return to Booking
            </a>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // JavaScript code remains the same as your original implementation
        // Just update the CSS selectors to match the new structure

        let selectedSeats = new Set();
        let countdownTimer = null;
        let secondsLeft = 60;
        const MAX_SEATS = 8;
        let selectedFoods = {};
        let foodPrices = {};
        let seatHubConnection = null;
        let currentSeatTotal = 0; // Store raw seat total for calculations
        
        // Couple seats mapping
        const coupleSeatPairs = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(coupleSeatPairs));

        @if (ViewBag.Foods != null)

        {

            foreach (var food in (List<MovieTheater.ViewModels.FoodViewModel>)ViewBag.Foods)

            {
                <text>foodPrices[@food.FoodId] = @food.Price;</text>
            }

        }

        // Initialize SignalR connection for real-time seat selection
        function initializeSignalR() {
            seatHubConnection = new signalR.HubConnectionBuilder()
                .withUrl("/seathub")
                .withAutomaticReconnect()
                .build();

            seatHubConnection.on("SeatSelected", function (seatId) {
                const seatElement = document.querySelector(`[data-seat-id="${seatId}"]`);
                if (seatElement && !seatElement.classList.contains('selected')) {
                    seatElement.classList.add('being-held');
                }
            });

            seatHubConnection.on("SeatDeselected", function (seatId) {
                const seatElement = document.querySelector(`[data-seat-id="${seatId}"]`);
                if (seatElement) {
                    seatElement.classList.remove('being-held');
                }
            });

            seatHubConnection.on("SeatStatusChanged", function (seatId, newStatusId) {
                console.log("SeatStatusChanged", seatId, newStatusId);
                const seatElement = document.querySelector(`[data-seat-id="${seatId}"]`);
                if (!seatElement) return;
                
                if (newStatusId === 2) { // 2 = Booked
                    seatElement.classList.add("booked");
                    seatElement.classList.remove("selected", "being-held");
                    seatElement.setAttribute("disabled", "disabled");
                    // Keep the original seat type color from database, CSS will handle the darkening
                    seatElement.style.backgroundColor = seatElement.getAttribute("data-seat-color") || "#cccbc8";
                    selectedSeats.delete(String(seatId));
                } else {
                    seatElement.classList.remove("booked");
                    seatElement.removeAttribute("disabled");
                    // Set lại màu gốc loại ghế
                    const color = seatElement.getAttribute("data-seat-color") || "#cccbc8";
                    seatElement.style.backgroundColor = color;
                    // Remove from selectedSeats and UI
                    selectedSeats.delete(String(seatId));
                    seatElement.classList.remove("selected");
                }
                updateSelectionSummary();
                updateBookButtonState();
                updateFoodSectionVisibility();
            });

            seatHubConnection.on("AccountInUse", function () {
                // Hiển thị modal, disable UI chọn ghế
                document.getElementById('accountInUseModal').style.display = 'flex';
                document.getElementById('seatSelectionArea').style.pointerEvents = 'none';
                document.getElementById('seatSelectionArea').style.opacity = '0.4';
                document.getElementById('summarySeatBlock').style.opacity = '0.4';
                var bookBtn = document.getElementById('bookButton');
                if (bookBtn) bookBtn.disabled = true;
            });

            // Nhận 2 danh sách: ghế của mình (heldByMe), ghế của người khác (heldByOthers)
            seatHubConnection.on("HeldSeats", function (heldByMe, heldByOthers) {
                // Reset trạng thái
                document.querySelectorAll('.selected').forEach(seat => {
                    seat.classList.remove("selected");
                });
                document.querySelectorAll('.being-held').forEach(seat => {
                    seat.classList.remove("being-held");
                    seat.removeAttribute("title");
                });
                selectedSeats.clear();
                
                // Đánh dấu ghế của chính mình
                heldByMe.forEach(seatId => {
                    const seat = document.querySelector(`[data-seat-id='${seatId}']`);
                    if (seat) {
                        seat.classList.add("selected");
                        selectedSeats.add(String(seatId));
                    }
                });
                
                // Đánh dấu ghế của người khác
                heldByOthers.forEach(seatId => {
                    const seat = document.querySelector(`[data-seat-id='${seatId}']`);
                    if (seat && !seat.classList.contains("selected")) {
                        seat.classList.add("being-held");
                        seat.setAttribute("title", "Ghế đang được người khác giữ");
                    }
                });
                
                updateSelectionSummary();
                updateBookButtonState();
                updateFoodSectionVisibility();
            });

            seatHubConnection.on("SeatsReleased", function (seatIds) {
                seatIds.forEach(seatId => {
                    const seat = document.querySelector(`[data-seat-id='${seatId}']`);
                    seat?.classList.remove("being-held");
                    seat?.removeAttribute("title");
                });
            });

            seatHubConnection.start()
                .then(function () {
                    console.log("SignalR Connected");
                    // Join the showtime group
                    const movieShowId = '@(ViewBag.MovieShow != null ? ViewBag.MovieShow.MovieShowId : 0)';
                    if (movieShowId && movieShowId !== '0') {
                        seatHubConnection.invoke("JoinShowtime", parseInt(movieShowId));
                    }
                })
                .catch(function (err) {
                    console.error("SignalR Connection Error: ", err);
                });
        }

        // Your existing JavaScript functions here...
        // (keeping the same logic but updating selectors)

        function selectSeat(seatElement) {
            const seatId = String(seatElement.getAttribute('data-seat-id'));
            if (seatElement.classList.contains('disabled') ||
                seatElement.classList.contains('being-held') ||
                seatElement.classList.contains('booked')) return;

            const movieShowId = '@(ViewBag.MovieShow != null ? ViewBag.MovieShow.MovieShowId : 0)';
            
            // Couple seat auto-select logic
            if (coupleSeatPairs && coupleSeatPairs[seatId]) {
                const otherSeatId = coupleSeatPairs[seatId].toString();
                const otherSeatElement = document.querySelector(`[data-seat-id='${otherSeatId}']`);
                const isSelected = seatElement.classList.contains('selected');

                if (isSelected) {
                    // Deselect both seats
                    seatElement.classList.remove('selected');
                    selectedSeats.delete(seatId);
                    if (otherSeatElement) {
                        otherSeatElement.classList.remove('selected');
                        selectedSeats.delete(otherSeatId);
                    }
                    
                    // Notify server about deselection
                    if (seatHubConnection && seatHubConnection.state === signalR.HubConnectionState.Connected) {
                        seatHubConnection.invoke("DeselectSeat", parseInt(movieShowId), parseInt(seatId));
                        if (otherSeatElement) seatHubConnection.invoke("DeselectSeat", parseInt(movieShowId), parseInt(otherSeatId));
                    }
                } else {
                    // Check seat limit for couple seats (need 2 seats)
                    if (selectedSeats.size + 2 > MAX_SEATS) {
                        alert('Bạn đã chọn tối đa ' + MAX_SEATS + ' ghế. Vui lòng bỏ chọn một ghế khác trước khi chọn ghế mới.');
                        return;
                    }
                    
                    // Select both seats
                    seatElement.classList.add('selected');
                    selectedSeats.add(seatId);
                    if (otherSeatElement && !otherSeatElement.classList.contains('disabled') && 
                        !otherSeatElement.classList.contains('being-held') && 
                        !otherSeatElement.classList.contains('booked')) {
                        otherSeatElement.classList.add('selected');
                        selectedSeats.add(otherSeatId);
                    } else {
                        alert('Ghế cặp không khả dụng. Không thể chọn couple seat.');
                        seatElement.classList.remove('selected');
                        selectedSeats.delete(seatId);
                        return;
                    }
                    
                    // Notify server about both selections
                    if (seatHubConnection && seatHubConnection.state === signalR.HubConnectionState.Connected) {
                        seatHubConnection.invoke("SelectSeat", parseInt(movieShowId), parseInt(seatId));
                        if (otherSeatElement) seatHubConnection.invoke("SelectSeat", parseInt(movieShowId), parseInt(otherSeatId));
                    }
                    
                    if (selectedSeats.size === 2) startCountdown();
                }
                updateSelectionSummary();
                updateBookButtonState();
                updateFoodSectionVisibility();
            } else {
                // Normal seat logic
                if (selectedSeats.has(seatId)) {
                    seatElement.classList.remove('selected');
                    selectedSeats.delete(seatId);
                    
                    // Notify server about deselection
                    if (seatHubConnection && seatHubConnection.state === signalR.HubConnectionState.Connected) {
                        seatHubConnection.invoke("DeselectSeat", parseInt(movieShowId), parseInt(seatId));
                    }
                } else {
                    if (selectedSeats.size >= MAX_SEATS) {
                        alert('Bạn đã chọn tối đa ' + MAX_SEATS + ' ghế. Vui lòng bỏ chọn một ghế khác trước khi chọn ghế mới.');
                        return;
                    }
                    seatElement.classList.add('selected');
                    selectedSeats.add(seatId);
                    
                    // Notify server about selection
                    if (seatHubConnection && seatHubConnection.state === signalR.HubConnectionState.Connected) {
                        seatHubConnection.invoke("SelectSeat", parseInt(movieShowId), parseInt(seatId));
                    }
                    
                    if (selectedSeats.size === 1) startCountdown();
                }
                updateSelectionSummary();
                updateBookButtonState();
                updateFoodSectionVisibility();
            }
            
            // Stop countdown if no seats are selected
            if (selectedSeats.size === 0 && countdownTimer) {
                clearInterval(countdownTimer);
                countdownTimer = null;
                const timerEl = document.getElementById("countdownTimer");
                if (timerEl) {
                    timerEl.textContent = '';
                }
            }
        }

        function updateSelectionSummary() {
            const selectedSeatNames = document.getElementById('selectedSeatNames');
            const totalPrice = document.getElementById('totalPrice');
            const seatInfo = document.getElementById('seatInfo');
            const noSeatAlert = document.getElementById('noSeatAlert');

            if (selectedSeats.size > 0) {
                let total = 0;
                let seatNames = [];
                document.querySelectorAll('.seat.selected').forEach(seat => {
                    const seatName = seat.getAttribute('data-seat-name');
                    const calculatedPrice = parseFloat(seat.getAttribute('data-seat-price')) || 0;
                    seatNames.push(seatName);
                    total += calculatedPrice;
                });

                selectedSeatNames.textContent = seatNames.join(', ');
                currentSeatTotal = total; // Store raw value
                totalPrice.textContent = total.toLocaleString();
                seatInfo.style.display = 'block';
                noSeatAlert.style.display = 'none';
            } else {
                currentSeatTotal = 0; // Reset when no seats selected
                seatInfo.style.display = 'none';
                noSeatAlert.style.display = 'block';
            }
            updateFoodTotal();
        }

        function updateBookButtonState() {
            document.getElementById('bookButton').disabled = (selectedSeats.size === 0);
        }

        function updateFoodSectionVisibility() {
            const foodSection = document.getElementById('foodSelectionArea');
            const seatSection = document.getElementById('seatSelectionArea');
            const bookButton = document.getElementById('bookButton');
            const btnText = bookButton.querySelector('.btn-text');
            
            if (selectedSeats.size > 0) {
                // Show food section if seats are selected
                if (seatSection.style.display !== 'none') {
                    // We're in seat selection mode, button should say "Continue"
                    btnText.textContent = 'Continue';
                } else {
                    // We're in food selection mode, button should say "Continue to Payment"
                    btnText.textContent = 'Continue to Payment';
                }
            } else {
                // No seats selected, hide food section
                foodSection.style.display = 'none';
                seatSection.style.display = 'block';
                btnText.textContent = 'Continue';
            }
        }

        function startCountdown() {
            const timerEl = document.getElementById("countdownTimer");
            if (countdownTimer) clearInterval(countdownTimer);
            secondsLeft = 60;

            countdownTimer = setInterval(() => {
                if (secondsLeft <= 0) {
                    clearInterval(countdownTimer);
                    
                    // Notify server to release all held seats
                    const movieShowId = '@(ViewBag.MovieShow != null ? ViewBag.MovieShow.MovieShowId : 0)';
                    if (seatHubConnection && seatHubConnection.state === signalR.HubConnectionState.Connected) {
                        selectedSeats.forEach(seatId => {
                            seatHubConnection.invoke("DeselectSeat", parseInt(movieShowId), parseInt(seatId));
                        });
                    }
                    
                    // Clear all selected seats
                    selectedSeats.clear();
                    document.querySelectorAll('.seat.selected').forEach(seat => {
                        seat.classList.remove('selected');
                    });
                    
                    // Update UI
                    updateSelectionSummary();
                    updateBookButtonState();
                    
                    // Show full-screen timeout modal
                    const timeoutModal = document.getElementById('timeoutModal');
                    if (timeoutModal) {
                        timeoutModal.style.display = 'flex';
                        // Disable the main content
                        document.getElementById('mainBookingArea').style.pointerEvents = 'none';
                        document.getElementById('mainBookingArea').style.opacity = '0.4';
                    }
                } else {
                    const min = Math.floor(secondsLeft / 60);
                    const sec = secondsLeft % 60;
                    timerEl.textContent = `Time left: ${min}:${sec.toString().padStart(2, '0')}`;
                    
                    // Add urgent class when time is running low (less than 10 seconds)
                    if (secondsLeft <= 10) {
                        timerEl.classList.add('urgent');
                    } else {
                        timerEl.classList.remove('urgent');
                    }
                    
                    secondsLeft--;
                }
            }, 1000);
        }

        function updateFoodTotal() {
            let totalFood = 0;
            let foodListHtml = '';
            let hasFood = false;

            for (let foodId in selectedFoods) {
                if (selectedFoods[foodId] > 0) {
                    totalFood += (foodPrices[foodId] || 0) * selectedFoods[foodId];
                    hasFood = true;
                }
            }

            document.getElementById('totalFoodPrice').textContent = totalFood.toLocaleString();

            // Update the selected food list
            const selectedFoodList = document.getElementById('selectedFoodList');
            console.log('Selected foods:', selectedFoods, 'Has food:', hasFood);
            if (hasFood) {
                foodListHtml = '';
                for (let foodId in selectedFoods) {
                    if (selectedFoods[foodId] > 0) {
                        // Get food name from the food item element
                        const foodItem = document.querySelector(`.food-item[data-food-id="${foodId}"]`);
                        const foodName = foodItem ? foodItem.querySelector('.food-name').textContent : `Food ${foodId}`;
                        foodListHtml += `<li>${foodName} x${selectedFoods[foodId]}</li>`;
                        console.log('Adding food to list:', foodName, 'x', selectedFoods[foodId]);
                    }
                }
                selectedFoodList.innerHTML = foodListHtml;
            } else {
                selectedFoodList.innerHTML = '<li class="no-food">No food selected</li>';
            }

            // Use the stored raw seat total for accurate calculation
            let grandTotal = currentSeatTotal + totalFood;
            document.getElementById('grandTotal').textContent = grandTotal.toLocaleString() + ' VND';
        }

        function setSeatColorByStatus(seatElement) {
            if (seatElement.classList.contains('booked')) {
                // Keep the original seat type color from database, CSS will handle the darkening
                seatElement.style.backgroundColor = seatElement.getAttribute('data-seat-color') || '#cccbc8';
            } else if (seatElement.classList.contains('selected')) {
                seatElement.style.backgroundColor = '#10b981';
            } else if (seatElement.classList.contains('being-held')) {
                seatElement.style.backgroundColor = '#f59e42';
            } else {
                // Mặc định lấy màu loại ghế từ data-seat-color
                seatElement.style.backgroundColor = seatElement.getAttribute('data-seat-color') || '#cccbc8';
            }
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', function () {
            // Initialize SignalR connection
            initializeSignalR();

            // Food quantity controls
            document.querySelectorAll('.qty-btn.plus').forEach(btn => {
                btn.addEventListener('click', function () {
                    const foodId = this.getAttribute('data-food-id');
                    let qtyInput = document.querySelector(`.qty-input[data-food-id='${foodId}']`);
                    let qty = parseInt(qtyInput.value) || 0;
                    qty++;
                    qtyInput.value = qty;
                    selectedFoods[foodId] = qty;
                    console.log('Food selected:', foodId, 'Quantity:', qty);
                    updateFoodTotal();
                });
            });

            document.querySelectorAll('.qty-btn.minus').forEach(btn => {
                btn.addEventListener('click', function () {
                    const foodId = this.getAttribute('data-food-id');
                    let qtyInput = document.querySelector(`.qty-input[data-food-id='${foodId}']`);
                    let qty = parseInt(qtyInput.value) || 0;
                    if (qty > 0) qty--;
                    qtyInput.value = qty;
                    if (qty === 0) delete selectedFoods[foodId];
                    else selectedFoods[foodId] = qty;
                    console.log('Food deselected:', foodId, 'Quantity:', qty);
                    updateFoodTotal();
                });
            });

            // Back to seat button
            document.getElementById('backToSeatBtn')?.addEventListener('click', function () {
                document.getElementById('foodSelectionArea').style.display = 'none';
                document.getElementById('seatSelectionArea').style.display = 'block';
            });

            // Continue button
            document.getElementById('bookButton').addEventListener('click', function () {
                if (this.disabled || selectedSeats.size === 0) return;

                const seatSelectionArea = document.getElementById('seatSelectionArea');
                const foodSelectionArea = document.getElementById('foodSelectionArea');

                if (seatSelectionArea.style.display !== 'none') {
                    // Go to food selection
                    seatSelectionArea.style.display = 'none';
                    foodSelectionArea.style.display = 'block';
                    this.querySelector('.btn-text').textContent = 'Continue to Payment';
                } else {
                    // Go to payment
                    const selectedSeatIds = Array.from(selectedSeats);
                    const data = {
                        movieId: '@movieId',
                        showDate: '@date.ToString("yyyy-MM-dd")',
                        showTime: '@time',
                        selectedSeatIds: selectedSeatIds,
                        movieShowId: '@(ViewBag.MovieShow != null ? ViewBag.MovieShow.MovieShowId : 0)'
                    };

                    const params = new URLSearchParams();
                    for (const key in data) {
                        if (Array.isArray(data[key])) {
                            data[key].forEach(item => params.append(key, item));
                        } else {
                            params.append(key, data[key]);
                        }
                    }

                    for (const foodId in selectedFoods) {
                        if (selectedFoods[foodId] > 0) {
                            params.append('foodIds', foodId);
                            params.append('foodQtys', selectedFoods[foodId]);
                        }
                    }

                    const isAdminSell = "@Context.Request.Query["isAdminSell"]" === "true";
                    window.location.href = isAdminSell
                        ? `/Booking/ConfirmTicketForAdmin?${params.toString()}`
                        : `/Booking/Information?${params.toString()}`;
                }
            });

            updateBookButtonState();
            updateSelectionSummary();
            updateFoodTotal();
        });
    </script>
}
