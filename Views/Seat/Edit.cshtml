@using MovieTheater.ViewModels
@model SeatEditViewModel
<form id="antiForgeryForm">
	@Html.AntiForgeryToken()
</form>

<a asp-controller="Admin" asp-action="MainPage" asp-route-tab="ShowroomMg" class="btn btn-secondary ms-3 mt-3">
	&larr; Return
</a>

<h3 class="text-center mb-5">@Model.CinemaRoomName</h3>

<link rel="stylesheet" href="~/css/seat.css" asp-append-version="true" />

<div class="screen-label text-center mb-5">
	Screen
</div>

@{
	var seatTypes = ViewBag.SeatTypes as List<SeatType>;
}

<table class="table table-bordered text-center">
	<tbody>
		@for (int row = 1; row <= Model.SeatLength; row++)
		{
			<tr>
				@for (int col = 1; col <= Model.SeatWidth; col++)
				{
					var seat = Model.Seats.FirstOrDefault(s => s.SeatRow == row && s.SeatColumn == col.ToString());
					<td style="background-color: @(seat.SeatType?.ColorHex ?? "#ffffff")" data-seat-id="@seat.SeatId">
						<span class="material-icons" onclick="selectSeat(this)">
							chair
						</span>
					</td>
				}
			</tr>
		}
	</tbody>
</table>


<div class="d-flex flex-wrap gap-4 mb-4" style="justify-content:center">
	@foreach (var type in seatTypes)
	{
		<div class="seat-type-option p-2 px-3 rounded text-white text-center"
			 style="background-color: @type.ColorHex; cursor: pointer; font-weight:bold; font-size:medium"
			 data-color="@type.ColorHex"
			 data-type="@type.SeatTypeId"
			 onclick="applySeatType(this)">
			@type.TypeName
		</div>
	}
</div>

<div class="text-center mb-4">
	<button id="saveChangesBtn" class="btn btn-primary" style="font-weight:bold; font-size:large" onclick="submitUpdatedSeats()" disabled>Save Changes</button>
</div>

<div class="d-flex justify-content-center text-center">
	<div class="alert alert-warning mb-3 align-items-center mx-auto" style="width: 600px;" role="alert">
		Select the seats and choose a new type, then tap the Save button
	</div>
</div>


<script>
	const selectedSeats = new Set();

	function selectSeat(clickedSpan) {
		const td = clickedSpan.parentElement;
		const seatId = td.getAttribute('data-seat-id');

		td.classList.toggle('selected-seat-type');

		if (selectedSeats.has(td)) {
			selectedSeats.delete(td);
		} else {
			selectedSeats.add(td);
		}
	}

	function applySeatType(clickedTypeDiv) {
		const color = clickedTypeDiv.getAttribute('data-color');
		const typeName = clickedTypeDiv.getAttribute('data-type');
		let hasUpdates = false;

		selectedSeats.forEach(td => {
			td.style.backgroundColor = color;
			td.setAttribute('data-selected-type', typeName);
			td.classList.remove('selected-seat-type');
					hasUpdates = true;
		});

		selectedSeats.clear();
		if (hasUpdates) 
		{
		document.getElementById("saveChangesBtn").disabled = false;
		}
	}

	function submitUpdatedSeats() {
		const updatedSeats = [];

		document.querySelectorAll('[data-selected-type]').forEach(td => {
			updatedSeats.push({
				SeatId: td.getAttribute('data-seat-id'),
				NewSeatTypeId: td.getAttribute('data-selected-type')
			});
		});

		fetch('/Seat/UpdateSeatTypes', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
				'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
			},
			body: JSON.stringify(updatedSeats)
		})
		.then(response => {
			if (response.ok) {
				alert('Seat types updated successfully.');
				location.reload();
			} else {
				alert('Failed to update seat types.');
			}
		});
	}
</script>

