@using MovieTheater.ViewModels
@model ShowroomEditViewModel
<form id="antiForgeryForm">
	@Html.AntiForgeryToken()
</form>

<a asp-controller="Admin" asp-action="MainPage" asp-route-tab="ShowroomMg" class="btn btn-secondary ms-3 mt-3">
	&larr; Return
</a>

<h3 class="text-center mb-5">@Model.CinemaRoomName</h3>

<link rel="stylesheet" href="~/css/seat.css" asp-append-version="true" />

<div class="screen-label text-center mb-5">
	Screen
</div>

@{
	var seatTypes = ViewBag.SeatTypes as List<SeatType>;
	var coupleSeatPairs = new Dictionary<int, int>();
	if (ViewBag.CoupleSeats != null)
	{
		foreach (var couple in (List<MovieTheater.Models.CoupleSeat>)ViewBag.CoupleSeats)
		{
			coupleSeatPairs[couple.FirstSeatId] = couple.SecondSeatId;
			coupleSeatPairs[couple.SecondSeatId] = couple.FirstSeatId;
		}
	}
}

<div class="table-responsive seat-edit-page">
	<table class="table table-bordered text-center">
		<thead>
			<tr>
				<th>
					<input type="checkbox" id="selectAll" onclick="toggleSelectAll(this)">
				</th>
				@for (int col = 1; col <= Model.SeatWidth; col++)
				{
					<th>
						<input type="checkbox" class="column-checkbox" data-column="@col" onclick="toggleColumn(this)">
					</th>
				}
			</tr>
		</thead>
		<tbody>
			@for (int row = 1; row <= Model.SeatLength; row++)
			{
				<tr>
					<th>
						<input type="checkbox" class="row-checkbox" data-row="@row" onclick="toggleRow(this)">
					</th>
					@for (int col = 1; col <= Model.SeatWidth; col++)
					{
						var seat = Model.Seats.FirstOrDefault(s => s.SeatRow == row && s.SeatColumn == col.ToString());
						var seatType = seatTypes?.FirstOrDefault(st => st.SeatTypeId == seat.SeatTypeId);
						bool isDisabledType = seatType?.TypeName == "Disabled";

						<td style="border-color: @(seat.SeatType?.ColorHex ?? "#ffffff")"
							data-seat-id="@seat.SeatId"
							data-seat-row="@row"
							data-seat-col="@col"
							data-seat-name="@seat.SeatName"
							data-seat-type="@seatType?.TypeName"
							@(seatType?.TypeName == "Couple" ? "data-couple-seat=true" : "")
							@(isDisabledType ? "class=disabled-seat" : "")>
							<span class="material-icons" onclick="selectSeat(this)">
								@seat.SeatName
							</span>
						</td>
					}
				</tr>
			}
		</tbody>
	</table>
</div>

<div class="d-flex flex-wrap gap-4 mb-4" style="justify-content:center">
	@foreach (var type in seatTypes)
	{
		<div class="seat-type-option p-2 px-3 rounded text-white text-center"
			 style="background-color: @type.ColorHex; cursor: pointer; font-weight:bold; font-size:medium"
			 data-color="@type.ColorHex"
			 data-type="@type.SeatTypeId"
			 data-type-name="@type.TypeName"
			 onclick="applySeatType(this)">
			@type.TypeName
		</div>
	}
</div>

<div class="text-center mb-4">
	<button id="saveChangesBtn" class="btn btn-primary" style="font-weight:bold; font-size:large" onclick="submitUpdatedSeats()" disabled>Save Changes</button>
	<button id="deleteCoupleSeatBtn" class="btn btn-danger ms-3" style="font-weight:bold; font-size:large; display:none;" onclick="deleteSelectedCoupleSeat(event)" disabled>Delete Couple Seat</button>
</div>

<div class="d-flex justify-content-center text-center">
	<div class="alert alert-warning mb-3 align-items-center mx-auto" style="width: 600px;" role="alert">
		<span id="modeDescription">Select seats and choose a type</span>
	</div>
</div>

<script>
	const selectedSeats = new Set();

	// Map: seatId -> paired seatId
	const coupleSeatMap = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(coupleSeatPairs));

	function toggleSelectAll(checkbox) {
		const isChecked = checkbox.checked;
		document.querySelectorAll('td[data-seat-id]').forEach(td => {
			if (isChecked) {
				td.classList.add('selected-seat');
				selectedSeats.add(td);
			} else {
				td.classList.remove('selected-seat');
				selectedSeats.delete(td);
			}
		});

		// Update UI
		const modeDesc = document.getElementById('modeDescription');
		modeDesc.textContent = isChecked ? 'All seats selected. Choose a type to apply.' : 'Select seats and choose a type';
		document.getElementById("saveChangesBtn").disabled = !isChecked;
	}

	function toggleRow(checkbox) {
		const row = checkbox.getAttribute('data-row');
		const isChecked = checkbox.checked;
		const seatsInRow = document.querySelectorAll(`td[data-seat-row="${row}"][data-seat-id]`);

		seatsInRow.forEach(td => {
			if (isChecked) {
				td.classList.add('selected-seat');
				selectedSeats.add(td);
			} else {
				td.classList.remove('selected-seat');
				selectedSeats.delete(td);
			}
		});

		updateSelectionUI();
	}

	function toggleColumn(checkbox) {
		const column = checkbox.getAttribute('data-column');
		const isChecked = checkbox.checked;
		const seatsInColumn = document.querySelectorAll(`td[data-seat-col="${column}"][data-seat-id]`);

		seatsInColumn.forEach(td => {
			if (isChecked) {
				td.classList.add('selected-seat');
				selectedSeats.add(td);
			} else {
				td.classList.remove('selected-seat');
				selectedSeats.delete(td);
			}
		});

		updateSelectionUI();
	}

	function updateSelectionUI() {
		const modeDesc = document.getElementById('modeDescription');
		const deleteBtn = document.getElementById('deleteCoupleSeatBtn');
		let coupleSeatSelected = false;
		let coupleSeatIds = [];

		selectedSeats.forEach(td => {
			if (td.hasAttribute('data-couple-seat')) {
				coupleSeatSelected = true;
				coupleSeatIds.push(td.getAttribute('data-seat-id'));
			}
		});

		if (selectedSeats.size > 0) {
			modeDesc.textContent = `${selectedSeats.size} seats selected. Choose a type to apply.`;
		} else {
			modeDesc.textContent = 'Select seats and choose a type';
		}
		document.getElementById("saveChangesBtn").disabled = selectedSeats.size === 0;

		// Show delete couple seat button only if exactly 2 couple seats are selected
		if (coupleSeatSelected && coupleSeatIds.length === 2) {
			deleteBtn.style.display = '';
			deleteBtn.disabled = false;
			deleteBtn.dataset.coupleSeatIds = JSON.stringify(coupleSeatIds);
		} else {
			deleteBtn.style.display = 'none';
			deleteBtn.disabled = true;
			deleteBtn.dataset.coupleSeatIds = '';
		}
	}

	function selectSeat(clickedSpan) {
		const td = clickedSpan.parentElement;
		const seatId = td.getAttribute('data-seat-id');
		const isCoupleSeat = td.hasAttribute('data-couple-seat');
		const row = td.getAttribute('data-seat-row');
		const col = td.getAttribute('data-seat-col');

		if (isCoupleSeat && coupleSeatMap[seatId]) {
			// Select/deselect both seats in the couple
			const otherSeatId = coupleSeatMap[seatId].toString();
			const otherTd = document.querySelector(`td[data-seat-id='${otherSeatId}']`);
			const isSelected = td.classList.contains('selected-seat');

			if (isSelected) {
				td.classList.remove('selected-seat');
					selectedSeats.delete(td);
				if (otherTd) {
					otherTd.classList.remove('selected-seat');
					selectedSeats.delete(otherTd);
				}
				} else {
				td.classList.add('selected-seat');
					selectedSeats.add(td);
				if (otherTd) {
					otherTd.classList.add('selected-seat');
					selectedSeats.add(otherTd);
				}
			}
		} else {
			td.classList.toggle('selected-seat');
			if (selectedSeats.has(td)) {
				selectedSeats.delete(td);
			} else {
				selectedSeats.add(td);
			}
		}

		// Update checkboxes
		updateCheckboxStates();
		updateSelectionUI();
	}

	function updateCheckboxStates() {
		// Update row checkboxes
		document.querySelectorAll('.row-checkbox').forEach(checkbox => {
			const row = checkbox.getAttribute('data-row');
			const seatsInRow = document.querySelectorAll(`td[data-seat-row="${row}"][data-seat-id]`);
			const selectedInRow = document.querySelectorAll(`td[data-seat-row="${row}"][data-seat-id].selected-seat`);
			checkbox.checked = selectedInRow.length > 0 && selectedInRow.length === seatsInRow.length;
		});

		// Update column checkboxes
		document.querySelectorAll('.column-checkbox').forEach(checkbox => {
			const col = checkbox.getAttribute('data-column');
			const seatsInColumn = document.querySelectorAll(`td[data-seat-col="${col}"][data-seat-id]`);
			const selectedInColumn = document.querySelectorAll(`td[data-seat-col="${col}"][data-seat-id].selected-seat`);
			checkbox.checked = selectedInColumn.length > 0 && selectedInColumn.length === seatsInColumn.length;
		});

		// Update select all checkbox
		const totalSeats = document.querySelectorAll('td[data-seat-id]').length;
		const selectedSeats = document.querySelectorAll('td[data-seat-id].selected-seat').length;
		document.getElementById('selectAll').checked = selectedSeats > 0 && selectedSeats === totalSeats;
	}

	function applySeatType(clickedTypeDiv) {
		const color = clickedTypeDiv.getAttribute('data-color');
		const typeName = clickedTypeDiv.getAttribute('data-type-name');
		const typeId = clickedTypeDiv.getAttribute('data-type');
		let hasUpdates = false;

		selectedSeats.forEach(td => {
			td.style.backgroundColor = color;
			td.setAttribute('data-selected-type', typeId);
			td.classList.remove('selected-seat');
			hasUpdates = true;
		});

		selectedSeats.clear();
		document.querySelectorAll('td.selected-seat').forEach(td => td.classList.remove('selected-seat'));
		// Uncheck all row, column, and select-all checkboxes
		document.querySelectorAll('.row-checkbox, .column-checkbox, #selectAll').forEach(cb => cb.checked = false);
		if (hasUpdates) {
			document.getElementById("saveChangesBtn").disabled = false;
		}
		document.getElementById('modeDescription').textContent = 'Select seats and choose a type';
	}

	function submitUpdatedSeats() {
		const updatedSeats = [];
		let isCoupleSeat = false;
		let coupleTypeId = null;
		let wasCoupleSeat = false;
		let coupleSeatIds = [];

		document.querySelectorAll('[data-selected-type]').forEach(td => {
			const typeName = document.querySelector(`[data-type="${td.getAttribute('data-selected-type')}"]`).getAttribute('data-type-name');
			const seatId = td.getAttribute('data-seat-id');

			// Check if this seat was part of a couple seat
			if (td.hasAttribute('data-couple-seat')) {
				wasCoupleSeat = true;
				coupleSeatIds.push(parseInt(seatId));
			}

			if (typeName === 'Couple') {
				isCoupleSeat = true;
				coupleTypeId = td.getAttribute('data-selected-type');
			}
			updatedSeats.push({
				SeatId: seatId,
				NewSeatTypeId: td.getAttribute('data-selected-type')
			});
		});

		// If seats were part of a couple seat but are being changed to a different type
		if (wasCoupleSeat && !isCoupleSeat) {
			// First delete the couple seat relationship
			fetch('/Seat/DeleteCoupleSeat', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
				},
				body: JSON.stringify({ seatIds: coupleSeatIds })
			})
			.then(response => {
				if (response.ok) {
					// After couple seat is deleted, update the seat types
					return fetch('/Seat/UpdateSeatTypes', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
							'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
						},
						body: JSON.stringify(updatedSeats)
					});
				} else {
					throw new Error('Failed to delete couple seat');
				}
			})
			.then(response => {
				if (response.ok) {
					alert('Couple seat removed and seats updated successfully.');
					location.reload();
				} else {
					throw new Error('Failed to update seat types');
				}
			})
			.catch(error => {
				alert('Error: ' + error.message);
			});
		}
		else if (isCoupleSeat && updatedSeats.length === 2) {
			// First create the couple seat
			const coupleSeat = {
				FirstSeatId: parseInt(updatedSeats[0].SeatId),
				SecondSeatId: parseInt(updatedSeats[1].SeatId)
			};

			fetch('/Seat/CreateCoupleSeat', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
				},
				body: JSON.stringify(coupleSeat)
			})
			.then(response => {
				if (response.ok) {
					// After couple seat is created, update the seat types
					return fetch('/Seat/UpdateSeatTypes', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
							'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
						},
						body: JSON.stringify(updatedSeats)
					});
				} else {
					throw new Error('Failed to create couple seat');
				}
			})
			.then(response => {
				if (response.ok) {
					alert('Couple seat created and seats updated successfully.');
					location.reload();
				} else {
					throw new Error('Failed to update seat types');
				}
			})
			.catch(error => {
				alert('Error: ' + error.message);
			});
		} else {
			// Handle regular seat type updates
			fetch('/Seat/UpdateSeatTypes', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
				},
				body: JSON.stringify(updatedSeats)
			})
			.then(response => {
				if (response.ok) {
					alert('Seat types updated successfully.');
					location.reload();
				} else {
					alert('Failed to update seat types.');
				}
			});
		}
	}

	function deleteSelectedCoupleSeat(event) {
		event.preventDefault();
		const deleteBtn = document.getElementById('deleteCoupleSeatBtn');
		const coupleSeatIds = JSON.parse(deleteBtn.dataset.coupleSeatIds || '[]');
		if (coupleSeatIds.length !== 2) {
			alert('Please select exactly two couple seats to delete.');
			return;
		}

		// Step 1: Delete the couple seat relationship
		fetch('/Seat/DeleteCoupleSeat', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
				'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
			},
			body: JSON.stringify({ seatIds: coupleSeatIds })
		})
		.then(response => {
			if (!response.ok) throw new Error('Failed to delete couple seat');
			// Step 2: Set both seats to type "Normal"
			// Find the typeId for "Normal"
			const normalTypeDiv = document.querySelector('.seat-type-option[data-type-name="Normal"]');
			if (!normalTypeDiv) throw new Error('Normal seat type not found');
			const normalTypeId = normalTypeDiv.getAttribute('data-type');
			const updates = coupleSeatIds.map(seatId => ({
				SeatId: seatId,
				NewSeatTypeId: normalTypeId
			}));
			return fetch('/Seat/UpdateSeatTypes', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
				},
				body: JSON.stringify(updates)
			});
		})
		.then(response => {
			if (!response.ok) throw new Error('Failed to update seat types');
			alert('Couple seat deleted and seats reverted to Normal.');
			location.reload();
		})
		.catch(error => {
			alert('Error: ' + error.message);
		});
	}
</script>