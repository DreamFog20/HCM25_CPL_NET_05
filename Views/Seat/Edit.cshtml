@using MovieTheater.ViewModels
@model ShowroomEditViewModel
<form id="antiForgeryForm">
	@Html.AntiForgeryToken()
</form>

<a asp-controller="Admin" asp-action="MainPage" asp-route-tab="ShowroomMg" class="btn btn-secondary ms-3 mt-3">
	&larr; Return
</a>

<h3 class="text-center mb-5">@Model.CinemaRoomName</h3>

<link rel="stylesheet" href="~/css/seat.css" asp-append-version="true" />

<div class="screen-label text-center mb-5">
	Screen
</div>

@{
	var seatTypes = ViewBag.SeatTypes as List<SeatType>;
}

<table class="table table-bordered text-center">
	<tbody>
		@for (int row = 1; row <= Model.SeatLength; row++)
		{
			<tr>
				@for (int col = 1; col <= Model.SeatWidth; col++)
				{
					var seat = Model.Seats.FirstOrDefault(s => s.SeatRow == row && s.SeatColumn == col.ToString());
					<td style="background-color: @(seat.SeatType?.ColorHex ?? "#ffffff")" 
						data-seat-id="@seat.SeatId"
						data-seat-row="@row"
						data-seat-col="@col"
						@(seat.SeatType.Equals("Couple") ? "data-couple-seat=true" : "")>
						<span class="material-icons" onclick="selectSeat(this)">
							chair
						</span>
					</td>
				}
			</tr>
		}
	</tbody>
</table>

<div class="d-flex flex-wrap gap-4 mb-4" style="justify-content:center">
	@foreach (var type in seatTypes)
	{
		<div class="seat-type-option p-2 px-3 rounded text-white text-center"
			 style="background-color: @type.ColorHex; cursor: pointer; font-weight:bold; font-size:medium"
			 data-color="@type.ColorHex"
			 data-type="@type.SeatTypeId"
			 data-type-name="@type.TypeName"
			 onclick="applySeatType(this)">
			@type.TypeName
		</div>
	}
</div>

<div class="text-center mb-4">
	<button id="saveChangesBtn" class="btn btn-primary" style="font-weight:bold; font-size:large" onclick="submitUpdatedSeats()" disabled>Save Changes</button>
</div>

<div class="d-flex justify-content-center text-center">
	<div class="alert alert-warning mb-3 align-items-center mx-auto" style="width: 600px;" role="alert">
		<span id="modeDescription">Select seats and choose a type</span>
	</div>
</div>

<script>
	const selectedSeats = new Set();

	function selectSeat(clickedSpan) {
		const td = clickedSpan.parentElement;
		const seatId = td.getAttribute('data-seat-id');

		td.classList.toggle('selected-seat');
		if (selectedSeats.has(td)) {
			selectedSeats.delete(td);
		} else {
			selectedSeats.add(td);
		}

		// Update UI based on selection count
		const modeDesc = document.getElementById('modeDescription');
		if (selectedSeats.size === 2) {
			modeDesc.textContent = 'Two seats selected. Choose a type to apply.';
		} else {
			modeDesc.textContent = 'Select seats and choose a type';
		}

		// Enable/disable save button
		document.getElementById("saveChangesBtn").disabled = !document.querySelector('.selected-seat');
	}

	function applySeatType(clickedTypeDiv) {
		const color = clickedTypeDiv.getAttribute('data-color');
		const typeName = clickedTypeDiv.getAttribute('data-type-name');
		const typeId = clickedTypeDiv.getAttribute('data-type');
		let hasUpdates = false;

		selectedSeats.forEach(td => {
			td.style.backgroundColor = color;
			td.setAttribute('data-selected-type', typeId);
			td.classList.remove('selected-seat');
			hasUpdates = true;
		});

		selectedSeats.clear();
		if (hasUpdates) {
			document.getElementById("saveChangesBtn").disabled = false;
		}
		document.getElementById('modeDescription').textContent = 'Select seats and choose a type';
	}

	function submitUpdatedSeats() {
		const updatedSeats = [];
		let isCoupleSeat = false;
		let coupleTypeId = null;
		let wasCoupleSeat = false;
		let coupleSeatIds = [];

		document.querySelectorAll('[data-selected-type]').forEach(td => {
			const typeName = document.querySelector(`[data-type="${td.getAttribute('data-selected-type')}"]`).getAttribute('data-type-name');
			const seatId = td.getAttribute('data-seat-id');
			
			// Check if this seat was part of a couple seat
			if (td.hasAttribute('data-couple-seat')) {
				wasCoupleSeat = true;
				coupleSeatIds.push(parseInt(seatId));
			}

			if (typeName === 'Couple') {
				isCoupleSeat = true;
				coupleTypeId = td.getAttribute('data-selected-type');
			}
			updatedSeats.push({
				SeatId: seatId,
				NewSeatTypeId: td.getAttribute('data-selected-type')
			});
		});

		// If seats were part of a couple seat but are being changed to a different type
		if (wasCoupleSeat && !isCoupleSeat) {
			// First delete the couple seat relationship
			fetch('/Seat/DeleteCoupleSeat', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
				},
				body: JSON.stringify({ seatIds: coupleSeatIds })
			})
			.then(response => {
				if (response.ok) {
					// After couple seat is deleted, update the seat types
					return fetch('/Seat/UpdateSeatTypes', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
							'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
						},
						body: JSON.stringify(updatedSeats)
					});
				} else {
					throw new Error('Failed to delete couple seat');
				}
			})
			.then(response => {
				if (response.ok) {
					alert('Couple seat removed and seats updated successfully.');
					location.reload();
				} else {
					throw new Error('Failed to update seat types');
				}
			})
			.catch(error => {
				alert('Error: ' + error.message);
			});
		}
		else if (isCoupleSeat && updatedSeats.length === 2) {
			// First create the couple seat
			const coupleSeat = {
				FirstSeatId: parseInt(updatedSeats[0].SeatId),
				SecondSeatId: parseInt(updatedSeats[1].SeatId)
			};

			fetch('/Seat/CreateCoupleSeat', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
				},
				body: JSON.stringify(coupleSeat)
			})
			.then(response => {
				if (response.ok) {
					// After couple seat is created, update the seat types
					return fetch('/Seat/UpdateSeatTypes', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
							'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
						},
						body: JSON.stringify(updatedSeats)
					});
				} else {
					throw new Error('Failed to create couple seat');
				}
			})
			.then(response => {
				if (response.ok) {
					alert('Couple seat created and seats updated successfully.');
					location.reload();
				} else {
					throw new Error('Failed to update seat types');
				}
			})
			.catch(error => {
				alert('Error: ' + error.message);
			});
		} else {
			// Handle regular seat type updates
			fetch('/Seat/UpdateSeatTypes', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
				},
				body: JSON.stringify(updatedSeats)
			})
			.then(response => {
				if (response.ok) {
					alert('Seat types updated successfully.');
					location.reload();
				} else {
					alert('Failed to update seat types.');
				}
			});
		}
	}
</script>
