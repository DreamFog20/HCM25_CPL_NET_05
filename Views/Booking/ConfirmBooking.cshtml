@model MovieTheater.ViewModels.ConfirmBookingViewModel

<div class="container mt-4">
    <h2 class="text-center mb-4">Confirm Your Booking</h2>

    <div class="card shadow p-4">

        @* === Thông tin người dùng & phim chia 2 cột === *@
        <div class="row">
            <div class="col-md-6">
                <h5>Movie & Show Info</h5>
                <p><strong>Movie:</strong> @Model.MovieName</p>
                <p><strong>Screen:</strong> @Model.CinemaRoomName</p>
                <p><strong>Date:</strong> @Model.ShowDate.ToString("yyyy-MM-dd")</p>
                <p><strong>Time:</strong> @Model.ShowTime</p>
            </div>
            <div class="col-md-6">
                <h5>Your Information</h5>
                <p><strong>Full Name:</strong> @Model.FullName</p>
                <p><strong>Email:</strong> @Model.Email</p>
                <p><strong>Identity Card:</strong> @Model.IdentityCard</p>
                <p><strong>Phone Number:</strong> @Model.PhoneNumber</p>
                <p><strong>Score:</strong> <span id="currentScore">@Model.CurrentScore</span> pts</p>
            </div>
        </div>

        <hr />

        @* === Danh sách ghế === *@
        <h5 class="mb-3">Seat(s)</h5>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Seat</th>
                    <th>Type</th>
                    <th>Price</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var seat in Model.SelectedSeats)
                {
                    <tr>
                        <td>@seat.SeatName</td>
                        <td>@seat.SeatType</td>
                        <td>@seat.Price.ToString("N0") VND</td>
                    </tr>
                }
            </tbody>
        </table>

        @* === Promotion Button === *@
        <div class="row mt-4">
            <div class="col-12">
                <button type="button" class="btn btn-outline-primary" id="openPromotionModalBtn">
                    <i class="fas fa-tag me-2"></i>Apply Promotion
                </button>
                <span id="selectedPromotionInfo" class="ms-3 text-success fw-bold"></span>
            </div>
        </div>

        @* === Nhập Use Score & tổng tiền === *@
        <div class="row mt-4 align-items-center">
            <div class="col-md-6">
                <div class="form-group">
                    <label for="useScore"><strong>Points to use (1 point = 1,000 VND):</strong></label>
                    <input asp-for="UseScore" type="number" class="form-control" id="useScore" min="0" value="0" />
                    <div class="text-muted mt-1">Max usable: <span id="maxUsablePoints">(calculated)</span> | <span id="pointsEarnedPreview" class="text-success">You will earn 0 points from this transaction</span></div>
                    <div id="pointValidation" class="text-danger mt-1"></div>
                    <div id="pointSavings" class="text-success mt-1"></div>
                </div>
            </div>
            <div class="col-md-6 text-end">
                <table class="table table-borderless table-sm" style="max-width: 350px; margin-left: auto;">
                    <tbody>
                        <tr>
                            <td class="text-start">Original Price:</td>
                            <td><span id="originalTotal">@Model.Subtotal.ToString("N0") VND</span></td>
                        </tr>
                        <tr id="promotionDiscountRow" style="display:none;">
                            <td class="text-start">Promotion discount:</td>
                            <td id="promotionDiscountDisplay"></td>
                        </tr>
                        <tr id="rankDiscountRow" style="display:none;">
                            <td class="text-start">Rank discount:</td>
                            <td id="rankDiscountDisplay"></td>
                        </tr>
                        <tr id="pointsUsedRow" style="display:none;">
                            <td class="text-start">Points Used:</td>
                            <td id="pointsUsedDisplay">-0 VND</td>
                        </tr>
                        <tr style="border-top: 1px solid #dee2e6;">
                            <td class="text-start pt-2"><strong>Total Price:</strong></td>
                            <td id="totalPriceDisplay" class="pt-2"><strong>@Model.TotalPrice.ToString("N0") VND</strong></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <hr />
        <form asp-action="Confirm" method="post" id="confirmForm">
            @Html.HiddenFor(m => m.MovieId)
            @Html.HiddenFor(m => m.MovieName)
            @Html.HiddenFor(m => m.CinemaRoomName)
            @Html.HiddenFor(m => m.ShowDate)
            @Html.HiddenFor(m => m.ShowTime)
            @Html.HiddenFor(m => m.TotalPrice)
            @Html.HiddenFor(m => m.FullName)
            @Html.HiddenFor(m => m.Email)
            @Html.HiddenFor(m => m.IdentityCard)
            @Html.HiddenFor(m => m.PhoneNumber)
            @Html.HiddenFor(m => m.CurrentScore)
            @Html.HiddenFor(m => m.MovieShowId)
            <input type="hidden" name="UseScore" id="hiddenUseScore" value="0" />
            <input type="hidden" name="IsTestSuccess" id="isTestSuccess" value="false" />
            <input type="hidden" name="SelectedPromotionId" id="hiddenSelectedPromotionId" value="" />
            <input type="hidden" name="SelectedPromotionTitle" id="hiddenSelectedPromotionTitle" value="" />
            <input type="hidden" name="SelectedPromotionDiscount" id="hiddenSelectedPromotionDiscount" value="0" />
            @for (int i = 0; i < Model.SelectedSeats.Count; i++)
            {
                <input type="hidden" name="SelectedSeats[@i].SeatName" value="@Model.SelectedSeats[i].SeatName" />
                <input type="hidden" name="SelectedSeats[@i].SeatType" value="@Model.SelectedSeats[i].SeatType" />
                <input type="hidden" name="SelectedSeats[@i].Price" value="@Model.SelectedSeats[i].Price" />
                <input type="hidden" name="SelectedSeats[@i].SeatId" value="@Model.SelectedSeats[i].SeatId" />
            }
            <div class="text-center mt-4">
                <button id="confirmBtn" type="button" class="btn btn-success btn-lg" onclick="confirmBooking()">Confirm Booking</button>
            </div>
        </form>
    </div>
</div>

@* === Promotion Modal === *@
<div class="modal fade" id="promotionModal" tabindex="-1" aria-labelledby="promotionModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="promotionModalLabel">Available Promotions</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="row">
          <!-- Promotions will be loaded here by JS as cards -->
        </div>
        <div class="row mt-2">
          <div class="col-12 text-center">
            <button type="button" class="btn btn-outline-secondary" id="clearPromotionBtn">Clear Promotion</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
    button:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }
    .promotion-card {
        cursor: pointer;
        transition: all 0.2s ease;
        border: 2px solid transparent;
    }
    .promotion-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    .promotion-card.selected {
        border: 3px solid #28a745 !important;
        box-shadow: 0 0 0 4px rgba(40,167,69,0.15);
        transition: border 0.2s, box-shadow 0.2s;
    }
</style>

<script>
    // Global variables
    var selectedPromotion = null;
    
    $(document).ready(function () {
        // Values from server
        var originalTotal = @Model.Subtotal;
        var discountPercent = @Model.RankDiscountPercent;
        var earningRate = @Model.EarningRate;
        var currentScore = @Model.CurrentScore;
        var pointValue = 1000;

        function updateMaxUsablePoints(discountedTotal) {
            var maxPoints = Math.floor((discountedTotal * 0.9) / pointValue);
            maxPoints = Math.min(maxPoints, currentScore);
            $('#maxUsablePoints').text(maxPoints);
            return maxPoints;
        }

        function updatePriceWithDiscount(discountPercent) {
            // Step 1: Apply promotion discount first (if selected)
            var promotionDiscountAmount = 0;
            var priceAfterPromotion = originalTotal;
            if (selectedPromotion) {
                promotionDiscountAmount = Math.round(originalTotal * (selectedPromotion.discountLevel / 100));
                priceAfterPromotion = originalTotal - promotionDiscountAmount;
            }
            
            // Step 2: Apply rank discount on price after promotion
            var rankDiscountAmount = 0;
            var priceAfterRankDiscount = priceAfterPromotion;
            if (discountPercent > 0) {
                rankDiscountAmount = Math.round(priceAfterPromotion * (discountPercent / 100));
                priceAfterRankDiscount = priceAfterPromotion - rankDiscountAmount;
            }
            
            var useScore = parseInt($('#useScore').val()) || 0;
            var maxUsablePoints = updateMaxUsablePoints(priceAfterRankDiscount);
            var valid = true;
            var validationMsg = '';
            if (useScore === 0) {
                validationMsg = '';
                valid = true;
            } else if (useScore < 20) {
                validationMsg = 'Minimum 20 points required.';
                valid = false;
            } else if (useScore > maxUsablePoints) {
                validationMsg = `You can use up to ${maxUsablePoints} points for this order.`;
                valid = false;
            }
            
            // Promotion discount row
            if (selectedPromotion) {
                $('#promotionDiscountRow').show();
                $('#promotionDiscountDisplay').text(`-${promotionDiscountAmount.toLocaleString()} VND (${selectedPromotion.discountLevel}%)`);
            } else {
                $('#promotionDiscountRow').hide();
            }
            
            // Rank discount row
            if (discountPercent > 0) {
                $('#rankDiscountRow').show();
                $('#rankDiscountDisplay').text(`-${rankDiscountAmount.toLocaleString()} VND (${discountPercent}%)`);
            } else {
                $('#rankDiscountRow').hide();
            }
            
            // Points used row
            const pointsUsedRow = document.getElementById('pointsUsedRow');
            const pointsUsedDisplay = document.getElementById('pointsUsedDisplay');
            if (useScore > 0 && valid) {
                pointsUsedDisplay.textContent = `-${(useScore * pointValue).toLocaleString()} VND`;
                pointsUsedRow.style.display = '';
            } else {
                pointsUsedRow.style.display = 'none';
            }
            
            // Final total
            var savings = useScore * pointValue;
            var finalTotal = priceAfterRankDiscount;
            if (valid && useScore > 0) {
                finalTotal = priceAfterRankDiscount - savings;
                if (finalTotal < 0) finalTotal = 0;
            }
            $('#totalPriceDisplay').html(`<strong>${finalTotal.toLocaleString()} VND</strong>`);
            
            // Point earning preview (always show)
            var pointsToEarn = 0;
            if (valid) {
                pointsToEarn = Math.round((useScore > 0 ? finalTotal : priceAfterRankDiscount) * earningRate / 100 / pointValue);
            }
            $('#pointsEarnedPreview').text(`You will earn ${pointsToEarn} point${pointsToEarn === 1 ? '' : 's'} from this transaction`).addClass('text-success').show();
            
            // Savings
            if (valid && useScore > 0) {
                $('#pointSavings').text(`Using ${useScore} points saves you ${savings.toLocaleString()} VND`);
            } else {
                $('#pointSavings').text('');
            }
            
            // Validation
            $('#pointValidation').text(validationMsg);
            $('#confirmBtn').prop('disabled', !valid);
            $('#hiddenUseScore').val(valid ? useScore : 0);
            
            // Update hidden fields for promotion
            if (selectedPromotion) {
                $('#hiddenSelectedPromotionId').val(selectedPromotion.promotionId);
                $('#hiddenSelectedPromotionTitle').val(selectedPromotion.title);
                $('#hiddenSelectedPromotionDiscount').val(promotionDiscountAmount);
            } else {
                $('#hiddenSelectedPromotionId').val('');
                $('#hiddenSelectedPromotionTitle').val('');
                $('#hiddenSelectedPromotionDiscount').val(0);
            }
            
            // Price display
            if (discountPercent > 0 || selectedPromotion) {
                $('#originalTotal').css({'text-decoration':'line-through','color':'#888','font-size':'1.1em'}).text(originalTotal.toLocaleString() + ' VND');
                if (valid && useScore > 0) {
                    $('#discountedTotal').show().css({'font-size':'1.3em','font-weight':'bold','color':'#1a7f37'}).text(finalTotal.toLocaleString() + ' VND');
                } else {
                    $('#discountedTotal').show().css({'font-size':'1.3em','font-weight':'bold','color':'#1a7f37'}).text((priceAfterRankDiscount).toLocaleString() + ' VND');
                }
            } else {
                $('#originalTotal').css({'text-decoration':'none','color':'#1a7f37','font-size':'1.3em'}).text(originalTotal.toLocaleString() + ' VND');
                $('#discountedTotal').hide();
            }
        }
        
        $('#useScore').on('input', function () {
            updatePriceWithDiscount(discountPercent);
        });
        
        // Promotion Modal logic
        let promotionModalInstance = null;
        
        // Always load promotions on page load
        loadPromotions();
        
        $('#openPromotionModalBtn').click(function () {
            if (!promotionModalInstance) {
                promotionModalInstance = new bootstrap.Modal(document.getElementById('promotionModal'));
            }
            promotionModalInstance.show();
        });

        // Clear promotion button
        $('#clearPromotionBtn').click(function () {
            selectedPromotion = null;
            $('#selectedPromotionInfo').text('');
            $('.promotion-card').removeClass('selected');
            updatePriceWithDiscount(discountPercent);
            if (promotionModalInstance) promotionModalInstance.hide();
        });

        function loadPromotions() {
            // Get current booking details for promotion filtering
            var seatCount = @Model.SelectedSeats.Count;
            var showDate = '@Model.ShowDate.ToString("yyyy-MM-dd")';
            var movieId = '@Model.MovieId';
            var movieName = '@Model.MovieName';

            var requestData = {
                memberId: null, // No member ID for user bookings
                seatCount: seatCount,
                showDate: showDate,
                movieId: movieId,
                movieName: movieName
            };

            $.ajax({
                url: '/Booking/GetEligiblePromotionsForUser',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(requestData),
                success: function(response) {
                    if (response.success) {
                        updatePromotionModal(response.promotions);
                    } else {
                        console.error('Error loading promotions:', response.message);
                        updatePromotionModal([]);
                    }
                },
                error: function(xhr, status, error) {
                    console.error('AJAX Error:', error);
                    updatePromotionModal([]);
                }
            });
        }

        function updatePromotionModal(promotions) {
            const modalBody = $('#promotionModal .modal-body');
            const promotionsRow = modalBody.find('.row').first();
            promotionsRow.empty();
            let highestDiscount = -1;
            let highestPromoId = null;
            
            if (promotions.length === 0) {
                promotionsRow.append('<div class="col-12 text-center text-muted">No eligible promotions available for this booking.</div>');
            } else {
                promotions.forEach(function(promo) {
                    const promoCard = `
                        <div class="col-md-6 mb-4">
                            <div class="card h-100 shadow-sm promotion-card" data-promotion-id="${promo.promotionId}" data-discount="${promo.discountLevel}">
                                ${promo.image ? `<img src="${promo.image}" class="card-img-top" alt="Promotion Image" style="max-height:180px;object-fit:cover;">` : ''}
                                <div class="card-body">
                                    <h5 class="card-title">${promo.title}</h5>
                                    <p class="card-text">${promo.detail}</p>
                                    <p class="mb-1"><strong>Discount:</strong> ${promo.discountLevel}%</p>
                                    <p class="mb-0"><strong>Duration:</strong> ${promo.startTime || 'N/A'} - ${promo.endTime || 'N/A'}</p>
                                    <button type="button" class="btn btn-success mt-2 select-promotion-btn" data-promotion-id="${promo.promotionId}" data-discount="${promo.discountLevel}">Select</button>
                                </div>
                            </div>
                        </div>
                    `;
                    promotionsRow.append(promoCard);
                    // Track highest discount
                    if (promo.discountLevel > highestDiscount) {
                        highestDiscount = promo.discountLevel;
                        highestPromoId = promo.promotionId;
                    }
                });
                
                // Attach click event for select buttons
                $('.select-promotion-btn').off('click').on('click', function () {
                    const card = $(this).closest('.promotion-card');
                    // Remove 'selected' from all cards, then add to the clicked one
                    $('.promotion-card').removeClass('selected');
                    card.addClass('selected');
                    const promotion = {
                        promotionId: card.data('promotion-id'),
                        discountLevel: card.data('discount'),
                        title: card.find('.card-title').text(),
                        detail: card.find('.card-text').text()
                    };
                    selectedPromotion = promotion;
                    $('#selectedPromotionInfo').text(`Selected: ${promotion.title} (Discount: ${promotion.discountLevel || 0}%)`);
                    updatePriceWithDiscount(discountPercent);
                    if (promotionModalInstance) promotionModalInstance.hide();
                });
                
                // Auto-select the highest discount promotion
                if (highestPromoId !== null) {
                    // Simulate click on the select button of the highest discount promotion
                    setTimeout(function() {
                        const btn = $(`.select-promotion-btn[data-promotion-id='${highestPromoId}']`);
                        if (btn.length) btn.trigger('click');
                    }, 100);
                }
            }
        }
        
        // Initial state
        updatePriceWithDiscount(discountPercent);
    });
    
    function confirmBooking() {
        // Update hidden fields with current values
        var useScoreInput = document.getElementById('useScore');
        var hiddenUseScore = document.getElementById('hiddenUseScore');
        var isTestSuccess = document.getElementById('isTestSuccess');
        
        if (useScoreInput && hiddenUseScore) {
            hiddenUseScore.value = useScoreInput.value || 0;
        }
        
        // Set test success to true to bypass payment
        if (isTestSuccess) {
            isTestSuccess.value = "true";
        }
        
        // Update promotion fields if promotion is selected
        if (selectedPromotion) {
            $('#hiddenSelectedPromotionId').val(selectedPromotion.promotionId);
            $('#hiddenSelectedPromotionTitle').val(selectedPromotion.title);
            // Calculate promotion discount amount using the same logic as updatePriceWithDiscount
            var originalTotal = @Model.Subtotal;
            var promotionDiscountAmount = Math.round(originalTotal * (selectedPromotion.discountLevel / 100));
            $('#hiddenSelectedPromotionDiscount').val(promotionDiscountAmount);
        }
        
        // Submit the form
        document.querySelector('form[method="post"]').submit();
    }
</script>
