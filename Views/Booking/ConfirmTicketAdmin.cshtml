@using Newtonsoft.Json
@model MovieTheater.ViewModels.ConfirmTicketAdminViewModel

<script>
    window.serverPromotionDiscountPercent = @Model.BookingDetails.PromotionDiscountPercent;
</script>

@{
    ViewBag.Title = "Confirm Ticket Information (Admin)";
    Layout = "_Layout";
}

<style>
    .member-input-group .form-control {
        max-width: 220px;
        padding: 0.3rem 0.5rem;
        font-size: 1rem;
        display: inline-block;
    }
    .member-input-group .btn {
        padding: 0.3rem 0.8rem;
        font-size: 1rem;
        margin-left: 4px;
    }
    #ticketsToConvert {
        max-width: 120px;
        padding: 0.3rem 0.5rem;
        font-size: 1rem;
        display: inline-block;
    }
    .soft-label {
        font-weight: 500;
        color: #444;
        margin-bottom: 0.1rem;
        display: block;
        font-size: 1rem;
        margin-right: 0.5rem;
    }
    .soft-readonly {
        background: #f8f9fa;
        border: none;
        border-bottom: 1px solid #e0e0e0;
        border-radius: 0;
        padding: 0.2rem 0.5rem;
        margin-bottom: 0.2rem;
        width: 100%;
        font-size: 1rem;
        color: #222;
        opacity: 1;
        cursor: not-allowed;
        box-shadow: none;
        min-width: 80px;
        margin-right: 1.5rem;
    }
    .ticket-row {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        margin-bottom: 0.3rem;
    }
    .ticket-row .soft-label {
        min-width: 110px;
    }
    .ticket-row .soft-readonly {
        flex: 1 1 180px;
        min-width: 120px;
        margin-right: 2rem;
    }
    .member-info-section {
        background: #f6f8fa;
        border-radius: 8px;
        padding: 1rem 1rem 0.5rem 1rem;
        margin-bottom: 1rem;
    }
    .section-title {
        margin-top: 1.2rem;
        margin-bottom: 0.5rem;
        font-weight: 600;
        font-size: 1.1rem;
    }
    .remove-voucher-btn {
        position: absolute;
        top: 50%;
        right: 0.5rem;
        transform: translateY(-50%);
        background: #fff;
        border: none;
        border-radius: 50%;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 1px 4px rgba(0,0,0,0.07);
        transition: background 0.2s;
        color: #dc3545;
        z-index: 2;
    }
    .remove-voucher-btn:hover {
        background: #ffeaea;
        color: #a71d2a;
    }
    #selectedVoucherInfo {
        min-height: 36px;
        padding-right: 40px;
        position: relative;
    }
</style>

<div class="container mt-4">
    <div class="text-start p-3">
        <a href="@Url.Action("Select", "Seat", new { movieId = Model.BookingDetails.MovieId, date = Model.BookingDetails.ShowDate.ToString("dd/MM/yyyy"), time = Model.BookingDetails.ShowTime, versionId = Model.BookingDetails.VersionId, isAdminSell = "true" })" class="btn btn-secondary">&larr; Return</a>
    </div>
    <h2 class="text-center mb-4">Confirm Ticket Information (Admin)</h2>
    <div class="card shadow p-4">
        <div class="section-title">Movie & Show Info</div>
        <div class="ticket-row">
            <label for="movieName" class="soft-label">Movie Name</label>
            <input type="text" id="movieName" class="soft-readonly" value="@Model.BookingDetails.MovieName" readonly />
            <label for="screen" class="soft-label">Screen</label>
            <input type="text" id="screen" class="soft-readonly" value="@Model.BookingDetails.CinemaRoomName" readonly />
        </div>
        <div class="ticket-row">
            <label for="showDate" class="soft-label">Date</label>
            <input type="text" id="showDate" class="soft-readonly" value="@Model.BookingDetails.ShowDate.ToString("yyyy-MM-dd")" readonly />
            <label for="showTime" class="soft-label">Time</label>
            <input type="text" id="showTime" class="soft-readonly" value="@Model.BookingDetails.ShowTime" readonly />
        </div>
        <div class="ticket-row">
            <label for="screen" class="soft-label">Version</label>
            <input type="text" id="screen" class="soft-readonly" value="@Model.BookingDetails.VersionName" readonly />
        </div>

        <hr />
        <div class="section-title">Seat(s)</div>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Seat</th>
                    <th>Type</th>
                    <th>Price</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var seat in Model.BookingDetails.SelectedSeats)
                {
                    <tr>
                        <td>@seat.SeatName</td>
                        <td>@seat.SeatType</td>
                        <td>
                            @if (seat.OriginalPrice.HasValue && seat.PromotionDiscount.HasValue && seat.PromotionDiscount.Value > 0)
                            {
                                <span style="text-decoration: line-through; color: #888;">@seat.OriginalPrice.Value.ToString("N0") VND</span>
                                <span style="color: #1a7f37; font-weight: bold;">@seat.PriceAfterPromotion.Value.ToString("N0") VND</span>
                                @if (!string.IsNullOrEmpty(seat.PromotionName))
                                {
                                    <span class="badge bg-info text-dark ms-2">@seat.PromotionName</span>
                                }
                            }
                            else
                            {
                                <span style="color: #1a7f37; font-weight: bold;">@seat.Price.ToString("N0") VND</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="text-end mb-2">
            <span id="originalTotal" style="font-size: 1.3em; font-weight: bold; color: #1a7f37;">
                Total Price: @Model.BookingDetails.TotalPrice.ToString(System.Globalization.CultureInfo.InvariantCulture) VND
            </span>
            <span id="discountedTotal" style="display:none;"></span>
            <div id="discountInfo" class="text-muted" style="font-size: 0.95em;"></div>
            <div id="pointEarningPreview" class="text-muted" style="font-size: 0.95em;"></div>
            <div id="pointSavings" class="text-success" style="font-size: 0.95em;"></div>
        </div>
        
        @if (Model.SelectedFoods.Any())
        {
            <hr />
            <div class="section-title">Food & Drinks</div>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Item</th>
                        <th>Qty</th>
                        <th>Price</th>
                        <th>Total</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var food in Model.SelectedFoods)
                    {
                        <tr>
                            <td>@food.Name</td>
                            <td>@food.Quantity</td>
                            <td>@food.Price.ToString("N0") VND</td>
                            <td>@((food.Price * food.Quantity).ToString("N0")) VND</td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="3" class="text-end"><strong>Total Food:</strong></td>
                        <td><strong>@Model.TotalFoodPrice.ToString("N0") VND</strong></td>
                    </tr>
                </tfoot>
            </table>
        }
        <hr />
        <!-- Member selection UI -->
        <div class="mb-3">
            <label class="soft-label"><strong>Select Member: *</strong></label>
            <button type="button" id="openMemberModalBtn" class="btn btn-primary">Select Member</button>
        </div>
        <div id="memberDetails" style="@(string.IsNullOrEmpty(Model.MemberId) ? "display:none;" : "")">
            <hr />
            <div class="section-title">Member Information</div>
            <div class="member-info-section">
                <div class="ticket-row">
                    <label for="memberId" class="soft-label">Member ID</label>
                    <input type="text" id="memberId" class="soft-readonly" value="@Model.MemberId" readonly />
                    <label for="memberFullName" class="soft-label">Full Name</label>
                    <input type="text" id="memberFullName" class="soft-readonly" value="@Model.MemberFullName" readonly />
                </div>
                <div class="ticket-row">
                    <label for="memberIdentityCard" class="soft-label">Identity Card</label>
                    <input type="text" id="memberIdentityCard" class="soft-readonly" value="@Model.MemberIdentityCard" readonly />
                    <label for="memberPhoneNumber" class="soft-label">Phone Number</label>
                    <input type="text" id="memberPhoneNumber" class="soft-readonly" value="@Model.MemberPhoneNumber" readonly />
                </div>
                <div class="ticket-row">
                    <label for="memberScore" class="soft-label">Member Score</label>
                    <input type="text" id="memberScore" class="soft-readonly" value="@Model.MemberScore" readonly />
                    <input type="hidden" id="accountId" value="@Model.MemberAccountId" />
                    <input type="hidden" id="rankDiscountPercent" value="@Model.BookingDetails.RankDiscountPercent" />
                    <input type="hidden" asp-for="BookingDetails.PromotionDiscountPercent" />
                </div>
                <div class="form-group mt-3">
                    <button type="button" id="openVoucherModalBtn" class="btn btn-primary">Select Voucher</button>
                    <div id="selectedVoucherInfo" class="mt-2 text-success position-relative"></div>
                    <input type="hidden" id="selectedVoucherId" />
                    <input type="hidden" id="voucherAmountHidden" name="VoucherAmount" value="@Model.VoucherAmount" />
                </div>
            </div>
            <div class="mb-3 mt-3">
                <label for="useScore" class="soft-label"><strong>Points to use (1 point = 1,000 VND):</strong></label>
                <input type="number" id="useScore" class="form-control" min="0" value="0" style="width: 120px; display: inline-block;" />
                <div class="text-muted mt-1">Max usable: <span id="maxUsablePoints">(calculated)</span> | <span id="pointsEarnedPreview" class="text-success">You will earn 0 points from this transaction</span></div>
                <div id="pointValidation" class="text-danger" style="font-size: 0.95em;"></div>
            </div>
        </div>
        <div class="text-center mt-4">
            <button type="button" id="confirmTicketAdminBtn" class="btn btn-success btn-lg" disabled>Confirm Ticket Booking</button>
        </div>
        <input type="hidden" id="usedScoreHidden" name="UsedScore" value="@Model.UsedScore" />
        <input type="hidden" id="voucherAmountHidden" name="VoucherAmount" value="@Model.VoucherAmount" />
    </div>
</div>

<!-- Move the modal HTML to the end of the file, outside the main content -->

<!-- Member Picker Modal -->
<div class="modal fade" id="memberModal" tabindex="-1" aria-labelledby="memberModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="memberModalLabel">Select a Member</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <input type="text" id="memberSearch" class="form-control mb-3" placeholder="Search by name, phone, or email..." />
        <div style="max-height: 350px; overflow-y: auto;">
          <table class="table table-bordered table-hover" id="memberTable">
            <thead>
              <tr>
                <th>Member ID</th>
                <th>Full Name</th>
                <th>Identity Card</th>
                <th>Email</th>
                <th>Phone</th>
                <th>Action</th>
              </tr>
            </thead>
            <tbody>
              <!-- Members will be loaded here by JS -->
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Voucher Picker Modal -->
<div class="modal fade" id="voucherModal" tabindex="-1" aria-labelledby="voucherModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="voucherModalLabel">My Vouchers</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="row" id="voucherListContainer">
          <!-- Voucher cards will load here -->
        </div>
        <div class="row mt-2">
          <div class="col-12 text-center">
            <button type="button" class="btn btn-outline-secondary" id="clearVoucherBtn">Clear Voucher</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Promotion Picker Modal -->
<div class="modal fade" id="promotionModal" tabindex="-1" aria-labelledby="promotionModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="promotionModalLabel">All Promotions</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="row">
          <!-- Promotions will be loaded here by JS as cards -->
        </div>
        <div class="row mt-2">
          <div class="col-12 text-center">
            <button type="button" class="btn btn-outline-secondary" id="clearPromotionBtn">Clear Promotion</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Open modal using Bootstrap 5 API
            let memberModalInstance = null;
            let selectedAccountId = null;
            $('#openMemberModalBtn').click(function () {
                if (!memberModalInstance) {
                    memberModalInstance = new bootstrap.Modal(document.getElementById('memberModal'));
                }
                memberModalInstance.show();
                loadMembers();
            });

            // Load all members into the modal table
            function loadMembers() {
                $.getJSON('/Booking/GetAllMembers', function (members) {
                    renderMemberTable(members);
                    $('#memberSearch').off('input').on('input', function () {
                        const keyword = $(this).val().toLowerCase().trim();
                        const filtered = members.filter(m =>
                            (m.account.fullName && m.account.fullName.toLowerCase().includes(keyword)) ||
                            (m.account.email && m.account.email.toLowerCase().includes(keyword)) ||
                            (m.account.phoneNumber && m.account.phoneNumber.toLowerCase().includes(keyword)) ||
                            (m.account.identityCard && m.account.identityCard.toLowerCase().includes(keyword))
                        );
                        renderMemberTable(filtered);
                    });
                });
            }

            function renderMemberTable(members) {
                const tbody = $('#memberTable tbody');
                tbody.empty();
                if (members.length === 0) {
                    tbody.append('<tr><td colspan="6" class="text-center">No members found.</td></tr>');
                    return;
                }
                members.forEach(m => {
                    const row = `<tr>
                        <td>${m.memberId}</td>
                        <td>${m.account.fullName || ''}</td>
                        <td>${m.account.identityCard || ''}</td>
                        <td>${m.account.email || ''}</td>
                        <td>${m.account.phoneNumber || ''}</td>
                        <td><button type="button" class="btn btn-sm btn-success select-member-btn" data-member='${JSON.stringify(m)}'>Select</button></td>
                    </tr>`;
                    tbody.append(row);
                });
                // Attach select event
                $('.select-member-btn').off('click').on('click', function () {
                    const member = JSON.parse($(this).attr('data-member'));
                    fillMemberInfo(member);
                    if (memberModalInstance) memberModalInstance.hide();
                });
            }

            let memberSelected = false;
            function updateConfirmButtonState() {
                // Check if a member is selected
                memberSelected = !!$('#memberId').val();
                // Validate score
                var used = parseInt($('#useScore').val()) || 0;
                var maxPoints = updateMaxUsablePoints();
                var validScore = true;
                if (used === 0) {
                    validScore = true;
                } else if (used < 20) {
                    validScore = false;
                } else if (used > maxPoints) {
                    validScore = false;
                }
                // Enable only if both member is selected and score is valid
                $('#confirmTicketAdminBtn').prop('disabled', !(memberSelected && validScore));
            }

            function fillMemberInfo(member) {
                $('#memberId').val(member.memberId);
                $('#memberFullName').val(member.account.fullName);
                $('#memberIdentityCard').val(member.account.identityCard);
                $('#memberPhoneNumber').val(member.account.phoneNumber);
                $('#memberScore').val(member.score);
                $('#accountId').val(member.account.accountId || '');
                selectedAccountId = member.account.accountId;
                $('#rankDiscountPercent').val(member.account.rankDiscountPercent || 0);
                $('#promotionDiscountPercent').val(member.account.promotionDiscountPercent || 0);
                $('#memberDetails').show();
                updateMaxUsablePoints();
                onMemberSelected(member.memberId);
                $('#openVoucherModalBtn').prop('disabled', false);
                // Reset voucher selection when member changes
                selectedVoucher = null;
                $('#selectedVoucherInfo').text('');
                $('#selectedVoucherId').val('');
                $('#voucherAmountHidden').val('0');
                $('.voucher-card').removeClass('selected');
                updatePriceAll();
                updateConfirmButtonState(); // <-- update button state
            }

            // Confirm Ticket Admin Button Click
            $('#confirmTicketAdminBtn').click(function () {
                var model = {
                    BookingDetails: {
                        MovieId: '@Model.BookingDetails.MovieId',
                        MovieName: '@Model.BookingDetails.MovieName',
                        CinemaRoomName: '@Model.BookingDetails.CinemaRoomName',
                        ShowDate: '@Model.BookingDetails.ShowDate.ToString("yyyy-MM-dd")',
                        ShowTime: '@Model.BookingDetails.ShowTime',
                        SelectedSeats: @Html.Raw(JsonConvert.SerializeObject(Model.BookingDetails.SelectedSeats)),
                        TotalPrice: @Model.BookingDetails.TotalPrice.ToString(System.Globalization.CultureInfo.InvariantCulture),
                        PricePerTicket: @Model.BookingDetails.PricePerTicket.ToString(System.Globalization.CultureInfo.InvariantCulture),
                        MovieShowId: @Model.MovieShowId,
                        PromotionDiscountPercent: Number(window.serverPromotionDiscountPercent) || 0,
                    },
                    MemberIdInput: $('#memberInput').val(),
                    MemberId: $('#memberId').val(),
                    MemberFullName: $('#memberFullName').val(),
                    MemberIdentityCard: $('#memberIdentityCard').val(),
                    MemberPhoneNumber: $('#memberPhoneNumber').val(),
                    MemberScore: parseInt($('#memberScore').val()) || 0,
                    UsedScore: parseInt($('#useScore').val()) || 0,
                    SelectedVoucherId: $('#selectedVoucherId').val(),
                    VoucherAmount: parseInt($('#voucherAmountHidden').val()) || 0,
                    AccountId: $('#accountId').val(),
                    RankDiscountPercent: parseFloat($('#rankDiscountPercent').val()) || 0,
                    MovieShowId: @Model.MovieShowId,
                    SelectedFoods: @Html.Raw(JsonConvert.SerializeObject(Model.SelectedFoods)),
                    TotalFoodPrice: @Model.TotalFoodPrice
                };

                $.ajax({
                    url: '@Url.Action("ConfirmTicketForAdmin", "Booking")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(model),
                    success: function (response) {
                        if (response.success) {
                            // Redirect to the backend-confirmed invoice page
                            window.location.href = response.redirectUrl;
                        } else {
                            $('#memberMessage').text(response.message).show();
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("AJAX Error:", error);
                        $('#memberMessage').text("An error occurred during booking confirmation.").show();
                    }
                });
            });

            // Remove ticketsToConvert logic, add useScore logic
            function updateMaxUsablePoints() {
                // This should be calculated from backend, but for now, estimate:
                var totalPrice = @Model.BookingDetails.TotalPrice.ToString(System.Globalization.CultureInfo.InvariantCulture);
                var memberScore = parseInt($('#memberScore').val()) || 0;
                var maxPoints = Math.floor((totalPrice * 0.9) / 1000);
                maxPoints = Math.min(maxPoints, memberScore);
                $('#maxUsablePoints').text(maxPoints);
                return maxPoints;
            }
            $('#useScore').on('input', function () {
                updatePriceAll();
                updateConfirmButtonState(); // <-- update button state
            });
            // Set initial value
            $('#useScore').val(0);

            // Track current earning rate and discount percent
            var currentEarningRate = 0;
            var currentDiscountPercent = 0;
            let selectedVoucher = null;
            function updatePriceAll() {
                var originalTotal = parseInt('@Model.BookingDetails.TotalPrice');
                // Áp dụng rank benefit trước
                var totalFoodPrice = @Model.TotalFoodPrice;
                
                // Áp dụng rank benefit trước (chỉ cho seat, không cho food)
                var discountPercent = currentDiscountPercent || 0;
                var discountAmount = 0;
                if (originalTotal > 0) {
                    discountAmount = Math.round(originalTotal * (discountPercent / 100));
                }
                var afterRank = originalTotal - discountAmount;
                if (afterRank < 0) afterRank = 0;

                // Sau đó mới áp dụng voucher (chỉ cho seat, không cho food)
                var voucherAmount = selectedVoucher ? selectedVoucher.value : 0;
                var afterVoucher = afterRank - voucherAmount;
                if (afterVoucher < 0) afterVoucher = 0;

                // Điểm (chỉ cho seat, không cho food)
                var useScore = parseInt($('#useScore').val()) || 0;
                var pointValue = 1000;
                var savings = useScore * pointValue;
                var finalSeatPrice = afterVoucher - savings;
                if (finalSeatPrice < 0) finalSeatPrice = 0;
                
                // Tổng cuối cùng = seat price + food price
                var finalTotal = finalSeatPrice + totalFoodPrice;

                // Update hiển thị giá
                var seatOnlyTotal = originalTotal;
                if (voucherAmount > 0 || discountAmount > 0 || useScore > 0) {
                    $('#originalTotal').css({'text-decoration':'line-through','color':'#888','font-size':'1.1em'}).text(originalTotal.toLocaleString() + ' VND');
                    $('#discountedTotal').show().css({'font-size':'1.3em','font-weight':'bold','color':'#1a7f37'}).text(finalSeatPrice.toLocaleString() + ' VND');
                    seatOnlyTotal = finalSeatPrice;
                } else {
                    $('#originalTotal').css({'text-decoration':'none','color':'#1a7f37','font-size':'1.3em'}).text(originalTotal.toLocaleString() + ' VND');
                    $('#discountedTotal').hide();
                }
                
                // Hiển thị tổng cuối cùng bao gồm food
                if (totalFoodPrice > 0) {
                    var totalDisplay = $('#discountedTotal').is(':visible') ? 
                        $('#discountedTotal').text() + ' + ' + totalFoodPrice.toLocaleString() + ' VND (Food) = ' + finalTotal.toLocaleString() + ' VND' :
                        originalTotal.toLocaleString() + ' VND + ' + totalFoodPrice.toLocaleString() + ' VND (Food) = ' + finalTotal.toLocaleString() + ' VND';
                    
                    if (!$('#totalWithFood').length) {
                        $('#discountedTotal').after('<div id="totalWithFood" style="font-size: 1.1em; font-weight: bold; color: #007bff; margin-top: 0.5rem;"></div>');
                    }
                    $('#totalWithFood').text('Total: ' + finalTotal.toLocaleString() + ' VND');
                } else {
                    $('#totalWithFood').remove();
                }

                // Hiển thị voucher
                let discountInfoHtml = '';
                // Hiển thị rank discount
                discountInfoHtml +=
                    discountPercent > 0 && originalTotal > 0
                    ? `Rank discount: ${discountPercent}% (-${discountAmount.toLocaleString()} VND)`
                    : 'Rank discount: 0% (-0 VND)';
                if (voucherAmount > 0) {
                    discountInfoHtml += `<div class='text-success'>Voucher: -${voucherAmount.toLocaleString()} VND</div>`;
                }
                $('#discountInfo').html(discountInfoHtml);

                // Savings (chỉ khi dùng điểm)
                if (useScore > 0) {
                    $('#pointSavings').text(`Using ${useScore} points saves you ${savings.toLocaleString()} VND`);
                } else {
                    $('#pointSavings').text('');
                }

                // Tính điểm thưởng (chỉ dựa trên seat price, không bao gồm food)
                var earningRate = currentEarningRate || 0;
                var pointsToEarn = Math.round((finalSeatPrice) * earningRate / 100 / pointValue);
                $('#pointsEarnedPreview').text(`You will earn ${pointsToEarn} points from this transaction`).addClass('text-success');

                // Validate điểm (chỉ dựa trên seat price, không bao gồm food)
                var memberScore = parseInt($('#memberScore').val()) || 0;
                var maxUsablePoints = Math.floor((afterVoucher * 0.9) / pointValue);
                maxUsablePoints = Math.min(maxUsablePoints, memberScore);
                $('#maxUsablePoints').text(maxUsablePoints);
                var validationMsg = '';
                var valid = true;
                if (useScore === 0) {
                    validationMsg = '';
                    valid = true;
                } else if (useScore < 20) { validationMsg = 'Minimum 20 points required.'; valid = false; }
                else if (useScore > maxUsablePoints) { validationMsg = `You can use up to ${maxUsablePoints} points for this order.`; valid = false; }
                $('#pointValidation').text(validationMsg);
                // At the end of updatePriceAll, set the hidden input value:
                $('#promotionDiscountPercent').val(discountPercent);
            }

            function onMemberSelected(memberId) {
                $.getJSON('/Booking/GetMemberDiscount', { memberId: memberId }, function (data) {
                    currentDiscountPercent = data.discountPercent || 0;
                    currentEarningRate = data.earningRate || 0;
                    updatePriceAll();
                });
            }
            // On page load, show initial state
            updatePriceAll();
            updateConfirmButtonState(); // <-- update button state

            // VOUCHER PICKER LOGIC
            let voucherModalInstance = null;
            $('#openVoucherModalBtn').click(function () {
                if (!selectedAccountId) {
                    alert('Please select a member first!');
                    return;
                }
                if (!voucherModalInstance) {
                    voucherModalInstance = new bootstrap.Modal(document.getElementById('voucherModal'));
                }
                loadVouchers(selectedAccountId);
                voucherModalInstance.show();
            });
            $('#clearVoucherBtn').click(function () {
                selectedVoucher = null;
                $('#selectedVoucherInfo').text('');
                $('#selectedVoucherId').val('');
                $('#voucherAmountHidden').val('0');
                $('.voucher-card').removeClass('selected');
                updatePriceAll();
                if (voucherModalInstance) voucherModalInstance.hide();
            });
            function loadVouchers(accountId) {
                $.ajax({
                    url: '/Voucher/GetAvailableVouchers?accountId=' + encodeURIComponent(accountId),
                    method: 'GET',
                    success: function (data) {
                        let html = '';
                        if (data.length === 0) {
                            html = '<div class="col-12 text-center"><p class="text-muted">No available vouchers found.</p></div>';
                        } else {
                            data.forEach(v => {
                                html += `
                                <div class="col-md-4 mb-3">
                                  <div class="card voucher-card d-flex flex-column align-items-center" data-id="${v.id}" data-value="${v.value}">
                                    <img src="${v.image ? v.image : '/images/vouchers/voucher.jpg'}" class="voucher-img-top mt-3 mb-2" alt="Voucher Image" style="width: 80px; height: 80px; object-fit: cover; border-radius: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.08);">
                                    <div class="card-body text-center p-2">
                                      <h5 class="card-title mb-1" style="color:#007bff;font-weight:600;">${v.code}</h5>
                                      <p class="card-text mb-1">Value: <span style="font-weight:600;">${v.value.toLocaleString()} VND</span></p>
                                      <p class="card-text mb-1">Expires: <span style="font-size:0.95em;">${v.expirationDate}</span></p>
                                    </div>
                                  </div>
                                </div>`;
                            });
                        }
                        $('#voucherListContainer').html(html);
                        $('.voucher-card').click(function () {
                            $('.voucher-card').removeClass('selected');
                            $(this).addClass('selected');
                            selectedVoucher = {
                                id: $(this).data('id'),
                                value: $(this).data('value')
                            };
                            renderSelectedVoucherInfo();
                            $('#selectedVoucherId').val(selectedVoucher.id);
                            $('#voucherAmountHidden').val(selectedVoucher.value);
                            updatePriceAll();
                            if (voucherModalInstance) voucherModalInstance.hide();
                        });
                    },
                    error: function() {
                        $('#voucherListContainer').html('<div class="col-12 text-center"><p class="text-danger">Error loading vouchers.</p></div>');
                    }
                });
            }

            // Update price and point info when points are entered or member is selected
            // This function is now called by updateConfirmButtonState

            function renderSelectedVoucherInfo() {
                if (selectedVoucher) {
                    $('#selectedVoucherInfo').html(`
                        <span class='fw-bold'>Selected Voucher:</span> 
                        <span class='badge bg-primary text-light'>${selectedVoucher.id}</span> - 
                        <span class='fw-bold text-success'>${selectedVoucher.value.toLocaleString()} VND</span>
                        <button type="button" id="removeVoucherBtn" class="remove-voucher-btn" title="Remove voucher">
                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/></svg>
                        </button>
                    `);
                    $('#removeVoucherBtn').off('click').on('click', function () {
                        selectedVoucher = null;
                        $('#selectedVoucherInfo').text('');
                        $('#selectedVoucherId').val('');
                        $('#voucherAmountHidden').val('0');
                        $('.voucher-card').removeClass('selected');
                        updatePriceAll();
                    });
                } else {
                    $('#selectedVoucherInfo').text('');
                }
            }
        });
    </script>
} 
